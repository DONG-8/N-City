"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Dispatcher = exports.Command = void 0;
const debug = require('debug')('colyseus:command');
class Command {
    setPayload(payload) {
        this.payload = payload;
        return this;
    }
    /**
     * Delay the execution by `milliseconds`
     * @param milliseconds
     */
    delay(milliseconds) {
        return new Promise(resolve => setTimeout(resolve, milliseconds));
    }
}
exports.Command = Command;
class Dispatcher {
    constructor(room) {
        this.stopped = false;
        this.room = room;
    }
    stop() {
        this.stopped = true;
    }
    dispatch(command, payload) {
        if (this.stopped) {
            debug(`dispatcher is stopped -> ${command.constructor.name} ${(command.payload) ? `(${JSON.stringify(command.payload)})` : ''}`);
            return;
        }
        command.room = this.room;
        command.state = this.room.state;
        command.clock = this.room.clock;
        if (payload) {
            command.setPayload(payload);
        }
        if (!command.validate || command.validate(command.payload)) {
            if (debug.enabled) {
                debug(`execute -> ${command.constructor.name} ${(command.payload) ? `(${JSON.stringify(command.payload)})` : ''}`);
            }
            const result = command.execute(command.payload);
            if (result instanceof Promise) {
                return result.then((childCommands) => __awaiter(this, void 0, void 0, function* () {
                    const nextCommands = this.getNextCommands(childCommands);
                    for (let i = 0; i < nextCommands.length; i++) {
                        yield this.dispatch(nextCommands[i]);
                    }
                }));
            }
            else {
                const nextCommands = this.getNextCommands(result);
                let lastResult;
                for (let i = 0; i < nextCommands.length; i++) {
                    if (lastResult instanceof Promise) {
                        lastResult = lastResult.then(() => this.dispatch(nextCommands[i]));
                    }
                    else {
                        lastResult = this.dispatch(nextCommands[i]);
                    }
                }
                return lastResult;
            }
        }
        else if (debug.enabled) {
            debug(`invalid -> ${command.constructor.name} ${(command.payload) ? `(${JSON.stringify(command.payload)})` : ''}`);
        }
    }
    // | Array<Promise<Command[] | void>>
    getNextCommands(nextCommands) {
        if (!nextCommands) {
            return [];
        }
        if (Array.isArray(nextCommands)) {
            return nextCommands;
        }
        return [nextCommands];
    }
}
exports.Dispatcher = Dispatcher;
