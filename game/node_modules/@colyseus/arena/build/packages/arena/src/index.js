'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_es6 = require('../../../node_modules/tslib/tslib.es6.js');
var fs = require('fs');
var http = require('http');
var path = require('path');
var cors = require('cors');
var express = require('express');
var dotenv = require('dotenv');
var core = require('@colyseus/core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var http__default = /*#__PURE__*/_interopDefaultLegacy(http);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var cors__default = /*#__PURE__*/_interopDefaultLegacy(cors);
var express__default = /*#__PURE__*/_interopDefaultLegacy(express);
var dotenv__default = /*#__PURE__*/_interopDefaultLegacy(dotenv);

var _a;
// try to import uWebSockets-express compatibility layer.
let uWebSocketsExpressCompatibility;
try {
    uWebSocketsExpressCompatibility = require('uwebsockets-express').default;
}
catch (e) { }
/**
 * Do not auto-load `${environment}.env` file when using Arena service.
 */
if (process.env.NODE_ARENA !== "true") {
    const envFilename = (process.env.NODE_ENV === "production")
        ? "arena.env"
        : `${process.env.NODE_ENV || "development"}.env`;
    const envPath = path__default['default'].resolve(path__default['default'].dirname(((_a = require === null || require === void 0 ? void 0 : require.main) === null || _a === void 0 ? void 0 : _a.filename) || process.cwd()), "..", envFilename);
    if (fs__default['default'].existsSync(envPath)) {
        dotenv__default['default'].config({ path: envPath });
        console.log(`‚úÖ ${envFilename} loaded.`);
    }
    else {
        console.log(`‚ö†Ô∏è  ${envFilename} not found.`);
    }
}
const ALLOWED_KEYS = [
    'getId',
    'initializeTransport',
    'initializeExpress',
    'initializeGameServer',
    'beforeListen'
];
function index (options) {
    for (let key in options) {
        if (ALLOWED_KEYS.indexOf(key) === -1) {
            throw new Error(`Invalid option '${key}'. Allowed options are: ${ALLOWED_KEYS.join(", ")}`);
        }
        else if (typeof (options[key]) !== "function") {
            throw new Error(`'${key}' should be a function.`);
        }
    }
    return options;
}
/**
 * Listen on your development environment
 * @param options Arena options
 * @param port Port number to bind Colyseus + Express
 */
function listen(options, port = Number(process.env.PORT || 2567)) {
    var _a, _b, _c;
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        const transport = yield getTransport(options);
        const gameServer = new core.Server({
            transport,
            // ...?
        });
        yield ((_a = options.initializeGameServer) === null || _a === void 0 ? void 0 : _a.call(options, gameServer));
        yield ((_b = options.beforeListen) === null || _b === void 0 ? void 0 : _b.call(options));
        gameServer.listen(port);
        const appId = ((_c = options.getId) === null || _c === void 0 ? void 0 : _c.call(options)) || "[ Colyseus ]";
        if (appId) {
            console.log(`üèü  ${appId}`);
        }
        console.log(`‚öîÔ∏è  Listening on ws://localhost:${port}`);
        console.log("what...");
        return gameServer;
    });
}
function getTransport(options) {
    return tslib_es6.__awaiter(this, void 0, void 0, function* () {
        let transport;
        if (!options.initializeTransport) {
            options.initializeTransport = core.Server.prototype['getDefaultTransport'];
        }
        let app = express__default['default']();
        let server = http__default['default'].createServer(app);
        transport = yield options.initializeTransport({ server });
        if (options.initializeExpress) {
            // uWebSockets.js + Express compatibility layer.
            // @ts-ignore
            if (transport['app']) {
                if (typeof (uWebSocketsExpressCompatibility) === "function") {
                    console.info("‚úÖ uWebSockets.js + Express compatibility enabled");
                    // @ts-ignore
                    server = undefined;
                    // @ts-ignore
                    app = uWebSocketsExpressCompatibility(transport['app']);
                }
                else {
                    console.warn("");
                    console.warn("‚ùå uWebSockets.js + Express compatibility mode couldn't be loaded, run the following command to fix:");
                    console.warn("üëâ npm install --save uwebsockets-express");
                    console.warn("");
                    app = undefined;
                }
            }
            if (app) {
                // Enable CORS + JSON parsing.
                app.use(cors__default['default']());
                app.use(express__default['default'].json());
                yield options.initializeExpress(app);
                console.info("‚úÖ Express initialized");
            }
        }
        return transport;
    });
}

exports.default = index;
exports.getTransport = getTransport;
exports.listen = listen;
//# sourceMappingURL=index.js.map
