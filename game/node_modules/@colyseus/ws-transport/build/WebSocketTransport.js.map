{"version":3,"file":"WebSocketTransport.js","sources":["../src/WebSocketTransport.ts"],"sourcesContent":["import http from 'http';\nimport querystring from 'querystring';\nimport url from 'url';\nimport WebSocket, { ServerOptions } from 'ws';\n\nimport { matchMaker, Protocol, Transport, debugAndPrintError, debugConnection } from '@colyseus/core';\nimport { WebSocketClient } from './WebSocketClient';\n\nfunction noop() {/* tslint:disable:no-empty */ }\nfunction heartbeat() { this.pingCount = 0; }\n\ntype RawWebSocketClient = WebSocket & { pingCount: number };\n\nexport interface TransportOptions extends ServerOptions {\n  pingInterval?: number;\n  pingMaxRetries?: number;\n}\n\nexport class WebSocketTransport extends Transport {\n  protected wss: WebSocket.Server;\n\n  protected pingInterval: NodeJS.Timer;\n  protected pingIntervalMS: number;\n  protected pingMaxRetries: number;\n\n  constructor(options: TransportOptions = {}) {\n    super();\n\n    // disable per-message deflate by default\n    if (options.perMessageDeflate === undefined) {\n      options.perMessageDeflate = false;\n    }\n\n    this.pingIntervalMS = (options.pingInterval !== undefined)\n      ? options.pingInterval\n      : 3000;\n\n    this.pingMaxRetries = (options.pingMaxRetries !== undefined)\n      ? options.pingMaxRetries\n      : 2;\n\n    // create server by default\n    if (!options.server && !options.noServer) {\n      options.server = http.createServer();\n    }\n\n    this.wss = new WebSocket.Server(options);\n    this.wss.on('connection', this.onConnection);\n\n    // this is required to allow the ECONNRESET error to trigger on the `server` instance.\n    this.wss.on('error', (err) => debugAndPrintError(err));\n\n    this.server = options.server;\n\n    if (this.pingIntervalMS > 0 && this.pingMaxRetries > 0) {\n      this.server.on('listening', () =>\n        this.autoTerminateUnresponsiveClients(this.pingIntervalMS, this.pingMaxRetries));\n\n      this.server.on('close', () =>\n        clearInterval(this.pingInterval));\n    }\n  }\n\n  public listen(port: number, hostname?: string, backlog?: number, listeningListener?: () => void) {\n    this.server.listen(port, hostname, backlog, listeningListener);\n    return this;\n  }\n\n  public shutdown() {\n    this.wss.close();\n    this.server.close();\n  }\n\n  public simulateLatency(milliseconds: number) {\n    const previousSend = WebSocket.prototype.send;\n    WebSocket.prototype.send = function(...args: any[]) {\n      setTimeout(() => previousSend.apply(this, args), milliseconds);\n    };\n  }\n\n  protected autoTerminateUnresponsiveClients(pingInterval: number, pingMaxRetries: number) {\n    // interval to detect broken connections\n    this.pingInterval = setInterval(() => {\n      this.wss.clients.forEach((client: WebSocket) => {\n        //\n        // if client hasn't responded after the interval, terminate its connection.\n        //\n        if ((client as RawWebSocketClient).pingCount >= pingMaxRetries) {\n          // debugConnection(`terminating unresponsive client ${client.sessionId}`);\n          debugConnection(`terminating unresponsive client`);\n          return client.terminate();\n        }\n\n        (client as RawWebSocketClient).pingCount++;\n        client.ping(noop);\n      });\n    }, pingInterval);\n  }\n\n  protected async onConnection(rawClient: RawWebSocketClient, req?: http.IncomingMessage & any) {\n    // prevent server crashes if a single client had unexpected error\n    rawClient.on('error', (err) => debugAndPrintError(err.message + '\\n' + err.stack));\n    rawClient.on('pong', heartbeat);\n\n    // compatibility with ws / uws\n    const upgradeReq = req || (rawClient as any).upgradeReq;\n    const parsedURL = url.parse(upgradeReq.url);\n\n    const sessionId = querystring.parse(parsedURL.query).sessionId as string;\n    const processAndRoomId = parsedURL.pathname.match(/\\/[a-zA-Z0-9_\\-]+\\/([a-zA-Z0-9_\\-]+)$/);\n    const roomId = processAndRoomId && processAndRoomId[1];\n\n    const room = matchMaker.getRoomById(roomId);\n\n    // set client id\n    rawClient.pingCount = 0;\n\n    const client = new WebSocketClient(sessionId, rawClient);\n\n    //\n    // TODO: DRY code below with all transports\n    //\n\n    try {\n      if (!room || !room.hasReservedSeat(sessionId)) {\n        throw new Error('seat reservation expired.');\n      }\n\n      await room._onJoin(client, upgradeReq);\n\n    } catch (e) {\n      debugAndPrintError(e);\n\n      // send error code to client then terminate\n      client.error(e.code, e.message, () =>\n        rawClient.close(Protocol.WS_CLOSE_WITH_ERROR));\n    }\n  }\n\n}\n"],"names":["Transport","http","WebSocket","debugAndPrintError","debugConnection","url","querystring","matchMaker","WebSocketClient","Protocol"],"mappings":"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"}