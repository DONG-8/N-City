{"version":3,"file":"Transport.mjs","sources":["../src/Transport.ts"],"sourcesContent":["import * as http from 'http';\nimport * as https from 'https';\nimport * as net from 'net';\n\nimport { Schema } from '@colyseus/schema';\nimport { EventEmitter } from 'events';\n\nexport abstract class Transport {\n    public server?: net.Server | http.Server | https.Server;\n\n    public abstract listen(port?: number, hostname?: string, backlog?: number, listeningListener?: Function): this;\n    public abstract shutdown(): void;\n\n    public abstract simulateLatency(milliseconds: number): void;\n}\n\nexport interface ISendOptions {\n  afterNextPatch?: boolean;\n}\n\nexport enum ClientState { JOINING, JOINED, RECONNECTED, LEAVING }\n\nexport interface Client {\n  readyState: number;\n\n  id: string;\n  sessionId: string; // TODO: remove sessionId on version 1.0.0\n  state: ClientState;\n\n  ref: EventEmitter;\n\n  upgradeReq?: http.IncomingMessage; // cross-compatibility for ws (v3.x+) and uws\n\n  /**\n   * User-defined data can be attached to the Client instance through this variable.\n   */\n  userData?: any;\n\n  /**\n   * auth data provided by your `onAuth`\n   */\n  auth?: any;\n  pingCount?: number; // ping / pong\n\n  _enqueuedMessages?: any[];\n  _afterNextPatchQueue: Array<[string | Client, IArguments]>;\n\n  raw(data: ArrayLike<number>, options?: ISendOptions): void;\n  enqueueRaw(data: ArrayLike<number>, options?: ISendOptions): void;\n\n  send(type: string | number, message?: any, options?: ISendOptions): void;\n  send(message: Schema, options?: ISendOptions): void;\n\n  error(code: number, message?: string): void;\n  leave(code?: number, data?: string): void;\n  close(code?: number, data?: string): void;\n}\n"],"names":[],"mappings":"MAOsB,SAAS;IACpB,MAAM,CAA2C;CAM3D;IAMW;AAAZ,WAAY,WAAW;IAAG,mDAAO,CAAA;IAAE,iDAAM,CAAA;IAAE,2DAAW,CAAA;IAAE,mDAAO,CAAA;AAAC,CAAC,EAArD,WAAW,KAAX,WAAW;;;;"}