{"version":3,"file":"getEmbeddedDiscriminatorPath.js","sources":["../../../../../../../../node_modules/mongoose/lib/helpers/document/getEmbeddedDiscriminatorPath.js"],"sourcesContent":["'use strict';\n\nconst get = require('../get');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(doc, path, options) {\n  options = options || {};\n  const typeOnly = options.typeOnly;\n  const parts = path.split('.');\n  let schema = null;\n  let type = 'adhocOrUndefined';\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = parts.slice(0, i + 1).join('.');\n    schema = doc.schema.path(subpath);\n    if (schema == null) {\n      type = 'adhocOrUndefined';\n      continue;\n    }\n    if (schema.instance === 'Mixed') {\n      return typeOnly ? 'real' : schema;\n    }\n    type = doc.schema.pathType(subpath);\n    if ((schema.$isSingleNested || schema.$isMongooseDocumentArrayElement) &&\n        schema.schema.discriminators != null) {\n      const discriminators = schema.schema.discriminators;\n      const discriminatorKey = doc.get(subpath + '.' +\n        get(schema, 'schema.options.discriminatorKey'));\n      if (discriminatorKey == null || discriminators[discriminatorKey] == null) {\n        continue;\n      }\n      const rest = parts.slice(i + 1).join('.');\n      return getEmbeddedDiscriminatorPath(doc.get(subpath), rest, options);\n    }\n  }\n\n  // Are we getting the whole schema or just the type, 'real', 'nested', etc.\n  return typeOnly ? type : schema;\n};\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;gCACc,GAAG,SAAS,4BAA4B,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE;AAC3E,EAAE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AAC1B,EAAE,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACpC,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC,EAAE,IAAI,MAAM,GAAG,IAAI,CAAC;AACpB,EAAE,IAAI,IAAI,GAAG,kBAAkB,CAAC;AAChC;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACzC,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACpD,IAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,IAAI,IAAI,MAAM,IAAI,IAAI,EAAE;AACxB,MAAM,IAAI,GAAG,kBAAkB,CAAC;AAChC,MAAM,SAAS;AACf,KAAK;AACL,IAAI,IAAI,MAAM,CAAC,QAAQ,KAAK,OAAO,EAAE;AACrC,MAAM,OAAO,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC;AACxC,KAAK;AACL,IAAI,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACxC,IAAI,IAAI,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,+BAA+B;AACzE,QAAQ,MAAM,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,EAAE;AAC9C,MAAM,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC;AAC1D,MAAM,MAAM,gBAAgB,GAAG,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,GAAG;AACpD,QAAQ,GAAG,CAAC,MAAM,EAAE,iCAAiC,CAAC,CAAC,CAAC;AACxD,MAAM,IAAI,gBAAgB,IAAI,IAAI,IAAI,cAAc,CAAC,gBAAgB,CAAC,IAAI,IAAI,EAAE;AAChF,QAAQ,SAAS;AACjB,OAAO;AACP,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChD,MAAM,OAAO,4BAA4B,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC3E,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,OAAO,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC;AAClC;;;;"}