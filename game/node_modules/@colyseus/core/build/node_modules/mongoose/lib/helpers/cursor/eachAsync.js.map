{"version":3,"file":"eachAsync.js","sources":["../../../../../../../../node_modules/mongoose/lib/helpers/cursor/eachAsync.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst immediate = require('../immediate');\nconst promiseOrCallback = require('../promiseOrCallback');\n\n/**\n * Execute `fn` for every document in the cursor. If `fn` returns a promise,\n * will wait for the promise to resolve before iterating on to the next one.\n * Returns a promise that resolves when done.\n *\n * @param {Function} next the thunk to call to get the next document\n * @param {Function} fn\n * @param {Object} options\n * @param {Function} [callback] executed when all docs have been processed\n * @return {Promise}\n * @api public\n * @method eachAsync\n */\n\nmodule.exports = function eachAsync(next, fn, options, callback) {\n  const parallel = options.parallel || 1;\n  const batchSize = options.batchSize;\n  const enqueue = asyncQueue();\n\n  return promiseOrCallback(callback, cb => {\n    if (batchSize != null) {\n      if (typeof batchSize !== 'number') {\n        throw new TypeError('batchSize must be a number');\n      }\n      if (batchSize < 1) {\n        throw new TypeError('batchSize must be at least 1');\n      }\n      if (batchSize !== Math.floor(batchSize)) {\n        throw new TypeError('batchSize must be a positive integer');\n      }\n    }\n\n    iterate(cb);\n  });\n\n  function iterate(finalCallback) {\n    let drained = false;\n    let handleResultsInProgress = 0;\n    let currentDocumentIndex = 0;\n    let documentsBatch = [];\n\n    let error = null;\n    for (let i = 0; i < parallel; ++i) {\n      enqueue(fetch);\n    }\n\n    function fetch(done) {\n      if (drained || error) {\n        return done();\n      }\n\n      next(function(err, doc) {\n        if (drained || error != null) {\n          return done();\n        }\n        if (err != null) {\n          error = err;\n          finalCallback(err);\n          return done();\n        }\n        if (doc == null) {\n          drained = true;\n          if (handleResultsInProgress <= 0) {\n            finalCallback(null);\n          } else if (batchSize != null && documentsBatch.length) {\n            handleNextResult(documentsBatch, currentDocumentIndex++, handleNextResultCallBack);\n          }\n          return done();\n        }\n\n        ++handleResultsInProgress;\n\n        // Kick off the subsequent `next()` before handling the result, but\n        // make sure we know that we still have a result to handle re: #8422\n        immediate(() => done());\n\n        if (batchSize != null) {\n          documentsBatch.push(doc);\n        }\n\n        // If the current documents size is less than the provided patch size don't process the documents yet\n        if (batchSize != null && documentsBatch.length !== batchSize) {\n          setTimeout(() => enqueue(fetch), 0);\n          return;\n        }\n\n        const docsToProcess = batchSize != null ? documentsBatch : doc;\n\n        function handleNextResultCallBack(err) {\n          if (batchSize != null) {\n            handleResultsInProgress -= documentsBatch.length;\n            documentsBatch = [];\n          } else {\n            --handleResultsInProgress;\n          }\n          if (err != null) {\n            error = err;\n            return finalCallback(err);\n          }\n          if (drained && handleResultsInProgress <= 0) {\n            return finalCallback(null);\n          }\n\n          setTimeout(() => enqueue(fetch), 0);\n        }\n\n        handleNextResult(docsToProcess, currentDocumentIndex++, handleNextResultCallBack);\n      });\n    }\n  }\n\n  function handleNextResult(doc, i, callback) {\n    const promise = fn(doc, i);\n    if (promise && typeof promise.then === 'function') {\n      promise.then(\n        function() { callback(null); },\n        function(error) { callback(error || new Error('`eachAsync()` promise rejected without error')); });\n    } else {\n      callback(null);\n    }\n  }\n};\n\n// `next()` can only execute one at a time, so make sure we always execute\n// `next()` in series, while still allowing multiple `fn()` instances to run\n// in parallel.\nfunction asyncQueue() {\n  const _queue = [];\n  let inProgress = null;\n  let id = 0;\n\n  return function enqueue(fn) {\n    if (_queue.length === 0 && inProgress == null) {\n      inProgress = id++;\n      return fn(_step);\n    }\n    _queue.push(fn);\n  };\n\n  function _step() {\n    inProgress = null;\n    if (_queue.length > 0) {\n      inProgress = id++;\n      const fn = _queue.shift();\n      fn(_step);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}