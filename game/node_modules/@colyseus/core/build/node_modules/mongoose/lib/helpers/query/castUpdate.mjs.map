{"version":3,"file":"castUpdate.mjs","sources":["../../../../../../../../node_modules/mongoose/lib/helpers/query/castUpdate.js"],"sourcesContent":["'use strict';\n\nconst CastError = require('../../error/cast');\nconst MongooseError = require('../../error/mongooseError');\nconst StrictModeError = require('../../error/strict');\nconst ValidationError = require('../../error/validation');\nconst castNumber = require('../../cast/number');\nconst cast = require('../../cast');\nconst getEmbeddedDiscriminatorPath = require('./getEmbeddedDiscriminatorPath');\nconst handleImmutable = require('./handleImmutable');\nconst moveImmutableProperties = require('../update/moveImmutableProperties');\nconst schemaMixedSymbol = require('../../schema/symbols').schemaMixedSymbol;\nconst setDottedPath = require('../path/setDottedPath');\nconst utils = require('../../utils');\n\n/*!\n * Casts an update op based on the given schema\n *\n * @param {Schema} schema\n * @param {Object} obj\n * @param {Object} options\n * @param {Boolean} [options.overwrite] defaults to false\n * @param {Boolean|String} [options.strict] defaults to true\n * @param {Query} context passed to setters\n * @return {Boolean} true iff the update is non-empty\n */\n\nmodule.exports = function castUpdate(schema, obj, options, context, filter) {\n  if (obj == null) {\n    return undefined;\n  }\n  options = options || {};\n\n  // Update pipeline\n  if (Array.isArray(obj)) {\n    const len = obj.length;\n    for (let i = 0; i < len; ++i) {\n      const ops = Object.keys(obj[i]);\n      for (const op of ops) {\n        obj[i][op] = castPipelineOperator(op, obj[i][op]);\n      }\n    }\n    return obj;\n  }\n\n  if (options.upsert) {\n    moveImmutableProperties(schema, obj, context);\n  }\n\n  const ops = Object.keys(obj);\n  let i = ops.length;\n  const ret = {};\n  let val;\n  let hasDollarKey = false;\n  const overwrite = options.overwrite;\n\n  filter = filter || {};\n\n  while (i--) {\n    const op = ops[i];\n    // if overwrite is set, don't do any of the special $set stuff\n    if (op[0] !== '$' && !overwrite) {\n      // fix up $set sugar\n      if (!ret.$set) {\n        if (obj.$set) {\n          ret.$set = obj.$set;\n        } else {\n          ret.$set = {};\n        }\n      }\n      ret.$set[op] = obj[op];\n      ops.splice(i, 1);\n      if (!~ops.indexOf('$set')) ops.push('$set');\n    } else if (op === '$set') {\n      if (!ret.$set) {\n        ret[op] = obj[op];\n      }\n    } else {\n      ret[op] = obj[op];\n    }\n  }\n\n  // cast each value\n  i = ops.length;\n\n  while (i--) {\n    const op = ops[i];\n    val = ret[op];\n    hasDollarKey = hasDollarKey || op.startsWith('$');\n\n    if (val &&\n        typeof val === 'object' &&\n        !Buffer.isBuffer(val) &&\n        (!overwrite || hasDollarKey)) {\n      walkUpdatePath(schema, val, op, options, context, filter);\n    } else if (overwrite && ret && typeof ret === 'object') {\n      walkUpdatePath(schema, ret, '$set', options, context, filter);\n    } else {\n      const msg = 'Invalid atomic update value for ' + op + '. '\n          + 'Expected an object, received ' + typeof val;\n      throw new Error(msg);\n    }\n\n    if (op.startsWith('$') && utils.isEmptyObject(val)) {\n      delete ret[op];\n    }\n  }\n\n  if (Object.keys(ret).length === 0 &&\n      options.upsert &&\n      Object.keys(filter).length > 0) {\n    // Trick the driver into allowing empty upserts to work around\n    // https://github.com/mongodb/node-mongodb-native/pull/2490\n    return { $setOnInsert: filter };\n  }\n\n  return ret;\n};\n\n/*!\n * ignore\n */\n\nfunction castPipelineOperator(op, val) {\n  if (op === '$unset') {\n    if (!Array.isArray(val) || val.find(v => typeof v !== 'string')) {\n      throw new MongooseError('Invalid $unset in pipeline, must be ' +\n        'an array of strings');\n    }\n    return val;\n  }\n  if (op === '$project') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid $project in pipeline, must be an object');\n    }\n    return val;\n  }\n  if (op === '$addFields' || op === '$set') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  } else if (op === '$replaceRoot' || op === '$replaceWith') {\n    if (val == null || typeof val !== 'object') {\n      throw new MongooseError('Invalid ' + op + ' in pipeline, must be an object');\n    }\n    return val;\n  }\n\n  throw new MongooseError('Invalid update pipeline operator: \"' + op + '\"');\n}\n\n/*!\n * Walk each path of obj and cast its values\n * according to its schema.\n *\n * @param {Schema} schema\n * @param {Object} obj - part of a query\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {Object} options\n * @param {Boolean|String} [options.strict]\n * @param {Boolean} [options.omitUndefined]\n * @param {Query} context\n * @param {String} pref - path prefix (internal only)\n * @return {Bool} true if this path has keys to update\n * @api private\n */\n\nfunction walkUpdatePath(schema, obj, op, options, context, filter, pref) {\n  const strict = options.strict;\n  const prefix = pref ? pref + '.' : '';\n  const keys = Object.keys(obj);\n  let i = keys.length;\n  let hasKeys = false;\n  let schematype;\n  let key;\n  let val;\n\n  let aggregatedError = null;\n\n  let useNestedStrict;\n  if (options.useNestedStrict === undefined) {\n    useNestedStrict = schema.options.useNestedStrict;\n  } else {\n    useNestedStrict = options.useNestedStrict;\n  }\n\n  while (i--) {\n    key = keys[i];\n    val = obj[key];\n\n    // `$pull` is special because we need to cast the RHS as a query, not as\n    // an update.\n    if (op === '$pull') {\n      schematype = schema._getSchema(prefix + key);\n      if (schematype != null && schematype.schema != null) {\n        obj[key] = cast(schematype.schema, obj[key], options, context);\n        hasKeys = true;\n        continue;\n      }\n    }\n\n    if (val && val.constructor.name === 'Object') {\n      // watch for embedded doc schemas\n      schematype = schema._getSchema(prefix + key);\n\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, prefix + key, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n        }\n      }\n\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      if (schematype && schematype.caster && op in castOps) {\n        // embedded doc schema\n        if ('$each' in val) {\n          hasKeys = true;\n          try {\n            obj[key] = {\n              $each: castUpdateVal(schematype, val.$each, op, key, context, prefix + key)\n            };\n          } catch (error) {\n            aggregatedError = _handleCastError(error, context, key, aggregatedError);\n          }\n\n          if (val.$slice != null) {\n            obj[key].$slice = val.$slice | 0;\n          }\n\n          if (val.$sort) {\n            obj[key].$sort = val.$sort;\n          }\n\n          if (val.$position != null) {\n            obj[key].$position = castNumber(val.$position);\n          }\n        } else {\n          if (schematype != null && schematype.$isSingleNested) {\n            // Special case to make sure `strict` bubbles down correctly to\n            // single nested re: gh-8735\n            let _strict = strict;\n            if (useNestedStrict !== false && schematype.schema.options.hasOwnProperty('strict')) {\n              _strict = schematype.schema.options.strict;\n            } else if (useNestedStrict === false) {\n              _strict = schema.options.strict;\n            }\n            try {\n              obj[key] = schematype.castForQuery(val, context, { strict: _strict });\n            } catch (error) {\n              aggregatedError = _handleCastError(error, context, key, aggregatedError);\n            }\n          } else {\n            try {\n              obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n            } catch (error) {\n              aggregatedError = _handleCastError(error, context, key, aggregatedError);\n            }\n          }\n\n          if (options.omitUndefined && obj[key] === void 0) {\n            delete obj[key];\n            continue;\n          }\n\n          hasKeys = true;\n        }\n      } else if ((op === '$currentDate') || (op in castOps && schematype)) {\n        // $currentDate can take an object\n        try {\n          obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (options.omitUndefined && obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      } else {\n        const pathToCheck = (prefix + key);\n        const v = schema._getPathType(pathToCheck);\n        let _strict = strict;\n        if (useNestedStrict &&\n            v &&\n            v.schema &&\n            'strict' in v.schema.options) {\n          _strict = v.schema.options.strict;\n        }\n\n        if (v.pathType === 'undefined') {\n          if (_strict === 'throw') {\n            throw new StrictModeError(pathToCheck);\n          } else if (_strict) {\n            delete obj[key];\n            continue;\n          }\n        }\n\n        // gh-2314\n        // we should be able to set a schema-less field\n        // to an empty object literal\n        hasKeys |= walkUpdatePath(schema, val, op, options, context, filter, prefix + key) ||\n          (utils.isObject(val) && Object.keys(val).length === 0);\n      }\n    } else {\n      const checkPath = (key === '$each' || key === '$or' || key === '$and' || key === '$in') ?\n        pref : prefix + key;\n      schematype = schema._getSchema(checkPath);\n\n      // You can use `$setOnInsert` with immutable keys\n      if (op !== '$setOnInsert' &&\n          handleImmutable(schematype, strict, obj, key, prefix + key, context)) {\n        continue;\n      }\n\n      let pathDetails = schema._getPathType(checkPath);\n\n      // If no schema type, check for embedded discriminators because the\n      // filter or update may imply an embedded discriminator type. See #8378\n      if (schematype == null) {\n        const _res = getEmbeddedDiscriminatorPath(schema, obj, filter, checkPath, options);\n        if (_res.schematype != null) {\n          schematype = _res.schematype;\n          pathDetails = _res.type;\n        }\n      }\n\n      let isStrict = strict;\n      if (useNestedStrict &&\n          pathDetails &&\n          pathDetails.schema &&\n          'strict' in pathDetails.schema.options) {\n        isStrict = pathDetails.schema.options.strict;\n      }\n\n      const skip = isStrict &&\n        !schematype &&\n        !/real|nested/.test(pathDetails.pathType);\n\n      if (skip) {\n        // Even if strict is `throw`, avoid throwing an error because of\n        // virtuals because of #6731\n        if (isStrict === 'throw' && schema.virtuals[checkPath] == null) {\n          throw new StrictModeError(prefix + key);\n        } else {\n          delete obj[key];\n        }\n      } else {\n        // gh-1845 temporary fix: ignore $rename. See gh-3027 for tracking\n        // improving this.\n        if (op === '$rename') {\n          hasKeys = true;\n          continue;\n        }\n\n        try {\n          if (prefix.length === 0 || key.indexOf('.') === -1) {\n            obj[key] = castUpdateVal(schematype, val, op, key, context, prefix + key);\n          } else {\n            // Setting a nested dotted path that's in the schema. We don't allow paths with '.' in\n            // a schema, so replace the dotted path with a nested object to avoid ending up with\n            // dotted properties in the updated object. See (gh-10200)\n            setDottedPath(obj, key, castUpdateVal(schematype, val, op, key, context, prefix + key));\n            delete obj[key];\n          }\n        } catch (error) {\n          aggregatedError = _handleCastError(error, context, key, aggregatedError);\n        }\n\n        if (Array.isArray(obj[key]) && (op === '$addToSet' || op === '$push') && key !== '$each') {\n          if (schematype && schematype.caster && !schematype.caster.$isMongooseArray) {\n            obj[key] = { $each: obj[key] };\n          }\n        }\n\n        if (options.omitUndefined && obj[key] === void 0) {\n          delete obj[key];\n          continue;\n        }\n\n        hasKeys = true;\n      }\n    }\n  }\n\n  if (aggregatedError != null) {\n    throw aggregatedError;\n  }\n\n  return hasKeys;\n}\n\n/*!\n * ignore\n */\n\nfunction _handleCastError(error, query, key, aggregatedError) {\n  if (typeof query !== 'object' || !query.options.multipleCastError) {\n    throw error;\n  }\n  aggregatedError = aggregatedError || new ValidationError();\n  aggregatedError.addError(key, error);\n  return aggregatedError;\n}\n\n/*!\n * These operators should be cast to numbers instead\n * of their path schema type.\n */\n\nconst numberOps = {\n  $pop: 1,\n  $inc: 1\n};\n\n/*!\n * These ops require no casting because the RHS doesn't do anything.\n */\n\nconst noCastOps = {\n  $unset: 1\n};\n\n/*!\n * These operators require casting docs\n * to real Documents for Update operations.\n */\n\nconst castOps = {\n  $push: 1,\n  $addToSet: 1,\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * ignore\n */\n\nconst overwriteOps = {\n  $set: 1,\n  $setOnInsert: 1\n};\n\n/*!\n * Casts `val` according to `schema` and atomic `op`.\n *\n * @param {SchemaType} schema\n * @param {Object} val\n * @param {String} op - the atomic operator ($pull, $set, etc)\n * @param {String} $conditional\n * @param {Query} context\n * @api private\n */\n\nfunction castUpdateVal(schema, val, op, $conditional, context, path) {\n  if (!schema) {\n    // non-existing schema path\n    if (op in numberOps) {\n      try {\n        return castNumber(val);\n      } catch (err) {\n        throw new CastError('number', val, path);\n      }\n    }\n    return val;\n  }\n\n  const cond = schema.caster && op in castOps &&\n      (utils.isObject(val) || Array.isArray(val));\n  if (cond && !overwriteOps[op]) {\n    // Cast values for ops that add data to MongoDB.\n    // Ensures embedded documents get ObjectIds etc.\n    let schemaArrayDepth = 0;\n    let cur = schema;\n    while (cur.$isMongooseArray) {\n      ++schemaArrayDepth;\n      cur = cur.caster;\n    }\n    let arrayDepth = 0;\n    let _val = val;\n    while (Array.isArray(_val)) {\n      ++arrayDepth;\n      _val = _val[0];\n    }\n\n    const additionalNesting = schemaArrayDepth - arrayDepth;\n    while (arrayDepth < schemaArrayDepth) {\n      val = [val];\n      ++arrayDepth;\n    }\n\n    let tmp = schema.applySetters(Array.isArray(val) ? val : [val], context);\n\n    for (let i = 0; i < additionalNesting; ++i) {\n      tmp = tmp[0];\n    }\n    return tmp;\n  }\n\n  if (op in noCastOps) {\n    return val;\n  }\n  if (op in numberOps) {\n    // Null and undefined not allowed for $pop, $inc\n    if (val == null) {\n      throw new CastError('number', val, schema.path);\n    }\n    if (op === '$inc') {\n      // Support `$inc` with long, int32, etc. (gh-4283)\n      return schema.castForQueryWrapper({\n        val: val,\n        context: context\n      });\n    }\n    try {\n      return castNumber(val);\n    } catch (error) {\n      throw new CastError('number', val, schema.path);\n    }\n  }\n  if (op === '$currentDate') {\n    if (typeof val === 'object') {\n      return { $type: val.$type };\n    }\n    return Boolean(val);\n  }\n\n  if (/^\\$/.test($conditional)) {\n    return schema.castForQueryWrapper({\n      $conditional: $conditional,\n      val: val,\n      context: context\n    });\n  }\n\n  if (overwriteOps[op]) {\n    return schema.castForQueryWrapper({\n      val: val,\n      context: context,\n      $skipQueryCastForUpdate: val != null && schema.$isMongooseArray && schema.$fullPath != null && !schema.$fullPath.match(/\\d+$/),\n      $applySetters: schema[schemaMixedSymbol] != null\n    });\n  }\n\n  return schema.castForQueryWrapper({ val: val, context: context });\n}\n"],"names":["require$$0","MongooseError","strict","castNumber","StrictModeError","ValidationError","CastError"],"mappings":";;;;;;;;;;;;;AAWA,MAAM,iBAAiB,GAAGA,OAA+B,CAAC,iBAAiB,CAAC;AACrB;AAClB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;cACc,GAAG,SAAS,UAAU,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE;AAC5E,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE;AACnB,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AACH,EAAE,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;AAC1B;AACA;AACA,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AAC1B,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AAC3B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;AAClC,MAAM,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AACtC,MAAM,KAAK,MAAM,EAAE,IAAI,GAAG,EAAE;AAC5B,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,OAAO;AACP,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA,EAAE,IAAI,OAAO,CAAC,MAAM,EAAE;AACtB,IAAI,uBAAuB,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAClD,GAAG;AACH;AACA,EAAE,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC/B,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;AACrB,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC;AACjB,EAAE,IAAI,GAAG,CAAC;AACV,EAAE,IAAI,YAAY,GAAG,KAAK,CAAC;AAC3B,EAAE,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;AACtC;AACA,EAAE,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACxB;AACA,EAAE,OAAO,CAAC,EAAE,EAAE;AACd,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACtB;AACA,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE;AACrC;AACA,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;AACrB,QAAQ,IAAI,GAAG,CAAC,IAAI,EAAE;AACtB,UAAU,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;AAC9B,SAAS,MAAM;AACf,UAAU,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC;AACxB,SAAS;AACT,OAAO;AACP,MAAM,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;AAC7B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAClD,KAAK,MAAM,IAAI,EAAE,KAAK,MAAM,EAAE;AAC9B,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE;AACrB,QAAQ,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;AAC1B,OAAO;AACP,KAAK,MAAM;AACX,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;AACxB,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;AACjB;AACA,EAAE,OAAO,CAAC,EAAE,EAAE;AACd,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACtB,IAAI,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;AAClB,IAAI,YAAY,GAAG,YAAY,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AACtD;AACA,IAAI,IAAI,GAAG;AACX,QAAQ,OAAO,GAAG,KAAK,QAAQ;AAC/B,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;AAC7B,SAAS,CAAC,SAAS,IAAI,YAAY,CAAC,EAAE;AACtC,MAAM,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAChE,KAAK,MAAM,IAAI,SAAS,IAAI,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAC5D,MAAM,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACpE,KAAK,MAAM;AACX,MAAM,MAAM,GAAG,GAAG,kCAAkC,GAAG,EAAE,GAAG,IAAI;AAChE,YAAY,+BAA+B,GAAG,OAAO,GAAG,CAAC;AACzD,MAAM,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3B,KAAK;AACL;AACA,IAAI,IAAI,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;AACxD,MAAM,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC;AACrB,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC;AACnC,MAAM,OAAO,CAAC,MAAM;AACpB,MAAM,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AACtC;AACA;AACA,IAAI,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;AACpC,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB,CAAC,EAAE,EAAE,GAAG,EAAE;AACvC,EAAE,IAAI,EAAE,KAAK,QAAQ,EAAE;AACvB,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC,EAAE;AACrE,MAAM,MAAM,IAAIC,aAAa,CAAC,sCAAsC;AACpE,QAAQ,qBAAqB,CAAC,CAAC;AAC/B,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,EAAE,IAAI,EAAE,KAAK,UAAU,EAAE;AACzB,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAChD,MAAM,MAAM,IAAIA,aAAa,CAAC,iDAAiD,CAAC,CAAC;AACjF,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,EAAE,IAAI,EAAE,KAAK,YAAY,IAAI,EAAE,KAAK,MAAM,EAAE;AAC5C,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAChD,MAAM,MAAM,IAAIA,aAAa,CAAC,UAAU,GAAG,EAAE,GAAG,iCAAiC,CAAC,CAAC;AACnF,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG,MAAM,IAAI,EAAE,KAAK,cAAc,IAAI,EAAE,KAAK,cAAc,EAAE;AAC7D,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AAChD,MAAM,MAAM,IAAIA,aAAa,CAAC,UAAU,GAAG,EAAE,GAAG,iCAAiC,CAAC,CAAC;AACnF,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA,EAAE,MAAM,IAAIA,aAAa,CAAC,qCAAqC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;AAC5E,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE;AACzE,EAAE,MAAMC,QAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AAChC,EAAE,MAAM,MAAM,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,EAAE,CAAC;AACxC,EAAE,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;AACtB,EAAE,IAAI,OAAO,GAAG,KAAK,CAAC;AACtB,EAAE,IAAI,UAAU,CAAC;AACjB,EAAE,IAAI,GAAG,CAAC;AACV,EAAE,IAAI,GAAG,CAAC;AACV;AACA,EAAE,IAAI,eAAe,GAAG,IAAI,CAAC;AAC7B;AACA,EAAE,IAAI,eAAe,CAAC;AACtB,EAAE,IAAI,OAAO,CAAC,eAAe,KAAK,SAAS,EAAE;AAC7C,IAAI,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;AACrD,GAAG,MAAM;AACT,IAAI,eAAe,GAAG,OAAO,CAAC,eAAe,CAAC;AAC9C,GAAG;AACH;AACA,EAAE,OAAO,CAAC,EAAE,EAAE;AACd,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AACnB;AACA;AACA;AACA,IAAI,IAAI,EAAE,KAAK,OAAO,EAAE;AACxB,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;AACnD,MAAM,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,MAAM,IAAI,IAAI,EAAE;AAC3D,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AACvE,QAAQ,OAAO,GAAG,IAAI,CAAC;AACvB,QAAQ,SAAS;AACjB,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ,EAAE;AAClD;AACA,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;AACnD;AACA,MAAM,IAAI,UAAU,IAAI,IAAI,EAAE;AAC9B,QAAQ,MAAM,IAAI,GAAG,4BAA4B,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG,GAAG,EAAE,OAAO,CAAC,CAAC;AAC9F,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;AACrC,UAAU,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACvC,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,EAAE,KAAK,cAAc;AAC/B,UAAU,eAAe,CAAC,UAAU,EAAEA,QAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,GAAG,GAAG,EAAE,OAAO,CAAC,EAAE;AAChF,QAAQ,SAAS;AACjB,OAAO;AACP;AACA,MAAM,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,EAAE,IAAI,OAAO,EAAE;AAC5D;AACA,QAAQ,IAAI,OAAO,IAAI,GAAG,EAAE;AAC5B,UAAU,OAAO,GAAG,IAAI,CAAC;AACzB,UAAU,IAAI;AACd,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG;AACvB,cAAc,KAAK,EAAE,aAAa,CAAC,UAAU,EAAE,GAAG,CAAC,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,GAAG,GAAG,CAAC;AACzF,aAAa,CAAC;AACd,WAAW,CAAC,OAAO,KAAK,EAAE;AAC1B,YAAY,eAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;AACrF,WAAW;AACX;AACA,UAAU,IAAI,GAAG,CAAC,MAAM,IAAI,IAAI,EAAE;AAClC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;AAC7C,WAAW;AACX;AACA,UAAU,IAAI,GAAG,CAAC,KAAK,EAAE;AACzB,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;AACvC,WAAW;AACX;AACA,UAAU,IAAI,GAAG,CAAC,SAAS,IAAI,IAAI,EAAE;AACrC,YAAY,GAAG,CAAC,GAAG,CAAC,CAAC,SAAS,GAAGC,MAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AAC3D,WAAW;AACX,SAAS,MAAM;AACf,UAAU,IAAI,UAAU,IAAI,IAAI,IAAI,UAAU,CAAC,eAAe,EAAE;AAChE;AACA;AACA,YAAY,IAAI,OAAO,GAAGD,QAAM,CAAC;AACjC,YAAY,IAAI,eAAe,KAAK,KAAK,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AACjG,cAAc,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;AACzD,aAAa,MAAM,IAAI,eAAe,KAAK,KAAK,EAAE;AAClD,cAAc,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;AAC9C,aAAa;AACb,YAAY,IAAI;AAChB,cAAc,GAAG,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,YAAY,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC;AACpF,aAAa,CAAC,OAAO,KAAK,EAAE;AAC5B,cAAc,eAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;AACvF,aAAa;AACb,WAAW,MAAM;AACjB,YAAY,IAAI;AAChB,cAAc,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;AACxF,aAAa,CAAC,OAAO,KAAK,EAAE;AAC5B,cAAc,eAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;AACvF,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;AAC5D,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,YAAY,SAAS;AACrB,WAAW;AACX;AACA,UAAU,OAAO,GAAG,IAAI,CAAC;AACzB,SAAS;AACT,OAAO,MAAM,IAAI,CAAC,EAAE,KAAK,cAAc,MAAM,EAAE,IAAI,OAAO,IAAI,UAAU,CAAC,EAAE;AAC3E;AACA,QAAQ,IAAI;AACZ,UAAU,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;AACpF,SAAS,CAAC,OAAO,KAAK,EAAE;AACxB,UAAU,eAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;AACnF,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;AAC1D,UAAU,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,UAAU,SAAS;AACnB,SAAS;AACT;AACA,QAAQ,OAAO,GAAG,IAAI,CAAC;AACvB,OAAO,MAAM;AACb,QAAQ,MAAM,WAAW,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC;AAC3C,QAAQ,MAAM,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;AACnD,QAAQ,IAAI,OAAO,GAAGA,QAAM,CAAC;AAC7B,QAAQ,IAAI,eAAe;AAC3B,YAAY,CAAC;AACb,YAAY,CAAC,CAAC,MAAM;AACpB,YAAY,QAAQ,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE;AAC1C,UAAU,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;AAC5C,SAAS;AACT;AACA,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,WAAW,EAAE;AACxC,UAAU,IAAI,OAAO,KAAK,OAAO,EAAE;AACnC,YAAY,MAAM,IAAIE,MAAe,CAAC,WAAW,CAAC,CAAC;AACnD,WAAW,MAAM,IAAI,OAAO,EAAE;AAC9B,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,YAAY,SAAS;AACrB,WAAW;AACX,SAAS;AACT;AACA;AACA;AACA;AACA,QAAQ,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,GAAG,GAAG,CAAC;AAC1F,WAAW,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;AACjE,OAAO;AACP,KAAK,MAAM;AACX,MAAM,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,KAAK;AAC5F,QAAQ,IAAI,GAAG,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AAChD;AACA;AACA,MAAM,IAAI,EAAE,KAAK,cAAc;AAC/B,UAAU,eAAe,CAAC,UAAU,EAAEF,QAAM,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,GAAG,GAAG,EAAE,OAAO,CAAC,EAAE;AAChF,QAAQ,SAAS;AACjB,OAAO;AACP;AACA,MAAM,IAAI,WAAW,GAAG,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACvD;AACA;AACA;AACA,MAAM,IAAI,UAAU,IAAI,IAAI,EAAE;AAC9B,QAAQ,MAAM,IAAI,GAAG,4BAA4B,CAAC,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;AAC3F,QAAQ,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,EAAE;AACrC,UAAU,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AACvC,UAAU,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;AAClC,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,QAAQ,GAAGA,QAAM,CAAC;AAC5B,MAAM,IAAI,eAAe;AACzB,UAAU,WAAW;AACrB,UAAU,WAAW,CAAC,MAAM;AAC5B,UAAU,QAAQ,IAAI,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE;AAClD,QAAQ,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;AACrD,OAAO;AACP;AACA,MAAM,MAAM,IAAI,GAAG,QAAQ;AAC3B,QAAQ,CAAC,UAAU;AACnB,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AAClD;AACA,MAAM,IAAI,IAAI,EAAE;AAChB;AACA;AACA,QAAQ,IAAI,QAAQ,KAAK,OAAO,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,IAAI,EAAE;AACxE,UAAU,MAAM,IAAIE,MAAe,CAAC,MAAM,GAAG,GAAG,CAAC,CAAC;AAClD,SAAS,MAAM;AACf,UAAU,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,SAAS;AACT,OAAO,MAAM;AACb;AACA;AACA,QAAQ,IAAI,EAAE,KAAK,SAAS,EAAE;AAC9B,UAAU,OAAO,GAAG,IAAI,CAAC;AACzB,UAAU,SAAS;AACnB,SAAS;AACT;AACA,QAAQ,IAAI;AACZ,UAAU,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;AAC9D,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;AACtF,WAAW,MAAM;AACjB;AACA;AACA;AACA,YAAY,aAAa,CAAC,GAAG,EAAE,GAAG,EAAE,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC;AACpG,YAAY,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,WAAW;AACX,SAAS,CAAC,OAAO,KAAK,EAAE;AACxB,UAAU,eAAe,GAAG,gBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,eAAe,CAAC,CAAC;AACnF,SAAS;AACT;AACA,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,WAAW,IAAI,EAAE,KAAK,OAAO,CAAC,IAAI,GAAG,KAAK,OAAO,EAAE;AAClG,UAAU,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,EAAE;AACtF,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;AAC3C,WAAW;AACX,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;AAC1D,UAAU,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1B,UAAU,SAAS;AACnB,SAAS;AACT;AACA,QAAQ,OAAO,GAAG,IAAI,CAAC;AACvB,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,eAAe,IAAI,IAAI,EAAE;AAC/B,IAAI,MAAM,eAAe,CAAC;AAC1B,GAAG;AACH;AACA,EAAE,OAAO,OAAO,CAAC;AACjB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,eAAe,EAAE;AAC9D,EAAE,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,iBAAiB,EAAE;AACrE,IAAI,MAAM,KAAK,CAAC;AAChB,GAAG;AACH,EAAE,eAAe,GAAG,eAAe,IAAI,IAAIC,UAAe,EAAE,CAAC;AAC7D,EAAE,eAAe,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACvC,EAAE,OAAO,eAAe,CAAC;AACzB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,GAAG;AAClB,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,IAAI,EAAE,CAAC;AACT,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,MAAM,SAAS,GAAG;AAClB,EAAE,MAAM,EAAE,CAAC;AACX,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,OAAO,GAAG;AAChB,EAAE,KAAK,EAAE,CAAC;AACV,EAAE,SAAS,EAAE,CAAC;AACd,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,YAAY,EAAE,CAAC;AACjB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,MAAM,YAAY,GAAG;AACrB,EAAE,IAAI,EAAE,CAAC;AACT,EAAE,YAAY,EAAE,CAAC;AACjB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,aAAa,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,IAAI,EAAE;AACrE,EAAE,IAAI,CAAC,MAAM,EAAE;AACf;AACA,IAAI,IAAI,EAAE,IAAI,SAAS,EAAE;AACzB,MAAM,IAAI;AACV,QAAQ,OAAOF,MAAU,CAAC,GAAG,CAAC,CAAC;AAC/B,OAAO,CAAC,OAAO,GAAG,EAAE;AACpB,QAAQ,MAAM,IAAIG,MAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACjD,OAAO;AACP,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA,EAAE,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,IAAI,OAAO;AAC7C,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;AAClD,EAAE,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE;AACjC;AACA;AACA,IAAI,IAAI,gBAAgB,GAAG,CAAC,CAAC;AAC7B,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC;AACrB,IAAI,OAAO,GAAG,CAAC,gBAAgB,EAAE;AACjC,MAAM,EAAE,gBAAgB,CAAC;AACzB,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC;AACvB,KAAK;AACL,IAAI,IAAI,UAAU,GAAG,CAAC,CAAC;AACvB,IAAI,IAAI,IAAI,GAAG,GAAG,CAAC;AACnB,IAAI,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAChC,MAAM,EAAE,UAAU,CAAC;AACnB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACrB,KAAK;AACL;AACA,IAAI,MAAM,iBAAiB,GAAG,gBAAgB,GAAG,UAAU,CAAC;AAC5D,IAAI,OAAO,UAAU,GAAG,gBAAgB,EAAE;AAC1C,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;AAClB,MAAM,EAAE,UAAU,CAAC;AACnB,KAAK;AACL;AACA,IAAI,IAAI,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;AAC7E;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,iBAAiB,EAAE,EAAE,CAAC,EAAE;AAChD,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACnB,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA,EAAE,IAAI,EAAE,IAAI,SAAS,EAAE;AACvB,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,EAAE,IAAI,EAAE,IAAI,SAAS,EAAE;AACvB;AACA,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE;AACrB,MAAM,MAAM,IAAIA,MAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,KAAK;AACL,IAAI,IAAI,EAAE,KAAK,MAAM,EAAE;AACvB;AACA,MAAM,OAAO,MAAM,CAAC,mBAAmB,CAAC;AACxC,QAAQ,GAAG,EAAE,GAAG;AAChB,QAAQ,OAAO,EAAE,OAAO;AACxB,OAAO,CAAC,CAAC;AACT,KAAK;AACL,IAAI,IAAI;AACR,MAAM,OAAOH,MAAU,CAAC,GAAG,CAAC,CAAC;AAC7B,KAAK,CAAC,OAAO,KAAK,EAAE;AACpB,MAAM,MAAM,IAAIG,MAAS,CAAC,QAAQ,EAAE,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;AACtD,KAAK;AACL,GAAG;AACH,EAAE,IAAI,EAAE,KAAK,cAAc,EAAE;AAC7B,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACjC,MAAM,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC;AAClC,KAAK;AACL,IAAI,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC;AACxB,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;AAChC,IAAI,OAAO,MAAM,CAAC,mBAAmB,CAAC;AACtC,MAAM,YAAY,EAAE,YAAY;AAChC,MAAM,GAAG,EAAE,GAAG;AACd,MAAM,OAAO,EAAE,OAAO;AACtB,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,IAAI,YAAY,CAAC,EAAE,CAAC,EAAE;AACxB,IAAI,OAAO,MAAM,CAAC,mBAAmB,CAAC;AACtC,MAAM,GAAG,EAAE,GAAG;AACd,MAAM,OAAO,EAAE,OAAO;AACtB,MAAM,uBAAuB,EAAE,GAAG,IAAI,IAAI,IAAI,MAAM,CAAC,gBAAgB,IAAI,MAAM,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC;AACpI,MAAM,aAAa,EAAE,MAAM,CAAC,iBAAiB,CAAC,IAAI,IAAI;AACtD,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,OAAO,MAAM,CAAC,mBAAmB,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;AACpE;;;;"}