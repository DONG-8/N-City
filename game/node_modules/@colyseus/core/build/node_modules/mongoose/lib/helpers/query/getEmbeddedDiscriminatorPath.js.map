{"version":3,"file":"getEmbeddedDiscriminatorPath.js","sources":["../../../../../../../../node_modules/mongoose/lib/helpers/query/getEmbeddedDiscriminatorPath.js"],"sourcesContent":["'use strict';\n\nconst cleanPositionalOperators = require('../schema/cleanPositionalOperators');\nconst get = require('../get');\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\nconst updatedPathsByArrayFilter = require('../update/updatedPathsByArrayFilter');\n\n/*!\n * Like `schema.path()`, except with a document, because impossible to\n * determine path type without knowing the embedded discriminator key.\n */\n\nmodule.exports = function getEmbeddedDiscriminatorPath(schema, update, filter, path, options) {\n  const parts = path.split('.');\n  let schematype = null;\n  let type = 'adhocOrUndefined';\n\n  filter = filter || {};\n  update = update || {};\n  const arrayFilters = options != null && Array.isArray(options.arrayFilters) ?\n    options.arrayFilters : [];\n  const updatedPathsByFilter = updatedPathsByArrayFilter(update);\n\n  for (let i = 0; i < parts.length; ++i) {\n    const subpath = cleanPositionalOperators(parts.slice(0, i + 1).join('.'));\n    schematype = schema.path(subpath);\n    if (schematype == null) {\n      continue;\n    }\n\n    type = schema.pathType(subpath);\n    if ((schematype.$isSingleNested || schematype.$isMongooseDocumentArrayElement) &&\n        schematype.schema.discriminators != null) {\n      const key = get(schematype, 'schema.options.discriminatorKey');\n      const discriminatorValuePath = subpath + '.' + key;\n      const discriminatorFilterPath =\n        discriminatorValuePath.replace(/\\.\\d+\\./, '.');\n      let discriminatorKey = null;\n\n      if (discriminatorValuePath in filter) {\n        discriminatorKey = filter[discriminatorValuePath];\n      }\n      if (discriminatorFilterPath in filter) {\n        discriminatorKey = filter[discriminatorFilterPath];\n      }\n\n      const wrapperPath = subpath.replace(/\\.\\d+$/, '');\n      if (schematype.$isMongooseDocumentArrayElement &&\n          get(filter[wrapperPath], '$elemMatch.' + key) != null) {\n        discriminatorKey = filter[wrapperPath].$elemMatch[key];\n      }\n\n      if (discriminatorValuePath in update) {\n        discriminatorKey = update[discriminatorValuePath];\n      }\n\n      for (const filterKey of Object.keys(updatedPathsByFilter)) {\n        const schemaKey = updatedPathsByFilter[filterKey] + '.' + key;\n        const arrayFilterKey = filterKey + '.' + key;\n        if (schemaKey === discriminatorFilterPath) {\n          const filter = arrayFilters.find(filter => filter.hasOwnProperty(arrayFilterKey));\n          if (filter != null) {\n            discriminatorKey = filter[arrayFilterKey];\n          }\n        }\n      }\n\n      if (discriminatorKey == null) {\n        continue;\n      }\n\n      const discriminatorSchema = getDiscriminatorByValue(schematype.caster.discriminators, discriminatorKey).schema;\n\n      const rest = parts.slice(i + 1).join('.');\n      schematype = discriminatorSchema.path(rest);\n      if (schematype != null) {\n        type = discriminatorSchema._getPathType(rest);\n        break;\n      }\n    }\n  }\n\n  return { type: type, schematype: schematype };\n};\n"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;gCACc,GAAG,SAAS,4BAA4B,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE;AAC9F,EAAE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC,EAAE,IAAI,UAAU,GAAG,IAAI,CAAC;AACxB,EAAE,IAAI,IAAI,GAAG,kBAAkB,CAAC;AAChC;AACA,EAAE,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACxB,EAAE,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;AACxB,EAAE,MAAM,YAAY,GAAG,OAAO,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC;AAC7E,IAAI,OAAO,CAAC,YAAY,GAAG,EAAE,CAAC;AAC9B,EAAE,MAAM,oBAAoB,GAAG,yBAAyB,CAAC,MAAM,CAAC,CAAC;AACjE;AACA,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACzC,IAAI,MAAM,OAAO,GAAG,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9E,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AACtC,IAAI,IAAI,UAAU,IAAI,IAAI,EAAE;AAC5B,MAAM,SAAS;AACf,KAAK;AACL;AACA,IAAI,IAAI,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;AACpC,IAAI,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,UAAU,CAAC,+BAA+B;AACjF,QAAQ,UAAU,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI,EAAE;AAClD,MAAM,MAAM,GAAG,GAAG,GAAG,CAAC,UAAU,EAAE,iCAAiC,CAAC,CAAC;AACrE,MAAM,MAAM,sBAAsB,GAAG,OAAO,GAAG,GAAG,GAAG,GAAG,CAAC;AACzD,MAAM,MAAM,uBAAuB;AACnC,QAAQ,sBAAsB,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACvD,MAAM,IAAI,gBAAgB,GAAG,IAAI,CAAC;AAClC;AACA,MAAM,IAAI,sBAAsB,IAAI,MAAM,EAAE;AAC5C,QAAQ,gBAAgB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAC1D,OAAO;AACP,MAAM,IAAI,uBAAuB,IAAI,MAAM,EAAE;AAC7C,QAAQ,gBAAgB,GAAG,MAAM,CAAC,uBAAuB,CAAC,CAAC;AAC3D,OAAO;AACP;AACA,MAAM,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;AACxD,MAAM,IAAI,UAAU,CAAC,+BAA+B;AACpD,UAAU,GAAG,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,aAAa,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE;AACjE,QAAQ,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC/D,OAAO;AACP;AACA,MAAM,IAAI,sBAAsB,IAAI,MAAM,EAAE;AAC5C,QAAQ,gBAAgB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAC1D,OAAO;AACP;AACA,MAAM,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,EAAE;AACjE,QAAQ,MAAM,SAAS,GAAG,oBAAoB,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACtE,QAAQ,MAAM,cAAc,GAAG,SAAS,GAAG,GAAG,GAAG,GAAG,CAAC;AACrD,QAAQ,IAAI,SAAS,KAAK,uBAAuB,EAAE;AACnD,UAAU,MAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC,CAAC;AAC5F,UAAU,IAAI,MAAM,IAAI,IAAI,EAAE;AAC9B,YAAY,gBAAgB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;AACtD,WAAW;AACX,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,gBAAgB,IAAI,IAAI,EAAE;AACpC,QAAQ,SAAS;AACjB,OAAO;AACP;AACA,MAAM,MAAM,mBAAmB,GAAG,uBAAuB,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,EAAE,gBAAgB,CAAC,CAAC,MAAM,CAAC;AACrH;AACA,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAChD,MAAM,UAAU,GAAG,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClD,MAAM,IAAI,UAAU,IAAI,IAAI,EAAE;AAC9B,QAAQ,IAAI,GAAG,mBAAmB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AACtD,QAAQ,MAAM;AACd,OAAO;AACP,KAAK;AACL,GAAG;AACH;AACA,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;AAChD;;;;"}