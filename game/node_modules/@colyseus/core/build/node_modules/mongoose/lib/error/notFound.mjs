import error from './index.mjs';
import util from 'util';

/*!
 * Module dependencies.
 */




class DocumentNotFoundError extends error {
  /*!
   * OverwriteModel Error constructor.
   */
  constructor(filter, model, numAffected, result) {
    let msg;
    const messages = error.messages;
    if (messages.DocumentNotFoundError != null) {
      msg = typeof messages.DocumentNotFoundError === 'function' ?
        messages.DocumentNotFoundError(filter, model) :
        messages.DocumentNotFoundError;
    } else {
      msg = 'No document found for query "' + util.inspect(filter) +
        '" on model "' + model + '"';
    }

    super(msg);

    this.result = result;
    this.numAffected = numAffected;
    this.filter = filter;
    // Backwards compat
    this.query = filter;
  }
}

Object.defineProperty(DocumentNotFoundError.prototype, 'name', {
  value: 'DocumentNotFoundError'
});

/*!
 * exports
 */

var notFound = DocumentNotFoundError;

export default notFound;
//# sourceMappingURL=notFound.mjs.map
