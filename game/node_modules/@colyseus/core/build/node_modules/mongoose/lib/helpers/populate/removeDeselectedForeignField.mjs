import get from '../get.mjs';
import mpath from '../../../../mpath/index.mjs';
import parseProjection from '../projection/parseProjection.mjs';

/*!
 * ignore
 */

var removeDeselectedForeignField = function removeDeselectedForeignField(foreignFields, options, docs) {
  const projection = parseProjection(get(options, 'select', null), true) ||
    parseProjection(get(options, 'options.select', null), true);

  if (projection == null) {
    return;
  }
  for (const foreignField of foreignFields) {
    if (!projection.hasOwnProperty('-' + foreignField)) {
      continue;
    }

    for (const val of docs) {
      if (val.$__ != null) {
        mpath.unset(foreignField, val._doc);
      } else {
        mpath.unset(foreignField, val);
      }
    }
  }
};

export default removeDeselectedForeignField;
//# sourceMappingURL=removeDeselectedForeignField.mjs.map
