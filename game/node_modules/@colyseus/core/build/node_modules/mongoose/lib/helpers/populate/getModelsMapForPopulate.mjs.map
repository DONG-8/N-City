{"version":3,"file":"getModelsMapForPopulate.mjs","sources":["../../../../../../../../node_modules/mongoose/lib/helpers/populate/getModelsMapForPopulate.js"],"sourcesContent":["'use strict';\n\nconst MongooseError = require('../../error/index');\nconst SkipPopulateValue = require('./SkipPopulateValue');\nconst get = require('../get');\nconst getDiscriminatorByValue = require('../discriminator/getDiscriminatorByValue');\nconst isPathExcluded = require('../projection/isPathExcluded');\nconst getSchemaTypes = require('./getSchemaTypes');\nconst getVirtual = require('./getVirtual');\nconst lookupLocalFields = require('./lookupLocalFields');\nconst mpath = require('mpath');\nconst normalizeRefPath = require('./normalizeRefPath');\nconst util = require('util');\nconst utils = require('../../utils');\n\nconst modelSymbol = require('../symbols').modelSymbol;\nconst populateModelSymbol = require('../symbols').populateModelSymbol;\nconst schemaMixedSymbol = require('../../schema/symbols').schemaMixedSymbol;\n\nmodule.exports = function getModelsMapForPopulate(model, docs, options) {\n  let i;\n  let doc;\n  const len = docs.length;\n  const available = {};\n  const map = [];\n  const modelNameFromQuery = options.model && options.model.modelName || options.model;\n  let schema;\n  let refPath;\n  let Model;\n  let currentOptions;\n  let modelNames;\n  let modelName;\n\n  const originalModel = options.model;\n  let isVirtual = false;\n  const modelSchema = model.schema;\n\n  let allSchemaTypes = getSchemaTypes(modelSchema, null, options.path);\n  allSchemaTypes = Array.isArray(allSchemaTypes) ? allSchemaTypes : [allSchemaTypes].filter(v => v != null);\n  const _firstWithRefPath = allSchemaTypes.find(schematype => get(schematype, 'options.refPath', null) != null);\n\n  for (i = 0; i < len; i++) {\n    doc = docs[i];\n    let justOne = null;\n    schema = getSchemaTypes(modelSchema, doc, options.path);\n    // Special case: populating a path that's a DocumentArray unless\n    // there's an explicit `ref` or `refPath` re: gh-8946\n    if (schema != null &&\n        schema.$isMongooseDocumentArray &&\n        schema.options.ref == null &&\n        schema.options.refPath == null) {\n      continue;\n    }\n    // Populating a nested path should always be a no-op re: #9073.\n    // People shouldn't do this, but apparently they do.\n    if (options._localModel != null && options._localModel.schema.nested[options.path]) {\n      continue;\n    }\n    const isUnderneathDocArray = schema && schema.$isUnderneathDocArray;\n    if (isUnderneathDocArray && get(options, 'options.sort') != null) {\n      return new MongooseError('Cannot populate with `sort` on path ' + options.path +\n        ' because it is a subproperty of a document array');\n    }\n\n    modelNames = null;\n    let isRefPath = !!_firstWithRefPath;\n    let normalizedRefPath = _firstWithRefPath ? get(_firstWithRefPath, 'options.refPath', null) : null;\n    let schemaOptions = null;\n\n    if (Array.isArray(schema)) {\n      const schemasArray = schema;\n      for (const _schema of schemasArray) {\n        let _modelNames;\n        let res;\n        try {\n          res = _getModelNames(doc, _schema);\n          _modelNames = res.modelNames;\n          isRefPath = isRefPath || res.isRefPath;\n          normalizedRefPath = normalizeRefPath(normalizedRefPath, doc, options.path) ||\n            res.refPath;\n          justOne = res.justOne;\n        } catch (error) {\n          return error;\n        }\n\n        if (isRefPath && !res.isRefPath) {\n          continue;\n        }\n        if (!_modelNames) {\n          continue;\n        }\n        modelNames = modelNames || [];\n        for (const modelName of _modelNames) {\n          if (modelNames.indexOf(modelName) === -1) {\n            modelNames.push(modelName);\n          }\n        }\n      }\n    } else {\n      try {\n        const res = _getModelNames(doc, schema);\n        modelNames = res.modelNames;\n        isRefPath = res.isRefPath;\n        normalizedRefPath = res.refPath;\n        justOne = res.justOne;\n        schemaOptions = get(schema, 'options.populate', null);\n      } catch (error) {\n        return error;\n      }\n\n      if (!modelNames) {\n        continue;\n      }\n    }\n\n    const _virtualRes = getVirtual(model.schema, options.path);\n    const virtual = _virtualRes == null ? null : _virtualRes.virtual;\n\n    let localField;\n    let count = false;\n    if (virtual && virtual.options) {\n      const virtualPrefix = _virtualRes.nestedSchemaPath ?\n        _virtualRes.nestedSchemaPath + '.' : '';\n      if (typeof virtual.options.localField === 'function') {\n        localField = virtualPrefix + virtual.options.localField.call(doc, doc);\n      } else if (Array.isArray(virtual.options.localField)) {\n        localField = virtual.options.localField.map(field => virtualPrefix + field);\n      } else {\n        localField = virtualPrefix + virtual.options.localField;\n      }\n      count = virtual.options.count;\n\n      if (virtual.options.skip != null && !options.hasOwnProperty('skip')) {\n        options.skip = virtual.options.skip;\n      }\n      if (virtual.options.limit != null && !options.hasOwnProperty('limit')) {\n        options.limit = virtual.options.limit;\n      }\n      if (virtual.options.perDocumentLimit != null && !options.hasOwnProperty('perDocumentLimit')) {\n        options.perDocumentLimit = virtual.options.perDocumentLimit;\n      }\n    } else {\n      localField = options.path;\n    }\n    let foreignField = virtual && virtual.options ?\n      virtual.options.foreignField :\n      '_id';\n\n    // `justOne = null` means we don't know from the schema whether the end\n    // result should be an array or a single doc. This can result from\n    // populating a POJO using `Model.populate()`\n    if ('justOne' in options && options.justOne !== void 0) {\n      justOne = options.justOne;\n    } else if (virtual && virtual.options && virtual.options.refPath) {\n      const normalizedRefPath =\n        normalizeRefPath(virtual.options.refPath, doc, options.path);\n      justOne = !!virtual.options.justOne;\n      isVirtual = true;\n      const refValue = utils.getValue(normalizedRefPath, doc);\n      modelNames = Array.isArray(refValue) ? refValue : [refValue];\n    } else if (virtual && virtual.options && virtual.options.ref) {\n      let normalizedRef;\n      if (typeof virtual.options.ref === 'function') {\n        normalizedRef = virtual.options.ref.call(doc, doc);\n      } else {\n        normalizedRef = virtual.options.ref;\n      }\n      justOne = !!virtual.options.justOne;\n      isVirtual = true;\n      if (!modelNames) {\n        modelNames = [].concat(normalizedRef);\n      }\n    } else if (schema && !schema[schemaMixedSymbol]) {\n      // Skip Mixed types because we explicitly don't do casting on those.\n      if (options.path.endsWith('.' + schema.path)) {\n        justOne = Array.isArray(schema) ?\n          schema.every(schema => !schema.$isMongooseArray) :\n          !schema.$isMongooseArray;\n      }\n    }\n\n    if (!modelNames) {\n      continue;\n    }\n\n    if (virtual && (!localField || !foreignField)) {\n      return new MongooseError('If you are populating a virtual, you must set the ' +\n        'localField and foreignField options');\n    }\n\n    options.isVirtual = isVirtual;\n    options.virtual = virtual;\n    if (typeof localField === 'function') {\n      localField = localField.call(doc, doc);\n    }\n    if (typeof foreignField === 'function') {\n      foreignField = foreignField.call(doc);\n    }\n\n    let match = get(options, 'match', null) ||\n      get(currentOptions, 'match', null) ||\n      get(options, 'virtual.options.match', null) ||\n      get(options, 'virtual.options.options.match', null);\n\n    let hasMatchFunction = typeof match === 'function';\n    if (hasMatchFunction) {\n      match = match.call(doc, doc);\n    }\n\n    if (Array.isArray(localField) && Array.isArray(foreignField) && localField.length === foreignField.length) {\n      match = Object.assign({}, match);\n      for (let i = 1; i < localField.length; ++i) {\n        match[foreignField[i]] = convertTo_id(mpath.get(localField[i], doc, lookupLocalFields), schema);\n        hasMatchFunction = true;\n      }\n\n      localField = localField[0];\n      foreignField = foreignField[0];\n    }\n\n    const localFieldPathType = modelSchema._getPathType(localField);\n    const localFieldPath = localFieldPathType === 'real' ? modelSchema.path(localField) : localFieldPathType.schema;\n    const localFieldGetters = localFieldPath && localFieldPath.getters ? localFieldPath.getters : [];\n    let ret;\n\n    const _populateOptions = get(options, 'options', {});\n\n    const getters = 'getters' in _populateOptions ?\n      _populateOptions.getters :\n      options.isVirtual && get(virtual, 'options.getters', false);\n    if (localFieldGetters.length > 0 && getters) {\n      const hydratedDoc = (doc.$__ != null) ? doc : model.hydrate(doc);\n      const localFieldValue = mpath.get(localField, doc, lookupLocalFields);\n      if (Array.isArray(localFieldValue)) {\n        const localFieldHydratedValue = mpath.get(localField.split('.').slice(0, -1), hydratedDoc, lookupLocalFields);\n        ret = localFieldValue.map((localFieldArrVal, localFieldArrIndex) =>\n          localFieldPath.applyGetters(localFieldArrVal, localFieldHydratedValue[localFieldArrIndex]));\n      } else {\n        ret = localFieldPath.applyGetters(localFieldValue, hydratedDoc);\n      }\n    } else {\n      ret = convertTo_id(mpath.get(localField, doc, lookupLocalFields), schema);\n    }\n\n    const id = String(utils.getValue(foreignField, doc));\n    options._docs[id] = Array.isArray(ret) ? ret.slice() : ret;\n\n    // Re: gh-8452. Embedded discriminators may not have `refPath`, so clear\n    // out embedded discriminator docs that don't have a `refPath` on the\n    // populated path.\n    if (isRefPath && normalizedRefPath != null) {\n      const pieces = normalizedRefPath.split('.');\n      let cur = '';\n      for (let j = 0; j < pieces.length; ++j) {\n        const piece = pieces[j];\n        cur = cur + (cur.length === 0 ? '' : '.') + piece;\n        const schematype = modelSchema.path(cur);\n        if (schematype != null &&\n            schematype.$isMongooseArray &&\n            schematype.caster.discriminators != null &&\n            Object.keys(schematype.caster.discriminators).length > 0) {\n          const subdocs = utils.getValue(cur, doc);\n          const remnant = options.path.substr(cur.length + 1);\n          const discriminatorKey = schematype.caster.schema.options.discriminatorKey;\n          modelNames = [];\n          for (const subdoc of subdocs) {\n            const discriminatorName = utils.getValue(discriminatorKey, subdoc);\n            const discriminator = schematype.caster.discriminators[discriminatorName];\n            const discriminatorSchema = discriminator && discriminator.schema;\n            if (discriminatorSchema == null) {\n              continue;\n            }\n            const _path = discriminatorSchema.path(remnant);\n            if (_path == null || _path.options.refPath == null) {\n              const docValue = utils.getValue(localField.substr(cur.length + 1), subdoc);\n              ret = ret.map(v => v === docValue ? SkipPopulateValue(v) : v);\n              continue;\n            }\n            const modelName = utils.getValue(pieces.slice(j + 1).join('.'), subdoc);\n            modelNames.push(modelName);\n          }\n        }\n      }\n    }\n\n    let k = modelNames.length;\n    while (k--) {\n      modelName = modelNames[k];\n      if (modelName == null) {\n        continue;\n      }\n\n      // `PopulateOptions#connection`: if the model is passed as a string, the\n      // connection matters because different connections have different models.\n      const connection = options.connection != null ? options.connection : model.db;\n\n      try {\n        Model = originalModel && originalModel[modelSymbol] ?\n          originalModel :\n          modelName[modelSymbol] ? modelName : connection.model(modelName);\n      } catch (error) {\n        // If `ret` is undefined, we'll add an empty entry to modelsMap. We shouldn't\n        // execute a query, but it is necessary to make sure `justOne` gets handled\n        // correctly for setting an empty array (see gh-8455)\n        if (ret !== undefined) {\n          return error;\n        }\n      }\n\n      let ids = ret;\n      const flat = Array.isArray(ret) ? utils.array.flatten(ret) : [];\n\n      if (isRefPath && Array.isArray(ret) && flat.length === modelNames.length) {\n        ids = flat.filter((val, i) => modelNames[i] === modelName);\n      }\n\n      if (!available[modelName] || currentOptions.perDocumentLimit != null || get(currentOptions, 'options.perDocumentLimit') != null) {\n        currentOptions = {\n          model: Model\n        };\n\n        if (isVirtual && get(virtual, 'options.options')) {\n          currentOptions.options = utils.clone(virtual.options.options);\n        } else if (schemaOptions != null) {\n          currentOptions.options = Object.assign({}, schemaOptions);\n        }\n        utils.merge(currentOptions, options);\n\n        // Used internally for checking what model was used to populate this\n        // path.\n        options[populateModelSymbol] = Model;\n\n        available[modelName] = {\n          model: Model,\n          options: currentOptions,\n          match: hasMatchFunction ? [match] : match,\n          docs: [doc],\n          ids: [ids],\n          allIds: [ret],\n          localField: new Set([localField]),\n          foreignField: new Set([foreignField]),\n          justOne: justOne,\n          isVirtual: isVirtual,\n          virtual: virtual,\n          count: count,\n          [populateModelSymbol]: Model\n        };\n        map.push(available[modelName]);\n      } else {\n        available[modelName].localField.add(localField);\n        available[modelName].foreignField.add(foreignField);\n        available[modelName].docs.push(doc);\n        available[modelName].ids.push(ids);\n        available[modelName].allIds.push(ret);\n        if (hasMatchFunction) {\n          available[modelName].match.push(match);\n        }\n      }\n    }\n  }\n  return map;\n\n  function _getModelNames(doc, schema) {\n    let modelNames;\n    let discriminatorKey;\n    let isRefPath = false;\n    let justOne = null;\n\n    if (schema && schema.caster) {\n      schema = schema.caster;\n    }\n    if (schema && schema.$isSchemaMap) {\n      schema = schema.$__schemaType;\n    }\n\n    if (!schema && model.discriminators) {\n      discriminatorKey = model.schema.discriminatorMapping.key;\n    }\n\n    refPath = schema && schema.options && schema.options.refPath;\n\n    const normalizedRefPath = normalizeRefPath(refPath, doc, options.path);\n\n    if (modelNameFromQuery) {\n      modelNames = [modelNameFromQuery]; // query options\n    } else if (normalizedRefPath) {\n      if (options._queryProjection != null && isPathExcluded(options._queryProjection, normalizedRefPath)) {\n        throw new MongooseError('refPath `' + normalizedRefPath +\n          '` must not be excluded in projection, got ' +\n          util.inspect(options._queryProjection));\n      }\n\n      if (modelSchema.virtuals.hasOwnProperty(normalizedRefPath) && doc.$__ == null) {\n        modelNames = [modelSchema.virtuals[normalizedRefPath].applyGetters(void 0, doc)];\n      } else {\n        modelNames = utils.getValue(normalizedRefPath, doc);\n      }\n\n      if (Array.isArray(modelNames)) {\n        modelNames = utils.array.flatten(modelNames);\n      }\n\n      isRefPath = true;\n    } else {\n      let modelForCurrentDoc = model;\n      let schemaForCurrentDoc;\n      let discriminatorValue;\n\n      if (!schema && discriminatorKey && (discriminatorValue = utils.getValue(discriminatorKey, doc))) {\n        // `modelNameForFind` is the discriminator value, so we might need\n        // find the discriminated model name\n        const discriminatorModel = getDiscriminatorByValue(model.discriminators, discriminatorValue) || model;\n        if (discriminatorModel != null) {\n          modelForCurrentDoc = discriminatorModel;\n        } else {\n          try {\n            modelForCurrentDoc = model.db.model(discriminatorValue);\n          } catch (error) {\n            return error;\n          }\n        }\n\n        schemaForCurrentDoc = modelForCurrentDoc.schema._getSchema(options.path);\n\n        if (schemaForCurrentDoc && schemaForCurrentDoc.caster) {\n          schemaForCurrentDoc = schemaForCurrentDoc.caster;\n        }\n      } else {\n        schemaForCurrentDoc = schema;\n      }\n      const _virtualRes = getVirtual(modelForCurrentDoc.schema, options.path);\n      const virtual = _virtualRes == null ? null : _virtualRes.virtual;\n\n      if (schemaForCurrentDoc != null) {\n        justOne = !schemaForCurrentDoc.$isMongooseArray && !schemaForCurrentDoc._arrayPath;\n      }\n\n      let ref;\n      let refPath;\n\n      if ((ref = get(schemaForCurrentDoc, 'options.ref')) != null) {\n        ref = handleRefFunction(ref, doc);\n        modelNames = [ref];\n      } else if ((ref = get(virtual, 'options.ref')) != null) {\n        ref = handleRefFunction(ref, doc);\n\n        // When referencing nested arrays, the ref should be an Array\n        // of modelNames.\n        if (Array.isArray(ref)) {\n          modelNames = ref;\n        } else {\n          modelNames = [ref];\n        }\n\n        isVirtual = true;\n      } else if ((refPath = get(schemaForCurrentDoc, 'options.refPath')) != null) {\n        isRefPath = true;\n        refPath = normalizeRefPath(refPath, doc, options.path);\n        modelNames = utils.getValue(refPath, doc);\n        if (Array.isArray(modelNames)) {\n          modelNames = utils.array.flatten(modelNames);\n        }\n      } else {\n        // We may have a discriminator, in which case we don't want to\n        // populate using the base model by default\n        modelNames = discriminatorKey ? null : [model.modelName];\n      }\n    }\n\n    if (!modelNames) {\n      return { modelNames: modelNames, isRefPath: isRefPath, refPath: normalizedRefPath, justOne: justOne };\n    }\n\n    if (!Array.isArray(modelNames)) {\n      modelNames = [modelNames];\n    }\n\n    return { modelNames: modelNames, isRefPath: isRefPath, refPath: normalizedRefPath, justOne: justOne };\n  }\n};\n\n/*!\n * ignore\n */\n\nfunction handleRefFunction(ref, doc) {\n  if (typeof ref === 'function' && !ref[modelSymbol]) {\n    return ref.call(doc, doc);\n  }\n  return ref;\n}\n\n/*!\n * Retrieve the _id of `val` if a Document or Array of Documents.\n *\n * @param {Array|Document|Any} val\n * @return {Array|Document|Any}\n */\n\nfunction convertTo_id(val, schema) {\n  if (val != null && val.$__ != null) {\n    return val._id;\n  }\n  if (val != null && val._id != null && (schema == null || !schema.$isSchemaMap)) {\n    return val._id;\n  }\n\n  if (Array.isArray(val)) {\n    for (let i = 0; i < val.length; ++i) {\n      if (val[i] != null && val[i].$__ != null) {\n        val[i] = val[i]._id;\n      }\n    }\n    if (val.isMongooseArray && val.$schema()) {\n      return val.$schema()._castForPopulate(val, val.$parent());\n    }\n\n    return [].concat(val);\n  }\n\n  // `populate('map')` may be an object if populating on a doc that hasn't\n  // been hydrated yet\n  if (val != null &&\n      val.constructor.name === 'Object' &&\n      // The intent here is we should only flatten the object if we expect\n      // to get a Map in the end. Avoid doing this for mixed types.\n      (schema == null || schema[schemaMixedSymbol] == null)) {\n    const ret = [];\n    for (const key of Object.keys(val)) {\n      ret.push(val[key]);\n    }\n    return ret;\n  }\n  // If doc has already been hydrated, e.g. `doc.populate('map').execPopulate()`\n  // then `val` will already be a map\n  if (val instanceof Map) {\n    return Array.from(val.values());\n  }\n\n  return val;\n}"],"names":["require$$0","require$$1","MongooseError","getVirtual"],"mappings":";;;;;;;;;;;;;;;AAeA,MAAM,WAAW,GAAGA,OAAqB,CAAC,WAAW,CAAC;AACtD,MAAM,mBAAmB,GAAGA,OAAqB,CAAC,mBAAmB,CAAC;AACtE,MAAM,iBAAiB,GAAGC,SAA+B,CAAC,iBAAiB,CAAC;AAC5E;2BACc,GAAG,SAAS,uBAAuB,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;AACxE,EAAE,IAAI,CAAC,CAAC;AACR,EAAE,IAAI,GAAG,CAAC;AACV,EAAE,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;AAC1B,EAAE,MAAM,SAAS,GAAG,EAAE,CAAC;AACvB,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC;AACjB,EAAE,MAAM,kBAAkB,GAAG,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,SAAS,IAAI,OAAO,CAAC,KAAK,CAAC;AACvF,EAAE,IAAI,MAAM,CAAC;AACb,EAAE,IAAI,OAAO,CAAC;AACd,EAAE,IAAI,KAAK,CAAC;AACZ,EAAE,IAAI,cAAc,CAAC;AACrB,EAAE,IAAI,UAAU,CAAC;AACjB,EAAE,IAAI,SAAS,CAAC;AAChB;AACA,EAAE,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;AACtC,EAAE,IAAI,SAAS,GAAG,KAAK,CAAC;AACxB,EAAE,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;AACnC;AACA,EAAE,IAAI,cAAc,GAAG,cAAc,CAAC,WAAW,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AACvE,EAAE,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,cAAc,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;AAC5G,EAAE,MAAM,iBAAiB,GAAG,cAAc,CAAC,IAAI,CAAC,UAAU,IAAI,GAAG,CAAC,UAAU,EAAE,iBAAiB,EAAE,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;AAChH;AACA,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;AAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC;AACvB,IAAI,MAAM,GAAG,cAAc,CAAC,WAAW,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5D;AACA;AACA,IAAI,IAAI,MAAM,IAAI,IAAI;AACtB,QAAQ,MAAM,CAAC,wBAAwB;AACvC,QAAQ,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI;AAClC,QAAQ,MAAM,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;AACxC,MAAM,SAAS;AACf,KAAK;AACL;AACA;AACA,IAAI,IAAI,OAAO,CAAC,WAAW,IAAI,IAAI,IAAI,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AACxF,MAAM,SAAS;AACf,KAAK;AACL,IAAI,MAAM,oBAAoB,GAAG,MAAM,IAAI,MAAM,CAAC,qBAAqB,CAAC;AACxE,IAAI,IAAI,oBAAoB,IAAI,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,IAAI,IAAI,EAAE;AACtE,MAAM,OAAO,IAAIC,KAAa,CAAC,sCAAsC,GAAG,OAAO,CAAC,IAAI;AACpF,QAAQ,kDAAkD,CAAC,CAAC;AAC5D,KAAK;AACL;AACA,IAAI,UAAU,GAAG,IAAI,CAAC;AACtB,IAAI,IAAI,SAAS,GAAG,CAAC,CAAC,iBAAiB,CAAC;AACxC,IAAI,IAAI,iBAAiB,GAAG,iBAAiB,GAAG,GAAG,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;AACvG,IAAI,IAAI,aAAa,GAAG,IAAI,CAAC;AAC7B;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;AAC/B,MAAM,MAAM,YAAY,GAAG,MAAM,CAAC;AAClC,MAAM,KAAK,MAAM,OAAO,IAAI,YAAY,EAAE;AAC1C,QAAQ,IAAI,WAAW,CAAC;AACxB,QAAQ,IAAI,GAAG,CAAC;AAChB,QAAQ,IAAI;AACZ,UAAU,GAAG,GAAG,cAAc,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,UAAU,WAAW,GAAG,GAAG,CAAC,UAAU,CAAC;AACvC,UAAU,SAAS,GAAG,SAAS,IAAI,GAAG,CAAC,SAAS,CAAC;AACjD,UAAU,iBAAiB,GAAG,gBAAgB,CAAC,iBAAiB,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC;AACpF,YAAY,GAAG,CAAC,OAAO,CAAC;AACxB,UAAU,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;AAChC,SAAS,CAAC,OAAO,KAAK,EAAE;AACxB,UAAU,OAAO,KAAK,CAAC;AACvB,SAAS;AACT;AACA,QAAQ,IAAI,SAAS,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE;AACzC,UAAU,SAAS;AACnB,SAAS;AACT,QAAQ,IAAI,CAAC,WAAW,EAAE;AAC1B,UAAU,SAAS;AACnB,SAAS;AACT,QAAQ,UAAU,GAAG,UAAU,IAAI,EAAE,CAAC;AACtC,QAAQ,KAAK,MAAM,SAAS,IAAI,WAAW,EAAE;AAC7C,UAAU,IAAI,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE;AACpD,YAAY,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvC,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK,MAAM;AACX,MAAM,IAAI;AACV,QAAQ,MAAM,GAAG,GAAG,cAAc,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;AAChD,QAAQ,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;AACpC,QAAQ,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC;AAClC,QAAQ,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC;AACxC,QAAQ,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;AAC9B,QAAQ,aAAa,GAAG,GAAG,CAAC,MAAM,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAAC;AAC9D,OAAO,CAAC,OAAO,KAAK,EAAE;AACtB,QAAQ,OAAO,KAAK,CAAC;AACrB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,UAAU,EAAE;AACvB,QAAQ,SAAS;AACjB,OAAO;AACP,KAAK;AACL;AACA,IAAI,MAAM,WAAW,GAAGC,YAAU,CAAC,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/D,IAAI,MAAM,OAAO,GAAG,WAAW,IAAI,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC;AACrE;AACA,IAAI,IAAI,UAAU,CAAC;AACnB,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC;AACtB,IAAI,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;AACpC,MAAM,MAAM,aAAa,GAAG,WAAW,CAAC,gBAAgB;AACxD,QAAQ,WAAW,CAAC,gBAAgB,GAAG,GAAG,GAAG,EAAE,CAAC;AAChD,MAAM,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,UAAU,KAAK,UAAU,EAAE;AAC5D,QAAQ,UAAU,GAAG,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/E,OAAO,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AAC5D,QAAQ,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,aAAa,GAAG,KAAK,CAAC,CAAC;AACpF,OAAO,MAAM;AACb,QAAQ,UAAU,GAAG,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;AAChE,OAAO;AACP,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;AACpC;AACA,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE;AAC3E,QAAQ,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;AAC5C,OAAO;AACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAC7E,QAAQ,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC;AAC9C,OAAO;AACP,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,gBAAgB,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,kBAAkB,CAAC,EAAE;AACnG,QAAQ,OAAO,CAAC,gBAAgB,GAAG,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC;AACpE,OAAO;AACP,KAAK,MAAM;AACX,MAAM,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;AAChC,KAAK;AACL,IAAI,IAAI,YAAY,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO;AACjD,MAAM,OAAO,CAAC,OAAO,CAAC,YAAY;AAClC,MAAM,KAAK,CAAC;AACZ;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,KAAK,KAAK,CAAC,EAAE;AAC5D,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;AAChC,KAAK,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE;AACtE,MAAM,MAAM,iBAAiB;AAC7B,QAAQ,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AACrE,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AAC1C,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;AAC9D,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC;AACnE,KAAK,MAAM,IAAI,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE;AAClE,MAAM,IAAI,aAAa,CAAC;AACxB,MAAM,IAAI,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,KAAK,UAAU,EAAE;AACrD,QAAQ,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC3D,OAAO,MAAM;AACb,QAAQ,aAAa,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC;AAC5C,OAAO;AACP,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC;AAC1C,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,MAAM,IAAI,CAAC,UAAU,EAAE;AACvB,QAAQ,UAAU,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;AAC9C,OAAO;AACP,KAAK,MAAM,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE;AACrD;AACA,MAAM,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE;AACpD,QAAQ,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC;AACvC,UAAU,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC;AAC1D,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC;AACnC,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,EAAE;AACrB,MAAM,SAAS;AACf,KAAK;AACL;AACA,IAAI,IAAI,OAAO,KAAK,CAAC,UAAU,IAAI,CAAC,YAAY,CAAC,EAAE;AACnD,MAAM,OAAO,IAAID,KAAa,CAAC,oDAAoD;AACnF,QAAQ,qCAAqC,CAAC,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;AAClC,IAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC;AAC9B,IAAI,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;AAC1C,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7C,KAAK;AACL,IAAI,IAAI,OAAO,YAAY,KAAK,UAAU,EAAE;AAC5C,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,KAAK;AACL;AACA,IAAI,IAAI,KAAK,GAAG,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC;AAC3C,MAAM,GAAG,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC;AACxC,MAAM,GAAG,CAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,CAAC;AACjD,MAAM,GAAG,CAAC,OAAO,EAAE,+BAA+B,EAAE,IAAI,CAAC,CAAC;AAC1D;AACA,IAAI,IAAI,gBAAgB,GAAG,OAAO,KAAK,KAAK,UAAU,CAAC;AACvD,IAAI,IAAI,gBAAgB,EAAE;AAC1B,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACnC,KAAK;AACL;AACA,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,UAAU,CAAC,MAAM,KAAK,YAAY,CAAC,MAAM,EAAE;AAC/G,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;AACvC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAClD,QAAQ,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AACxG,QAAQ,gBAAgB,GAAG,IAAI,CAAC;AAChC,OAAO;AACP;AACA,MAAM,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACjC,MAAM,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AACrC,KAAK;AACL;AACA,IAAI,MAAM,kBAAkB,GAAG,WAAW,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;AACpE,IAAI,MAAM,cAAc,GAAG,kBAAkB,KAAK,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,kBAAkB,CAAC,MAAM,CAAC;AACpH,IAAI,MAAM,iBAAiB,GAAG,cAAc,IAAI,cAAc,CAAC,OAAO,GAAG,cAAc,CAAC,OAAO,GAAG,EAAE,CAAC;AACrG,IAAI,IAAI,GAAG,CAAC;AACZ;AACA,IAAI,MAAM,gBAAgB,GAAG,GAAG,CAAC,OAAO,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;AACzD;AACA,IAAI,MAAM,OAAO,GAAG,SAAS,IAAI,gBAAgB;AACjD,MAAM,gBAAgB,CAAC,OAAO;AAC9B,MAAM,OAAO,CAAC,SAAS,IAAI,GAAG,CAAC,OAAO,EAAE,iBAAiB,EAAE,KAAK,CAAC,CAAC;AAClE,IAAI,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,EAAE;AACjD,MAAM,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACvE,MAAM,MAAM,eAAe,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAC5E,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE;AAC1C,QAAQ,MAAM,uBAAuB,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;AACtH,QAAQ,GAAG,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,kBAAkB;AACvE,UAAU,cAAc,CAAC,YAAY,CAAC,gBAAgB,EAAE,uBAAuB,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;AACtG,OAAO,MAAM;AACb,QAAQ,GAAG,GAAG,cAAc,CAAC,YAAY,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;AACxE,OAAO;AACP,KAAK,MAAM;AACX,MAAM,GAAG,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,EAAE,iBAAiB,CAAC,EAAE,MAAM,CAAC,CAAC;AAChF,KAAK;AACL;AACA,IAAI,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,EAAE,GAAG,CAAC,CAAC,CAAC;AACzD,IAAI,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,CAAC;AAC/D;AACA;AACA;AACA;AACA,IAAI,IAAI,SAAS,IAAI,iBAAiB,IAAI,IAAI,EAAE;AAChD,MAAM,MAAM,MAAM,GAAG,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClD,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC;AACnB,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AAC9C,QAAQ,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AAChC,QAAQ,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;AAC1D,QAAQ,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACjD,QAAQ,IAAI,UAAU,IAAI,IAAI;AAC9B,YAAY,UAAU,CAAC,gBAAgB;AACvC,YAAY,UAAU,CAAC,MAAM,CAAC,cAAc,IAAI,IAAI;AACpD,YAAY,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;AACtE,UAAU,MAAM,OAAO,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACnD,UAAU,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAC9D,UAAU,MAAM,gBAAgB,GAAG,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC;AACrF,UAAU,UAAU,GAAG,EAAE,CAAC;AAC1B,UAAU,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;AACxC,YAAY,MAAM,iBAAiB,GAAG,KAAK,CAAC,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;AAC/E,YAAY,MAAM,aAAa,GAAG,UAAU,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;AACtF,YAAY,MAAM,mBAAmB,GAAG,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC;AAC9E,YAAY,IAAI,mBAAmB,IAAI,IAAI,EAAE;AAC7C,cAAc,SAAS;AACvB,aAAa;AACb,YAAY,MAAM,KAAK,GAAG,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAC5D,YAAY,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,EAAE;AAChE,cAAc,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AACzF,cAAc,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,GAAG,iBAAiB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC5E,cAAc,SAAS;AACvB,aAAa;AACb,YAAY,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;AACpF,YAAY,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AACvC,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC;AAC9B,IAAI,OAAO,CAAC,EAAE,EAAE;AAChB,MAAM,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAChC,MAAM,IAAI,SAAS,IAAI,IAAI,EAAE;AAC7B,QAAQ,SAAS;AACjB,OAAO;AACP;AACA;AACA;AACA,MAAM,MAAM,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC,EAAE,CAAC;AACpF;AACA,MAAM,IAAI;AACV,QAAQ,KAAK,GAAG,aAAa,IAAI,aAAa,CAAC,WAAW,CAAC;AAC3D,UAAU,aAAa;AACvB,UAAU,SAAS,CAAC,WAAW,CAAC,GAAG,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC3E,OAAO,CAAC,OAAO,KAAK,EAAE;AACtB;AACA;AACA;AACA,QAAQ,IAAI,GAAG,KAAK,SAAS,EAAE;AAC/B,UAAU,OAAO,KAAK,CAAC;AACvB,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC;AACpB,MAAM,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;AACtE;AACA,MAAM,IAAI,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM,EAAE;AAChF,QAAQ,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC;AACnE,OAAO;AACP;AACA,MAAM,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,cAAc,CAAC,gBAAgB,IAAI,IAAI,IAAI,GAAG,CAAC,cAAc,EAAE,0BAA0B,CAAC,IAAI,IAAI,EAAE;AACvI,QAAQ,cAAc,GAAG;AACzB,UAAU,KAAK,EAAE,KAAK;AACtB,SAAS,CAAC;AACV;AACA,QAAQ,IAAI,SAAS,IAAI,GAAG,CAAC,OAAO,EAAE,iBAAiB,CAAC,EAAE;AAC1D,UAAU,cAAc,CAAC,OAAO,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACxE,SAAS,MAAM,IAAI,aAAa,IAAI,IAAI,EAAE;AAC1C,UAAU,cAAc,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;AACpE,SAAS;AACT,QAAQ,KAAK,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;AAC7C;AACA;AACA;AACA,QAAQ,OAAO,CAAC,mBAAmB,CAAC,GAAG,KAAK,CAAC;AAC7C;AACA,QAAQ,SAAS,CAAC,SAAS,CAAC,GAAG;AAC/B,UAAU,KAAK,EAAE,KAAK;AACtB,UAAU,OAAO,EAAE,cAAc;AACjC,UAAU,KAAK,EAAE,gBAAgB,GAAG,CAAC,KAAK,CAAC,GAAG,KAAK;AACnD,UAAU,IAAI,EAAE,CAAC,GAAG,CAAC;AACrB,UAAU,GAAG,EAAE,CAAC,GAAG,CAAC;AACpB,UAAU,MAAM,EAAE,CAAC,GAAG,CAAC;AACvB,UAAU,UAAU,EAAE,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;AAC3C,UAAU,YAAY,EAAE,IAAI,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC;AAC/C,UAAU,OAAO,EAAE,OAAO;AAC1B,UAAU,SAAS,EAAE,SAAS;AAC9B,UAAU,OAAO,EAAE,OAAO;AAC1B,UAAU,KAAK,EAAE,KAAK;AACtB,UAAU,CAAC,mBAAmB,GAAG,KAAK;AACtC,SAAS,CAAC;AACV,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;AACvC,OAAO,MAAM;AACb,QAAQ,SAAS,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;AACxD,QAAQ,SAAS,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC5D,QAAQ,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC5C,QAAQ,SAAS,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3C,QAAQ,SAAS,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9C,QAAQ,IAAI,gBAAgB,EAAE;AAC9B,UAAU,SAAS,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACjD,SAAS;AACT,OAAO;AACP,KAAK;AACL,GAAG;AACH,EAAE,OAAO,GAAG,CAAC;AACb;AACA,EAAE,SAAS,cAAc,CAAC,GAAG,EAAE,MAAM,EAAE;AACvC,IAAI,IAAI,UAAU,CAAC;AACnB,IAAI,IAAI,gBAAgB,CAAC;AACzB,IAAI,IAAI,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAI,IAAI,OAAO,GAAG,IAAI,CAAC;AACvB;AACA,IAAI,IAAI,MAAM,IAAI,MAAM,CAAC,MAAM,EAAE;AACjC,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC7B,KAAK;AACL,IAAI,IAAI,MAAM,IAAI,MAAM,CAAC,YAAY,EAAE;AACvC,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,CAAC;AACpC,KAAK;AACL;AACA,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,cAAc,EAAE;AACzC,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAoB,CAAC,GAAG,CAAC;AAC/D,KAAK;AACL;AACA,IAAI,OAAO,GAAG,MAAM,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC;AACjE;AACA,IAAI,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3E;AACA,IAAI,IAAI,kBAAkB,EAAE;AAC5B,MAAM,UAAU,GAAG,CAAC,kBAAkB,CAAC,CAAC;AACxC,KAAK,MAAM,IAAI,iBAAiB,EAAE;AAClC,MAAM,IAAI,OAAO,CAAC,gBAAgB,IAAI,IAAI,IAAI,cAAc,CAAC,OAAO,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,EAAE;AAC3G,QAAQ,MAAM,IAAIA,KAAa,CAAC,WAAW,GAAG,iBAAiB;AAC/D,UAAU,4CAA4C;AACtD,UAAU,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAClD,OAAO;AACP;AACA,MAAM,IAAI,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,GAAG,IAAI,IAAI,EAAE;AACrF,QAAQ,UAAU,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AACzF,OAAO,MAAM;AACb,QAAQ,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACrC,QAAQ,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACrD,OAAO;AACP;AACA,MAAM,SAAS,GAAG,IAAI,CAAC;AACvB,KAAK,MAAM;AACX,MAAM,IAAI,kBAAkB,GAAG,KAAK,CAAC;AACrC,MAAM,IAAI,mBAAmB,CAAC;AAC9B,MAAM,IAAI,kBAAkB,CAAC;AAC7B;AACA,MAAM,IAAI,CAAC,MAAM,IAAI,gBAAgB,KAAK,kBAAkB,GAAG,KAAK,CAAC,QAAQ,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,EAAE;AACvG;AACA;AACA,QAAQ,MAAM,kBAAkB,GAAG,uBAAuB,CAAC,KAAK,CAAC,cAAc,EAAE,kBAAkB,CAAC,IAAI,KAAK,CAAC;AAC9G,QAAQ,IAAI,kBAAkB,IAAI,IAAI,EAAE;AACxC,UAAU,kBAAkB,GAAG,kBAAkB,CAAC;AAClD,SAAS,MAAM;AACf,UAAU,IAAI;AACd,YAAY,kBAAkB,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;AACpE,WAAW,CAAC,OAAO,KAAK,EAAE;AAC1B,YAAY,OAAO,KAAK,CAAC;AACzB,WAAW;AACX,SAAS;AACT;AACA,QAAQ,mBAAmB,GAAG,kBAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACjF;AACA,QAAQ,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,MAAM,EAAE;AAC/D,UAAU,mBAAmB,GAAG,mBAAmB,CAAC,MAAM,CAAC;AAC3D,SAAS;AACT,OAAO,MAAM;AACb,QAAQ,mBAAmB,GAAG,MAAM,CAAC;AACrC,OAAO;AACP,MAAM,MAAM,WAAW,GAAGC,YAAU,CAAC,kBAAkB,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC9E,MAAM,MAAM,OAAO,GAAG,WAAW,IAAI,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC,OAAO,CAAC;AACvE;AACA,MAAM,IAAI,mBAAmB,IAAI,IAAI,EAAE;AACvC,QAAQ,OAAO,GAAG,CAAC,mBAAmB,CAAC,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC;AAC3F,OAAO;AACP;AACA,MAAM,IAAI,GAAG,CAAC;AACd,MAAM,IAAI,OAAO,CAAC;AAClB;AACA,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,mBAAmB,EAAE,aAAa,CAAC,KAAK,IAAI,EAAE;AACnE,QAAQ,GAAG,GAAG,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC1C,QAAQ,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;AAC3B,OAAO,MAAM,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,KAAK,IAAI,EAAE;AAC9D,QAAQ,GAAG,GAAG,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC1C;AACA;AACA;AACA,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AAChC,UAAU,UAAU,GAAG,GAAG,CAAC;AAC3B,SAAS,MAAM;AACf,UAAU,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;AAC7B,SAAS;AACT;AACA,QAAQ,SAAS,GAAG,IAAI,CAAC;AACzB,OAAO,MAAM,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC,mBAAmB,EAAE,iBAAiB,CAAC,KAAK,IAAI,EAAE;AAClF,QAAQ,SAAS,GAAG,IAAI,CAAC;AACzB,QAAQ,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;AAC/D,QAAQ,UAAU,GAAG,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;AAClD,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACvC,UAAU,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AACvD,SAAS;AACT,OAAO,MAAM;AACb;AACA;AACA,QAAQ,UAAU,GAAG,gBAAgB,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACjE,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,EAAE;AACrB,MAAM,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AAC5G,KAAK;AACL;AACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;AACpC,MAAM,UAAU,GAAG,CAAC,UAAU,CAAC,CAAC;AAChC,KAAK;AACL;AACA,IAAI,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,iBAAiB,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AAC1G,GAAG;AACH,EAAE;AACF;AACA;AACA;AACA;AACA;AACA,SAAS,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE;AACrC,EAAE,IAAI,OAAO,GAAG,KAAK,UAAU,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;AACtD,IAAI,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC9B,GAAG;AACH,EAAE,OAAO,GAAG,CAAC;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,GAAG,EAAE,MAAM,EAAE;AACnC,EAAE,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,IAAI,EAAE;AACtC,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC;AACnB,GAAG;AACH,EAAE,IAAI,GAAG,IAAI,IAAI,IAAI,GAAG,CAAC,GAAG,IAAI,IAAI,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE;AAClF,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC;AACnB,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;AAC1B,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACzC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,EAAE;AAChD,QAAQ,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;AAC5B,OAAO;AACP,KAAK;AACL,IAAI,IAAI,GAAG,CAAC,eAAe,IAAI,GAAG,CAAC,OAAO,EAAE,EAAE;AAC9C,MAAM,OAAO,GAAG,CAAC,OAAO,EAAE,CAAC,gBAAgB,CAAC,GAAG,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AAChE,KAAK;AACL;AACA,IAAI,OAAO,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC1B,GAAG;AACH;AACA;AACA;AACA,EAAE,IAAI,GAAG,IAAI,IAAI;AACjB,MAAM,GAAG,CAAC,WAAW,CAAC,IAAI,KAAK,QAAQ;AACvC;AACA;AACA,OAAO,MAAM,IAAI,IAAI,IAAI,MAAM,CAAC,iBAAiB,CAAC,IAAI,IAAI,CAAC,EAAE;AAC7D,IAAI,MAAM,GAAG,GAAG,EAAE,CAAC;AACnB,IAAI,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;AACxC,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACzB,KAAK;AACL,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH;AACA;AACA,EAAE,IAAI,GAAG,YAAY,GAAG,EAAE;AAC1B,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;AACpC,GAAG;AACH;AACA,EAAE,OAAO,GAAG,CAAC;AACb;;;;"}