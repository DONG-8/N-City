{"version":3,"file":"cast.mjs","sources":["../../../../../../node_modules/mongoose/lib/cast.js"],"sourcesContent":["'use strict';\n\n/*!\n * Module dependencies.\n */\n\nconst CastError = require('./error/cast');\nconst StrictModeError = require('./error/strict');\nconst Types = require('./schema/index');\nconst castTextSearch = require('./schema/operators/text');\nconst get = require('./helpers/get');\nconst getSchemaDiscriminatorByValue = require('./helpers/discriminator/getSchemaDiscriminatorByValue');\nconst isOperator = require('./helpers/query/isOperator');\nconst util = require('util');\nconst isObject = require('./helpers/isObject');\nconst isMongooseObject = require('./helpers/isMongooseObject');\n\nconst ALLOWED_GEOWITHIN_GEOJSON_TYPES = ['Polygon', 'MultiPolygon'];\n\n/**\n * Handles internal casting for query filters.\n *\n * @param {Schema} schema\n * @param {Object} obj Object to cast\n * @param {Object} options the query options\n * @param {Query} context passed to setters\n * @api private\n */\nmodule.exports = function cast(schema, obj, options, context) {\n  if (Array.isArray(obj)) {\n    throw new Error('Query filter must be an object, got an array ', util.inspect(obj));\n  }\n\n  if (obj == null) {\n    return obj;\n  }\n\n  // bson 1.x has the unfortunate tendency to remove filters that have a top-level\n  // `_bsontype` property. But we should still allow ObjectIds because\n  // `Collection#find()` has a special case to support `find(objectid)`.\n  // Should remove this when we upgrade to bson 4.x. See gh-8222, gh-8268\n  if (obj.hasOwnProperty('_bsontype') && obj._bsontype !== 'ObjectID') {\n    delete obj._bsontype;\n  }\n\n  if (schema != null && schema.discriminators != null && obj[schema.options.discriminatorKey] != null) {\n    schema = getSchemaDiscriminatorByValue(schema, obj[schema.options.discriminatorKey]) || schema;\n  }\n\n  const paths = Object.keys(obj);\n  let i = paths.length;\n  let _keys;\n  let any$conditionals;\n  let schematype;\n  let nested;\n  let path;\n  let type;\n  let val;\n\n  options = options || {};\n\n  while (i--) {\n    path = paths[i];\n    val = obj[path];\n\n    if (path === '$or' || path === '$nor' || path === '$and') {\n      if (!Array.isArray(val)) {\n        throw new CastError('Array', val, path);\n      }\n      for (let k = 0; k < val.length; ++k) {\n        if (val[k] == null || typeof val[k] !== 'object') {\n          throw new CastError('Object', val[k], path + '.' + k);\n        }\n        val[k] = cast(schema, val[k], options, context);\n      }\n    } else if (path === '$where') {\n      type = typeof val;\n\n      if (type !== 'string' && type !== 'function') {\n        throw new Error('Must have a string or function for $where');\n      }\n\n      if (type === 'function') {\n        obj[path] = val.toString();\n      }\n\n      continue;\n    } else if (path === '$elemMatch') {\n      val = cast(schema, val, options, context);\n    } else if (path === '$text') {\n      val = castTextSearch(val, path);\n    } else {\n      if (!schema) {\n        // no casting for Mixed types\n        continue;\n      }\n\n      schematype = schema.path(path);\n\n      // Check for embedded discriminator paths\n      if (!schematype) {\n        const split = path.split('.');\n        let j = split.length;\n        while (j--) {\n          const pathFirstHalf = split.slice(0, j).join('.');\n          const pathLastHalf = split.slice(j).join('.');\n          const _schematype = schema.path(pathFirstHalf);\n          const discriminatorKey = get(_schematype, 'schema.options.discriminatorKey');\n\n          // gh-6027: if we haven't found the schematype but this path is\n          // underneath an embedded discriminator and the embedded discriminator\n          // key is in the query, use the embedded discriminator schema\n          if (_schematype != null &&\n              get(_schematype, 'schema.discriminators') != null &&\n              discriminatorKey != null &&\n              pathLastHalf !== discriminatorKey) {\n            const discriminatorVal = get(obj, pathFirstHalf + '.' + discriminatorKey);\n            if (discriminatorVal != null) {\n              schematype = _schematype.schema.discriminators[discriminatorVal].\n                path(pathLastHalf);\n            }\n          }\n        }\n      }\n\n      if (!schematype) {\n        // Handle potential embedded array queries\n        const split = path.split('.');\n        let j = split.length;\n        let pathFirstHalf;\n        let pathLastHalf;\n        let remainingConds;\n\n        // Find the part of the var path that is a path of the Schema\n        while (j--) {\n          pathFirstHalf = split.slice(0, j).join('.');\n          schematype = schema.path(pathFirstHalf);\n          if (schematype) {\n            break;\n          }\n        }\n\n        // If a substring of the input path resolves to an actual real path...\n        if (schematype) {\n          // Apply the casting; similar code for $elemMatch in schema/array.js\n          if (schematype.caster && schematype.caster.schema) {\n            remainingConds = {};\n            pathLastHalf = split.slice(j).join('.');\n            remainingConds[pathLastHalf] = val;\n            obj[path] = cast(schematype.caster.schema, remainingConds, options, context)[pathLastHalf];\n          } else {\n            obj[path] = val;\n          }\n          continue;\n        }\n\n        if (isObject(val)) {\n          // handle geo schemas that use object notation\n          // { loc: { long: Number, lat: Number }\n\n          let geo = '';\n          if (val.$near) {\n            geo = '$near';\n          } else if (val.$nearSphere) {\n            geo = '$nearSphere';\n          } else if (val.$within) {\n            geo = '$within';\n          } else if (val.$geoIntersects) {\n            geo = '$geoIntersects';\n          } else if (val.$geoWithin) {\n            geo = '$geoWithin';\n          }\n\n          if (geo) {\n            const numbertype = new Types.Number('__QueryCasting__');\n            let value = val[geo];\n\n            if (val.$maxDistance != null) {\n              val.$maxDistance = numbertype.castForQueryWrapper({\n                val: val.$maxDistance,\n                context: context\n              });\n            }\n            if (val.$minDistance != null) {\n              val.$minDistance = numbertype.castForQueryWrapper({\n                val: val.$minDistance,\n                context: context\n              });\n            }\n\n            if (geo === '$within') {\n              const withinType = value.$center\n                  || value.$centerSphere\n                  || value.$box\n                  || value.$polygon;\n\n              if (!withinType) {\n                throw new Error('Bad $within parameter: ' + JSON.stringify(val));\n              }\n\n              value = withinType;\n            } else if (geo === '$near' &&\n                typeof value.type === 'string' && Array.isArray(value.coordinates)) {\n              // geojson; cast the coordinates\n              value = value.coordinates;\n            } else if ((geo === '$near' || geo === '$nearSphere' || geo === '$geoIntersects') &&\n                value.$geometry && typeof value.$geometry.type === 'string' &&\n                Array.isArray(value.$geometry.coordinates)) {\n              if (value.$maxDistance != null) {\n                value.$maxDistance = numbertype.castForQueryWrapper({\n                  val: value.$maxDistance,\n                  context: context\n                });\n              }\n              if (value.$minDistance != null) {\n                value.$minDistance = numbertype.castForQueryWrapper({\n                  val: value.$minDistance,\n                  context: context\n                });\n              }\n              if (isMongooseObject(value.$geometry)) {\n                value.$geometry = value.$geometry.toObject({\n                  transform: false,\n                  virtuals: false\n                });\n              }\n              value = value.$geometry.coordinates;\n            } else if (geo === '$geoWithin') {\n              if (value.$geometry) {\n                if (isMongooseObject(value.$geometry)) {\n                  value.$geometry = value.$geometry.toObject({ virtuals: false });\n                }\n                const geoWithinType = value.$geometry.type;\n                if (ALLOWED_GEOWITHIN_GEOJSON_TYPES.indexOf(geoWithinType) === -1) {\n                  throw new Error('Invalid geoJSON type for $geoWithin \"' +\n                    geoWithinType + '\", must be \"Polygon\" or \"MultiPolygon\"');\n                }\n                value = value.$geometry.coordinates;\n              } else {\n                value = value.$box || value.$polygon || value.$center ||\n                  value.$centerSphere;\n                if (isMongooseObject(value)) {\n                  value = value.toObject({ virtuals: false });\n                }\n              }\n            }\n\n            _cast(value, numbertype, context);\n            continue;\n          }\n        }\n\n        if (schema.nested[path]) {\n          continue;\n        }\n        if (options.upsert && options.strict) {\n          if (options.strict === 'throw') {\n            throw new StrictModeError(path);\n          }\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema, strict mode is `true`, and upsert is `true`.');\n        } else if (options.strictQuery === 'throw') {\n          throw new StrictModeError(path, 'Path \"' + path + '\" is not in ' +\n            'schema and strictQuery is \\'throw\\'.');\n        } else if (options.strictQuery) {\n          delete obj[path];\n        }\n      } else if (val == null) {\n        continue;\n      } else if (val.constructor.name === 'Object') {\n        any$conditionals = Object.keys(val).some(isOperator);\n\n        if (!any$conditionals) {\n          obj[path] = schematype.castForQueryWrapper({\n            val: val,\n            context: context\n          });\n        } else {\n          const ks = Object.keys(val);\n          let $cond;\n\n          let k = ks.length;\n\n          while (k--) {\n            $cond = ks[k];\n            nested = val[$cond];\n\n            if ($cond === '$not') {\n              if (nested && schematype && !schematype.caster) {\n                _keys = Object.keys(nested);\n                if (_keys.length && isOperator(_keys[0])) {\n                  for (const key in nested) {\n                    nested[key] = schematype.castForQueryWrapper({\n                      $conditional: key,\n                      val: nested[key],\n                      context: context\n                    });\n                  }\n                } else {\n                  val[$cond] = schematype.castForQueryWrapper({\n                    $conditional: $cond,\n                    val: nested,\n                    context: context\n                  });\n                }\n                continue;\n              }\n              cast(schematype.caster ? schematype.caster.schema : schema, nested, options, context);\n            } else {\n              val[$cond] = schematype.castForQueryWrapper({\n                $conditional: $cond,\n                val: nested,\n                context: context\n              });\n            }\n          }\n        }\n      } else if (Array.isArray(val) && ['Buffer', 'Array'].indexOf(schematype.instance) === -1) {\n        const casted = [];\n        const valuesArray = val;\n\n        for (const _val of valuesArray) {\n          casted.push(schematype.castForQueryWrapper({\n            val: _val,\n            context: context\n          }));\n        }\n\n        obj[path] = { $in: casted };\n      } else {\n        obj[path] = schematype.castForQueryWrapper({\n          val: val,\n          context: context\n        });\n      }\n    }\n  }\n\n  return obj;\n};\n\nfunction _cast(val, numbertype, context) {\n  if (Array.isArray(val)) {\n    val.forEach(function(item, i) {\n      if (Array.isArray(item) || isObject(item)) {\n        return _cast(item, numbertype, context);\n      }\n      val[i] = numbertype.castForQueryWrapper({ val: item, context: context });\n    });\n  } else {\n    const nearKeys = Object.keys(val);\n    let nearLen = nearKeys.length;\n    while (nearLen--) {\n      const nkey = nearKeys[nearLen];\n      const item = val[nkey];\n      if (Array.isArray(item) || isObject(item)) {\n        _cast(item, numbertype, context);\n        val[nkey] = item;\n      } else {\n        val[nkey] = numbertype.castForQuery({ val: item, context: context });\n      }\n    }\n  }\n}"],"names":["schema","CastError","castTextSearch","Types","StrictModeError"],"mappings":"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"}