{"version":3,"file":"createClient.js","sources":["../../../../../../node_modules/redis/lib/createClient.js"],"sourcesContent":["'use strict';\n\nvar utils = require('./utils');\nvar URL = require('url');\n\nmodule.exports = function createClient (port_arg, host_arg, options) {\n\n    if (typeof port_arg === 'number' || typeof port_arg === 'string' && /^\\d+$/.test(port_arg)) {\n\n        var host;\n        if (typeof host_arg === 'string') {\n            host = host_arg;\n        } else {\n            if (options && host_arg) {\n                throw new TypeError('Unknown type of connection in createClient()');\n            }\n            options = options || host_arg;\n        }\n        options = utils.clone(options);\n        options.host = host || options.host;\n        options.port = port_arg;\n\n    } else if (typeof port_arg === 'string' || port_arg && port_arg.url) {\n\n        options = utils.clone(port_arg.url ? port_arg : host_arg || options);\n        var url = port_arg.url || port_arg;\n        var parsed = URL.parse(url, true, true);\n\n        // [redis:]//[[user][:password]@][host][:port][/db-number][?db=db-number[&password=bar[&option=value]]]\n        if (parsed.slashes) { // We require slashes\n            if (parsed.auth) {\n                options.password = parsed.auth.split(':')[1];\n            }\n            if (parsed.protocol && parsed.protocol !== 'redis:') {\n                console.warn('node_redis: WARNING: You passed \"' + parsed.protocol.substring(0, parsed.protocol.length - 1) + '\" as protocol instead of the \"redis\" protocol!');\n            }\n            if (parsed.pathname && parsed.pathname !== '/') {\n                options.db = parsed.pathname.substr(1);\n            }\n            if (parsed.hostname) {\n                options.host = parsed.hostname;\n            }\n            if (parsed.port) {\n                options.port = parsed.port;\n            }\n            if (parsed.search !== '') {\n                var elem;\n                for (elem in parsed.query) {\n                    // If options are passed twice, only the parsed options will be used\n                    if (elem in options) {\n                        if (options[elem] === parsed.query[elem]) {\n                            console.warn('node_redis: WARNING: You passed the ' + elem + ' option twice!');\n                        } else {\n                            throw new RangeError('The ' + elem + ' option is added twice and does not match');\n                        }\n                    }\n                    options[elem] = parsed.query[elem];\n                }\n            }\n        } else if (parsed.hostname) {\n            throw new RangeError('The redis url must begin with slashes \"//\" or contain slashes after the redis protocol');\n        } else {\n            options.path = url;\n        }\n\n    } else if (typeof port_arg === 'object' || port_arg === undefined) {\n        options = utils.clone(port_arg || options);\n        options.host = options.host || host_arg;\n\n        if (port_arg && arguments.length !== 1) {\n            throw new TypeError('To many arguments passed to createClient. Please only pass the options object');\n        }\n    }\n\n    if (!options) {\n        throw new TypeError('Unknown type of connection in createClient()');\n    }\n\n    return options;\n};\n"],"names":["URL"],"mappings":"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"}