'use strict';

var index = require('./lib/core/index.js');
var apm = require('./lib/apm.js');
var mongo_client = require('./lib/mongo_client.js');
var common = require('./lib/bulk/common.js');
var admin = require('./lib/admin.js');
var db = require('./lib/db.js');
var collection = require('./lib/collection.js');
var server = require('./lib/topologies/server.js');
var replset = require('./lib/topologies/replset.js');
var mongos = require('./lib/topologies/mongos.js');
var grid_store = require('./lib/gridfs/grid_store.js');
var chunk = require('./lib/gridfs/chunk.js');
var aggregation_cursor = require('./lib/aggregation_cursor.js');
var command_cursor = require('./lib/command_cursor.js');
var cursor = require('./lib/cursor.js');
var index$1 = require('./lib/gridfs-stream/index.js');

// Core module



// Set up the connect function
const connect = mongo_client.connect;

// Expose error class
connect.MongoError = index.MongoError;
connect.MongoNetworkError = index.MongoNetworkError;
connect.MongoTimeoutError = index.MongoTimeoutError;
connect.MongoServerSelectionError = index.MongoServerSelectionError;
connect.MongoParseError = index.MongoParseError;
connect.MongoWriteConcernError = index.MongoWriteConcernError;
connect.MongoBulkWriteError = common.BulkWriteError;
connect.BulkWriteError = connect.MongoBulkWriteError;

// Actual driver classes exported
connect.Admin = admin;
connect.MongoClient = mongo_client;
connect.Db = db;
connect.Collection = collection;
connect.Server = server;
connect.ReplSet = replset;
connect.Mongos = mongos;
connect.ReadPreference = index.ReadPreference;
connect.GridStore = grid_store;
connect.Chunk = chunk;
connect.Logger = index.Logger;
connect.AggregationCursor = aggregation_cursor;
connect.CommandCursor = command_cursor;
connect.Cursor = cursor;
connect.GridFSBucket = index$1;
// Exported to be used in tests not to be used anywhere else
connect.CoreServer = index.Server;
connect.CoreConnection = index.Connection;

// BSON types exported
connect.Binary = index.BSON.Binary;
connect.Code = index.BSON.Code;
connect.Map = index.BSON.Map;
connect.DBRef = index.BSON.DBRef;
connect.Double = index.BSON.Double;
connect.Int32 = index.BSON.Int32;
connect.Long = index.BSON.Long;
connect.MinKey = index.BSON.MinKey;
connect.MaxKey = index.BSON.MaxKey;
connect.ObjectID = index.BSON.ObjectID;
connect.ObjectId = index.BSON.ObjectID;
connect.Symbol = index.BSON.Symbol;
connect.Timestamp = index.BSON.Timestamp;
connect.BSONRegExp = index.BSON.BSONRegExp;
connect.Decimal128 = index.BSON.Decimal128;

// Add connect method
connect.connect = connect;

// Set up the instrumentation method
connect.instrument = function(options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  const instrumentation = new apm();
  instrumentation.instrument(connect.MongoClient, callback);
  return instrumentation;
};

// Set our exports to be the connect function
var mongodb = connect;

module.exports = mongodb;
//# sourceMappingURL=index.js.map
