import core from './lib/core/index.mjs';
import apm from './lib/apm.mjs';
import mongo_client from './lib/mongo_client.mjs';
import common from './lib/bulk/common.mjs';
import admin from './lib/admin.mjs';
import db from './lib/db.mjs';
import collection from './lib/collection.mjs';
import server from './lib/topologies/server.mjs';
import replset from './lib/topologies/replset.mjs';
import mongos from './lib/topologies/mongos.mjs';
import grid_store from './lib/gridfs/grid_store.mjs';
import chunk from './lib/gridfs/chunk.mjs';
import aggregation_cursor from './lib/aggregation_cursor.mjs';
import command_cursor from './lib/command_cursor.mjs';
import cursor from './lib/cursor.mjs';
import gridfsStream from './lib/gridfs-stream/index.mjs';

// Core module



// Set up the connect function
const connect = mongo_client.connect;

// Expose error class
connect.MongoError = core.MongoError;
connect.MongoNetworkError = core.MongoNetworkError;
connect.MongoTimeoutError = core.MongoTimeoutError;
connect.MongoServerSelectionError = core.MongoServerSelectionError;
connect.MongoParseError = core.MongoParseError;
connect.MongoWriteConcernError = core.MongoWriteConcernError;
connect.MongoBulkWriteError = common.BulkWriteError;
connect.BulkWriteError = connect.MongoBulkWriteError;

// Actual driver classes exported
connect.Admin = admin;
connect.MongoClient = mongo_client;
connect.Db = db;
connect.Collection = collection;
connect.Server = server;
connect.ReplSet = replset;
connect.Mongos = mongos;
connect.ReadPreference = core.ReadPreference;
connect.GridStore = grid_store;
connect.Chunk = chunk;
connect.Logger = core.Logger;
connect.AggregationCursor = aggregation_cursor;
connect.CommandCursor = command_cursor;
connect.Cursor = cursor;
connect.GridFSBucket = gridfsStream;
// Exported to be used in tests not to be used anywhere else
connect.CoreServer = core.Server;
connect.CoreConnection = core.Connection;

// BSON types exported
connect.Binary = core.BSON.Binary;
connect.Code = core.BSON.Code;
connect.Map = core.BSON.Map;
connect.DBRef = core.BSON.DBRef;
connect.Double = core.BSON.Double;
connect.Int32 = core.BSON.Int32;
connect.Long = core.BSON.Long;
connect.MinKey = core.BSON.MinKey;
connect.MaxKey = core.BSON.MaxKey;
connect.ObjectID = core.BSON.ObjectID;
connect.ObjectId = core.BSON.ObjectID;
connect.Symbol = core.BSON.Symbol;
connect.Timestamp = core.BSON.Timestamp;
connect.BSONRegExp = core.BSON.BSONRegExp;
connect.Decimal128 = core.BSON.Decimal128;

// Add connect method
connect.connect = connect;

// Set up the instrumentation method
connect.instrument = function(options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }

  const instrumentation = new apm();
  instrumentation.instrument(connect.MongoClient, callback);
  return instrumentation;
};

// Set our exports to be the connect function
var mongodb = connect;

export default mongodb;
//# sourceMappingURL=index.mjs.map
