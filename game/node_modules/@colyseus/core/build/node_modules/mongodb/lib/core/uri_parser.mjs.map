{"version":3,"file":"uri_parser.mjs","sources":["../../../../../../../node_modules/mongodb/lib/core/uri_parser.js"],"sourcesContent":["'use strict';\nconst URL = require('url');\nconst qs = require('querystring');\nconst dns = require('dns');\nconst MongoParseError = require('./error').MongoParseError;\nconst ReadPreference = require('./topologies/read_preference');\nconst emitWarningOnce = require('../utils').emitWarningOnce;\n\n/**\n * The following regular expression validates a connection string and breaks the\n * provide string into the following capture groups: [protocol, username, password, hosts]\n */\nconst HOSTS_RX = /(mongodb(?:\\+srv|)):\\/\\/(?: (?:[^:]*) (?: : ([^@]*) )? @ )?([^/?]*)(?:\\/|)(.*)/;\n\n// Options that reference file paths should not be parsed\nconst FILE_PATH_OPTIONS = new Set(\n  ['sslCA', 'sslCert', 'sslKey', 'tlsCAFile', 'tlsCertificateKeyFile'].map(key => key.toLowerCase())\n);\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param {String} srvAddress The address to check against a domain\n * @param {String} parentDomain The domain to check the provided address against\n * @return {Boolean} Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param {string} uri The connection string to parse\n * @param {object} options Optional user provided connection string options\n * @param {function} callback\n */\nfunction parseSrvConnectionString(uri, options, callback) {\n  const result = URL.parse(uri, true);\n\n  if (options.directConnection || options.directconnection) {\n    return callback(new MongoParseError('directConnection not supported with SRV URI'));\n  }\n\n  if (result.hostname.split('.').length < 3) {\n    return callback(new MongoParseError('URI does not have hostname, domain name and tld'));\n  }\n\n  result.domainLength = result.hostname.split('.').length;\n  if (result.pathname && result.pathname.match(',')) {\n    return callback(new MongoParseError('Invalid URI, cannot contain multiple hostnames'));\n  }\n\n  if (result.port) {\n    return callback(new MongoParseError(`Ports not accepted with '${PROTOCOL_MONGODB_SRV}' URIs`));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = result.host;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoParseError('No addresses found at host'));\n    }\n\n    for (let i = 0; i < addresses.length; i++) {\n      if (!matchesParentDomain(addresses[i].name, result.hostname, result.domainLength)) {\n        return callback(\n          new MongoParseError('Server record does not share hostname with parent URI')\n        );\n      }\n    }\n\n    // Convert the original URL to a non-SRV URL.\n    result.protocol = 'mongodb';\n    result.host = addresses.map(address => `${address.name}:${address.port}`).join(',');\n\n    // Default to SSL true if it's not specified.\n    if (\n      !('ssl' in options) &&\n      (!result.search || !('ssl' in result.query) || result.query.ssl === null)\n    ) {\n      result.query.ssl = true;\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n        record = null;\n      }\n\n      if (record) {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        record = qs.parse(record[0].join(''));\n        if (Object.keys(record).some(key => key !== 'authSource' && key !== 'replicaSet')) {\n          return callback(\n            new MongoParseError('Text record must only set `authSource` or `replicaSet`')\n          );\n        }\n\n        result.query = Object.assign({}, record, result.query);\n      }\n\n      // Set completed options back into the URL object.\n      result.search = qs.stringify(result.query);\n\n      const finalString = URL.format(result);\n      parseConnectionString(finalString, options, (err, ret) => {\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        callback(null, Object.assign({}, ret, { srvHost: lookupAddress }));\n      });\n    });\n  });\n}\n\n/**\n * Parses a query string item according to the connection string spec\n *\n * @param {string} key The key for the parsed value\n * @param {Array|String} value The value to parse\n * @return {Array|Object|String} The parsed value\n */\nfunction parseQueryStringItemValue(key, value) {\n  if (Array.isArray(value)) {\n    // deduplicate and simplify arrays\n    value = value.filter((v, idx) => value.indexOf(v) === idx);\n    if (value.length === 1) value = value[0];\n  } else if (value.indexOf(':') > 0) {\n    value = value.split(',').reduce((result, pair) => {\n      const parts = pair.split(':');\n      result[parts[0]] = parseQueryStringItemValue(key, parts[1]);\n      return result;\n    }, {});\n  } else if (value.indexOf(',') > 0) {\n    value = value.split(',').map(v => {\n      return parseQueryStringItemValue(key, v);\n    });\n  } else if (value.toLowerCase() === 'true' || value.toLowerCase() === 'false') {\n    value = value.toLowerCase() === 'true';\n  } else if (!Number.isNaN(value) && !STRING_OPTIONS.has(key)) {\n    const numericValue = parseFloat(value);\n    if (!Number.isNaN(numericValue)) {\n      value = parseFloat(value);\n    }\n  }\n\n  return value;\n}\n\n// Options that are known boolean types\nconst BOOLEAN_OPTIONS = new Set([\n  'slaveok',\n  'slave_ok',\n  'sslvalidate',\n  'fsync',\n  'safe',\n  'retrywrites',\n  'j'\n]);\n\n// Known string options, only used to bypass Number coercion in `parseQueryStringItemValue`\nconst STRING_OPTIONS = new Set(['authsource', 'replicaset']);\n\n// Supported text representations of auth mechanisms\n// NOTE: this list exists in native already, if it is merged here we should deduplicate\nconst AUTH_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-AWS',\n  'MONGODB-X509',\n  'MONGODB-CR',\n  'DEFAULT',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256',\n  'PLAIN'\n]);\n\n// Lookup table used to translate normalized (lower-cased) forms of connection string\n// options to their expected camelCase version\nconst CASE_TRANSLATION = {\n  replicaset: 'replicaSet',\n  connecttimeoutms: 'connectTimeoutMS',\n  sockettimeoutms: 'socketTimeoutMS',\n  maxpoolsize: 'maxPoolSize',\n  minpoolsize: 'minPoolSize',\n  maxidletimems: 'maxIdleTimeMS',\n  waitqueuemultiple: 'waitQueueMultiple',\n  waitqueuetimeoutms: 'waitQueueTimeoutMS',\n  wtimeoutms: 'wtimeoutMS',\n  readconcern: 'readConcern',\n  readconcernlevel: 'readConcernLevel',\n  readpreference: 'readPreference',\n  maxstalenessseconds: 'maxStalenessSeconds',\n  readpreferencetags: 'readPreferenceTags',\n  authsource: 'authSource',\n  authmechanism: 'authMechanism',\n  authmechanismproperties: 'authMechanismProperties',\n  gssapiservicename: 'gssapiServiceName',\n  localthresholdms: 'localThresholdMS',\n  serverselectiontimeoutms: 'serverSelectionTimeoutMS',\n  serverselectiontryonce: 'serverSelectionTryOnce',\n  heartbeatfrequencyms: 'heartbeatFrequencyMS',\n  retrywrites: 'retryWrites',\n  uuidrepresentation: 'uuidRepresentation',\n  zlibcompressionlevel: 'zlibCompressionLevel',\n  tlsallowinvalidcertificates: 'tlsAllowInvalidCertificates',\n  tlsallowinvalidhostnames: 'tlsAllowInvalidHostnames',\n  tlsinsecure: 'tlsInsecure',\n  tlscafile: 'tlsCAFile',\n  tlscertificatekeyfile: 'tlsCertificateKeyFile',\n  tlscertificatekeyfilepassword: 'tlsCertificateKeyFilePassword',\n  wtimeout: 'wTimeoutMS',\n  j: 'journal',\n  directconnection: 'directConnection'\n};\n\n/**\n * Sets the value for `key`, allowing for any required translation\n *\n * @param {object} obj The object to set the key on\n * @param {string} key The key to set the value for\n * @param {*} value The value to set\n * @param {object} options The options used for option parsing\n */\nfunction applyConnectionStringOption(obj, key, value, options) {\n  // simple key translation\n  if (key === 'journal') {\n    key = 'j';\n  } else if (key === 'wtimeoutms') {\n    key = 'wtimeout';\n  }\n\n  // more complicated translation\n  if (BOOLEAN_OPTIONS.has(key)) {\n    value = value === 'true' || value === true;\n  } else if (key === 'appname') {\n    value = decodeURIComponent(value);\n  } else if (key === 'readconcernlevel') {\n    obj['readConcernLevel'] = value;\n    key = 'readconcern';\n    value = { level: value };\n  }\n\n  // simple validation\n  if (key === 'compressors') {\n    value = Array.isArray(value) ? value : [value];\n\n    if (!value.every(c => c === 'snappy' || c === 'zlib')) {\n      throw new MongoParseError(\n        'Value for `compressors` must be at least one of: `snappy`, `zlib`'\n      );\n    }\n  }\n\n  if (key === 'authmechanism' && !AUTH_MECHANISMS.has(value)) {\n    throw new MongoParseError(\n      `Value for authMechanism must be one of: ${Array.from(AUTH_MECHANISMS).join(\n        ', '\n      )}, found: ${value}`\n    );\n  }\n\n  if (key === 'readpreference' && !ReadPreference.isValid(value)) {\n    throw new MongoParseError(\n      'Value for `readPreference` must be one of: `primary`, `primaryPreferred`, `secondary`, `secondaryPreferred`, `nearest`'\n    );\n  }\n\n  if (key === 'zlibcompressionlevel' && (value < -1 || value > 9)) {\n    throw new MongoParseError('zlibCompressionLevel must be an integer between -1 and 9');\n  }\n\n  // special cases\n  if (key === 'compressors' || key === 'zlibcompressionlevel') {\n    obj.compression = obj.compression || {};\n    obj = obj.compression;\n  }\n\n  if (key === 'authmechanismproperties') {\n    if (typeof value.SERVICE_NAME === 'string') obj.gssapiServiceName = value.SERVICE_NAME;\n    if (typeof value.SERVICE_REALM === 'string') obj.gssapiServiceRealm = value.SERVICE_REALM;\n    if (typeof value.CANONICALIZE_HOST_NAME !== 'undefined') {\n      obj.gssapiCanonicalizeHostName = value.CANONICALIZE_HOST_NAME;\n    }\n  }\n\n  if (key === 'readpreferencetags') {\n    value = Array.isArray(value) ? splitArrayOfMultipleReadPreferenceTags(value) : [value];\n  }\n\n  // set the actual value\n  if (options.caseTranslate && CASE_TRANSLATION[key]) {\n    obj[CASE_TRANSLATION[key]] = value;\n    return;\n  }\n\n  obj[key] = value;\n}\n\nconst USERNAME_REQUIRED_MECHANISMS = new Set([\n  'GSSAPI',\n  'MONGODB-CR',\n  'PLAIN',\n  'SCRAM-SHA-1',\n  'SCRAM-SHA-256'\n]);\n\nfunction splitArrayOfMultipleReadPreferenceTags(value) {\n  const parsedTags = [];\n\n  for (let i = 0; i < value.length; i++) {\n    parsedTags[i] = {};\n    value[i].split(',').forEach(individualTag => {\n      const splitTag = individualTag.split(':');\n      parsedTags[i][splitTag[0]] = splitTag[1];\n    });\n  }\n\n  return parsedTags;\n}\n\n/**\n * Modifies the parsed connection string object taking into account expectations we\n * have for authentication-related options.\n *\n * @param {object} parsed The parsed connection string result\n * @return The parsed connection string result possibly modified for auth expectations\n */\nfunction applyAuthExpectations(parsed) {\n  if (parsed.options == null) {\n    return;\n  }\n\n  const options = parsed.options;\n  const authSource = options.authsource || options.authSource;\n  if (authSource != null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: authSource });\n  }\n\n  const authMechanism = options.authmechanism || options.authMechanism;\n  if (authMechanism != null) {\n    if (\n      USERNAME_REQUIRED_MECHANISMS.has(authMechanism) &&\n      (!parsed.auth || parsed.auth.username == null)\n    ) {\n      throw new MongoParseError(`Username required for mechanism \\`${authMechanism}\\``);\n    }\n\n    if (authMechanism === 'GSSAPI') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'MONGODB-AWS') {\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'MONGODB-X509') {\n      if (parsed.auth && parsed.auth.password != null) {\n        throw new MongoParseError(`Password not allowed for mechanism \\`${authMechanism}\\``);\n      }\n\n      if (authSource != null && authSource !== '$external') {\n        throw new MongoParseError(\n          `Invalid source \\`${authSource}\\` for mechanism \\`${authMechanism}\\` specified.`\n        );\n      }\n\n      parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n    }\n\n    if (authMechanism === 'PLAIN') {\n      if (parsed.auth && parsed.auth.db == null) {\n        parsed.auth = Object.assign({}, parsed.auth, { db: '$external' });\n      }\n    }\n  }\n\n  // default to `admin` if nothing else was resolved\n  if (parsed.auth && parsed.auth.db == null) {\n    parsed.auth = Object.assign({}, parsed.auth, { db: 'admin' });\n  }\n\n  return parsed;\n}\n\n/**\n * Parses a query string according the connection string spec.\n *\n * @param {String} query The query string to parse\n * @param {object} [options] The options used for options parsing\n * @return {Object|Error} The parsed query string as an object, or an error if one was encountered\n */\nfunction parseQueryString(query, options) {\n  const result = {};\n  let parsedQueryString = qs.parse(query);\n\n  checkTLSOptions(parsedQueryString);\n\n  for (const key in parsedQueryString) {\n    const value = parsedQueryString[key];\n    if (value === '' || value == null) {\n      throw new MongoParseError('Incomplete key value pair for option');\n    }\n\n    const normalizedKey = key.toLowerCase();\n    const parsedValue = FILE_PATH_OPTIONS.has(normalizedKey)\n      ? value\n      : parseQueryStringItemValue(normalizedKey, value);\n    applyConnectionStringOption(result, normalizedKey, parsedValue, options);\n  }\n\n  // special cases for known deprecated options\n  if (result.wtimeout && result.wtimeoutms) {\n    delete result.wtimeout;\n    emitWarningOnce('Unsupported option `wtimeout` specified');\n  }\n\n  return Object.keys(result).length ? result : null;\n}\n\n/// Adds support for modern `tls` variants of out `ssl` options\nfunction translateTLSOptions(queryString) {\n  if (queryString.tls) {\n    queryString.ssl = queryString.tls;\n  }\n\n  if (queryString.tlsInsecure) {\n    queryString.checkServerIdentity = false;\n    queryString.sslValidate = false;\n  } else {\n    Object.assign(queryString, {\n      checkServerIdentity: queryString.tlsAllowInvalidHostnames ? false : true,\n      sslValidate: queryString.tlsAllowInvalidCertificates ? false : true\n    });\n  }\n\n  if (queryString.tlsCAFile) {\n    queryString.ssl = true;\n    queryString.sslCA = queryString.tlsCAFile;\n  }\n\n  if (queryString.tlsCertificateKeyFile) {\n    queryString.ssl = true;\n    if (queryString.tlsCertificateFile) {\n      queryString.sslCert = queryString.tlsCertificateFile;\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n    } else {\n      queryString.sslKey = queryString.tlsCertificateKeyFile;\n      queryString.sslCert = queryString.tlsCertificateKeyFile;\n    }\n  }\n\n  if (queryString.tlsCertificateKeyFilePassword) {\n    queryString.ssl = true;\n    queryString.sslPass = queryString.tlsCertificateKeyFilePassword;\n  }\n\n  return queryString;\n}\n\n/**\n * Checks a query string for invalid tls options according to the URI options spec.\n *\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n */\nfunction checkTLSOptions(queryString) {\n  const queryStringKeys = Object.keys(queryString);\n  if (\n    queryStringKeys.indexOf('tlsInsecure') !== -1 &&\n    (queryStringKeys.indexOf('tlsAllowInvalidCertificates') !== -1 ||\n      queryStringKeys.indexOf('tlsAllowInvalidHostnames') !== -1)\n  ) {\n    throw new MongoParseError(\n      'The `tlsInsecure` option cannot be used with `tlsAllowInvalidCertificates` or `tlsAllowInvalidHostnames`.'\n    );\n  }\n\n  const tlsValue = assertTlsOptionsAreEqual('tls', queryString, queryStringKeys);\n  const sslValue = assertTlsOptionsAreEqual('ssl', queryString, queryStringKeys);\n\n  if (tlsValue != null && sslValue != null) {\n    if (tlsValue !== sslValue) {\n      throw new MongoParseError('All values of `tls` and `ssl` must be the same.');\n    }\n  }\n}\n\n/**\n * Checks a query string to ensure all tls/ssl options are the same.\n *\n * @param {string} key The key (tls or ssl) to check\n * @param {string} queryString The query string to check\n * @throws {MongoParseError}\n * @return The value of the tls/ssl option\n */\nfunction assertTlsOptionsAreEqual(optionName, queryString, queryStringKeys) {\n  const queryStringHasTLSOption = queryStringKeys.indexOf(optionName) !== -1;\n\n  let optionValue;\n  if (Array.isArray(queryString[optionName])) {\n    optionValue = queryString[optionName][0];\n  } else {\n    optionValue = queryString[optionName];\n  }\n\n  if (queryStringHasTLSOption) {\n    if (Array.isArray(queryString[optionName])) {\n      const firstValue = queryString[optionName][0];\n      queryString[optionName].forEach(tlsValue => {\n        if (tlsValue !== firstValue) {\n          throw new MongoParseError(`All values of ${optionName} must be the same.`);\n        }\n      });\n    }\n  }\n\n  return optionValue;\n}\n\nconst PROTOCOL_MONGODB = 'mongodb';\nconst PROTOCOL_MONGODB_SRV = 'mongodb+srv';\nconst SUPPORTED_PROTOCOLS = [PROTOCOL_MONGODB, PROTOCOL_MONGODB_SRV];\n\n/**\n * Parses a MongoDB connection string\n *\n * @param {*} uri the MongoDB connection string to parse\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.caseTranslate] Whether the parser should translate options back into camelCase after normalization\n * @param {parseCallback} callback\n */\nfunction parseConnectionString(uri, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = Object.assign({}, { caseTranslate: true }, options);\n\n  // Check for bad uris before we parse\n  try {\n    URL.parse(uri);\n  } catch (e) {\n    return callback(new MongoParseError('URI malformed, cannot be parsed'));\n  }\n\n  const cap = uri.match(HOSTS_RX);\n  if (!cap) {\n    return callback(new MongoParseError('Invalid connection string'));\n  }\n\n  const protocol = cap[1];\n  if (SUPPORTED_PROTOCOLS.indexOf(protocol) === -1) {\n    return callback(new MongoParseError('Invalid protocol provided'));\n  }\n\n  const dbAndQuery = cap[4].split('?');\n  const db = dbAndQuery.length > 0 ? dbAndQuery[0] : null;\n  const query = dbAndQuery.length > 1 ? dbAndQuery[1] : null;\n\n  let parsedOptions;\n  try {\n    parsedOptions = parseQueryString(query, options);\n  } catch (parseError) {\n    return callback(parseError);\n  }\n\n  parsedOptions = Object.assign({}, parsedOptions, options);\n\n  if (protocol === PROTOCOL_MONGODB_SRV) {\n    return parseSrvConnectionString(uri, parsedOptions, callback);\n  }\n\n  const auth = { username: null, password: null, db: db && db !== '' ? qs.unescape(db) : null };\n  if (parsedOptions.auth) {\n    // maintain support for legacy options passed into `MongoClient`\n    if (parsedOptions.auth.username) auth.username = parsedOptions.auth.username;\n    if (parsedOptions.auth.user) auth.username = parsedOptions.auth.user;\n    if (parsedOptions.auth.password) auth.password = parsedOptions.auth.password;\n  } else {\n    if (parsedOptions.username) auth.username = parsedOptions.username;\n    if (parsedOptions.user) auth.username = parsedOptions.user;\n    if (parsedOptions.password) auth.password = parsedOptions.password;\n  }\n\n  if (cap[4].split('?')[0].indexOf('@') !== -1) {\n    return callback(new MongoParseError('Unescaped slash in userinfo section'));\n  }\n\n  const authorityParts = cap[3].split('@');\n  if (authorityParts.length > 2) {\n    return callback(new MongoParseError('Unescaped at-sign in authority section'));\n  }\n\n  if (authorityParts[0] == null || authorityParts[0] === '') {\n    return callback(new MongoParseError('No username provided in authority section'));\n  }\n\n  if (authorityParts.length > 1) {\n    const authParts = authorityParts.shift().split(':');\n    if (authParts.length > 2) {\n      return callback(new MongoParseError('Unescaped colon in authority section'));\n    }\n\n    if (authParts[0] === '') {\n      return callback(new MongoParseError('Invalid empty username provided'));\n    }\n\n    if (!auth.username) auth.username = qs.unescape(authParts[0]);\n    if (!auth.password) auth.password = authParts[1] ? qs.unescape(authParts[1]) : null;\n  }\n\n  let hostParsingError = null;\n  const hosts = authorityParts\n    .shift()\n    .split(',')\n    .map(host => {\n      let parsedHost = URL.parse(`mongodb://${host}`);\n      if (parsedHost.path === '/:') {\n        hostParsingError = new MongoParseError('Double colon in host identifier');\n        return null;\n      }\n\n      // heuristically determine if we're working with a domain socket\n      if (host.match(/\\.sock/)) {\n        parsedHost.hostname = qs.unescape(host);\n        parsedHost.port = null;\n      }\n\n      if (Number.isNaN(parsedHost.port)) {\n        hostParsingError = new MongoParseError('Invalid port (non-numeric string)');\n        return;\n      }\n\n      const result = {\n        host: parsedHost.hostname,\n        port: parsedHost.port ? parseInt(parsedHost.port) : 27017\n      };\n\n      if (result.port === 0) {\n        hostParsingError = new MongoParseError('Invalid port (zero) with hostname');\n        return;\n      }\n\n      if (result.port > 65535) {\n        hostParsingError = new MongoParseError('Invalid port (larger than 65535) with hostname');\n        return;\n      }\n\n      if (result.port < 0) {\n        hostParsingError = new MongoParseError('Invalid port (negative number)');\n        return;\n      }\n\n      return result;\n    })\n    .filter(host => !!host);\n\n  if (hostParsingError) {\n    return callback(hostParsingError);\n  }\n\n  if (hosts.length === 0 || hosts[0].host === '' || hosts[0].host === null) {\n    return callback(new MongoParseError('No hostname or hostnames provided in connection string'));\n  }\n\n  const directConnection = !!parsedOptions.directConnection;\n  if (directConnection && hosts.length !== 1) {\n    // If the option is set to true, the driver MUST validate that there is exactly one host given\n    // in the host list in the URI, and fail client creation otherwise.\n    return callback(new MongoParseError('directConnection option requires exactly one host'));\n  }\n\n  // NOTE: this behavior will go away in v4.0, we will always auto discover there\n  if (\n    parsedOptions.directConnection == null &&\n    hosts.length === 1 &&\n    parsedOptions.replicaSet == null\n  ) {\n    parsedOptions.directConnection = true;\n  }\n\n  const result = {\n    hosts: hosts,\n    auth: auth.db || auth.username ? auth : null,\n    options: Object.keys(parsedOptions).length ? parsedOptions : null\n  };\n\n  if (result.auth && result.auth.db) {\n    result.defaultDatabase = result.auth.db;\n  } else {\n    result.defaultDatabase = 'test';\n  }\n\n  // support modern `tls` variants to SSL options\n  result.options = translateTLSOptions(result.options);\n\n  try {\n    applyAuthExpectations(result);\n  } catch (authError) {\n    return callback(authError);\n  }\n\n  callback(null, result);\n}\n\nmodule.exports = parseConnectionString;\n"],"names":["require$$0","require$$1","ReadPreference"],"mappings":"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"}