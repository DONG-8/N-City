{"version":3,"file":"aggregation_cursor.js","sources":["../../../../../../node_modules/mongodb/lib/aggregation_cursor.js"],"sourcesContent":["'use strict';\n\nconst MongoError = require('./core').MongoError;\nconst Cursor = require('./cursor');\nconst CursorState = require('./core/cursor').CursorState;\n\n/**\n * @fileOverview The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n *\n * **AGGREGATIONCURSOR Cannot directly be instantiated**\n * @example\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Insert a bunch of documents\n *   col.insert([{a:1, b:1}\n *     , {a:2, b:2}, {a:3, b:3}\n *     , {a:4, b:4}], {w:1}, function(err, result) {\n *     test.equal(null, err);\n *     // Show that duplicate records got dropped\n *     col.aggregation({}, {cursor: {}}).toArray(function(err, items) {\n *       test.equal(null, err);\n *       test.equal(4, items.length);\n *       client.close();\n *     });\n *   });\n * });\n */\n\n/**\n * Namespace provided by the browser.\n * @external Readable\n */\n\n/**\n * Creates a new Aggregation Cursor instance (INTERNAL TYPE, do not instantiate directly)\n * @class AggregationCursor\n * @extends external:Readable\n * @fires AggregationCursor#data\n * @fires AggregationCursor#end\n * @fires AggregationCursor#close\n * @fires AggregationCursor#readable\n * @return {AggregationCursor} an AggregationCursor instance.\n */\nclass AggregationCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   * @method\n   * @param {number} value The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n   * @throws {MongoError}\n   * @return {AggregationCursor}\n   */\n  batchSize(value) {\n    if (this.s.state === CursorState.CLOSED || this.isDead()) {\n      throw MongoError.create({ message: 'Cursor is closed', driver: true });\n    }\n\n    if (typeof value !== 'number') {\n      throw MongoError.create({ message: 'batchSize requires an integer', driver: true });\n    }\n\n    this.operation.options.batchSize = value;\n    this.setCursorBatchSize(value);\n    return this;\n  }\n\n  /**\n   * Add a geoNear stage to the aggregation pipeline\n   * @method\n   * @param {object} document The geoNear stage document.\n   * @return {AggregationCursor}\n   */\n  geoNear(document) {\n    this.operation.addToPipeline({ $geoNear: document });\n    return this;\n  }\n\n  /**\n   * Add a group stage to the aggregation pipeline\n   * @method\n   * @param {object} document The group stage document.\n   * @return {AggregationCursor}\n   */\n  group(document) {\n    this.operation.addToPipeline({ $group: document });\n    return this;\n  }\n\n  /**\n   * Add a limit stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state limit value.\n   * @return {AggregationCursor}\n   */\n  limit(value) {\n    this.operation.addToPipeline({ $limit: value });\n    return this;\n  }\n\n  /**\n   * Add a match stage to the aggregation pipeline\n   * @method\n   * @param {object} document The match stage document.\n   * @return {AggregationCursor}\n   */\n  match(document) {\n    this.operation.addToPipeline({ $match: document });\n    return this;\n  }\n\n  /**\n   * Add a maxTimeMS stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state maxTimeMS value.\n   * @return {AggregationCursor}\n   */\n  maxTimeMS(value) {\n    this.operation.options.maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Add a out stage to the aggregation pipeline\n   * @method\n   * @param {number} destination The destination name.\n   * @return {AggregationCursor}\n   */\n  out(destination) {\n    this.operation.addToPipeline({ $out: destination });\n    return this;\n  }\n\n  /**\n   * Add a project stage to the aggregation pipeline\n   * @method\n   * @param {object} document The project stage document.\n   * @return {AggregationCursor}\n   */\n  project(document) {\n    this.operation.addToPipeline({ $project: document });\n    return this;\n  }\n\n  /**\n   * Add a lookup stage to the aggregation pipeline\n   * @method\n   * @param {object} document The lookup stage document.\n   * @return {AggregationCursor}\n   */\n  lookup(document) {\n    this.operation.addToPipeline({ $lookup: document });\n    return this;\n  }\n\n  /**\n   * Add a redact stage to the aggregation pipeline\n   * @method\n   * @param {object} document The redact stage document.\n   * @return {AggregationCursor}\n   */\n  redact(document) {\n    this.operation.addToPipeline({ $redact: document });\n    return this;\n  }\n\n  /**\n   * Add a skip stage to the aggregation pipeline\n   * @method\n   * @param {number} value The state skip value.\n   * @return {AggregationCursor}\n   */\n  skip(value) {\n    this.operation.addToPipeline({ $skip: value });\n    return this;\n  }\n\n  /**\n   * Add a sort stage to the aggregation pipeline\n   * @method\n   * @param {object} document The sort stage document.\n   * @return {AggregationCursor}\n   */\n  sort(document) {\n    this.operation.addToPipeline({ $sort: document });\n    return this;\n  }\n\n  /**\n   * Add a unwind stage to the aggregation pipeline\n   * @method\n   * @param {(string|object)} field The unwind field name or stage document.\n   * @return {AggregationCursor}\n   */\n  unwind(field) {\n    this.operation.addToPipeline({ $unwind: field });\n    return this;\n  }\n\n  /**\n   * Return the cursor logger\n   * @method\n   * @return {Logger} return the cursor logger\n   * @ignore\n   */\n  getLogger() {\n    return this.logger;\n  }\n}\n\n// aliases\nAggregationCursor.prototype.get = AggregationCursor.prototype.toArray;\n\n/**\n * AggregationCursor stream data event, fired for each document in the cursor.\n *\n * @event AggregationCursor#data\n * @type {object}\n */\n\n/**\n * AggregationCursor stream end event\n *\n * @event AggregationCursor#end\n * @type {null}\n */\n\n/**\n * AggregationCursor stream close event\n *\n * @event AggregationCursor#close\n * @type {null}\n */\n\n/**\n * AggregationCursor stream readable event\n *\n * @event AggregationCursor#readable\n * @type {null}\n */\n\n/**\n * Get the next available document from the cursor, returns null if no more documents are available.\n * @function AggregationCursor.prototype.next\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Check if there is any document still available in the cursor\n * @function AggregationCursor.prototype.hasNext\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~toArrayResultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {object[]} documents All the documents the satisfy the cursor.\n */\n\n/**\n * Returns an array of documents. The caller is responsible for making sure that there\n * is enough memory to store the results. Note that the array only contain partial\n * results when this cursor had been previously accessed. In that case,\n * cursor.rewind() can be used to reset the cursor.\n * @method AggregationCursor.prototype.toArray\n * @param {AggregationCursor~toArrayResultCallback} [callback] The result callback.\n * @throws {MongoError}\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * The callback format for results\n * @callback AggregationCursor~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\n/**\n * Iterates over all the documents for this cursor. As with **{cursor.toArray}**,\n * not all of the elements will be iterated if this cursor had been previously accessed.\n * In that case, **{cursor.rewind}** can be used to reset the cursor. However, unlike\n * **{cursor.toArray}**, the cursor will only hold a maximum of batch size elements\n * at any given time if batch size is specified. Otherwise, the caller is responsible\n * for making sure that the entire result can fit the memory.\n * @method AggregationCursor.prototype.each\n * @deprecated\n * @param {AggregationCursor~resultCallback} callback The result callback.\n * @throws {MongoError}\n * @return {null}\n */\n\n/**\n * Close the cursor, sending a AggregationCursor command and emitting close.\n * @method AggregationCursor.prototype.close\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Is the cursor closed\n * @method AggregationCursor.prototype.isClosed\n * @return {boolean}\n */\n\n/**\n * Execute the explain for the cursor\n *\n * For backwards compatibility, a verbosity of true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n *\n * @method AggregationCursor.prototype.explain\n * @param {'queryPlanner'|'queryPlannerExtended'|'executionStats'|'allPlansExecution'|boolean} [verbosity=true] - An optional mode in which to run the explain.\n * @param {AggregationCursor~resultCallback} [callback] The result callback.\n * @return {Promise} returns Promise if no callback passed\n */\n\n/**\n * Clone the cursor\n * @function AggregationCursor.prototype.clone\n * @return {AggregationCursor}\n */\n\n/**\n * Resets the cursor\n * @function AggregationCursor.prototype.rewind\n * @return {AggregationCursor}\n */\n\n/**\n * The callback format for the forEach iterator method\n * @callback AggregationCursor~iteratorCallback\n * @param {Object} doc An emitted document for the iterator\n */\n\n/**\n * The callback error format for the forEach iterator method\n * @callback AggregationCursor~endCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n */\n\n/**\n * Iterates over all the documents for this cursor using the iterator, callback pattern.\n * @method AggregationCursor.prototype.forEach\n * @param {AggregationCursor~iteratorCallback} iterator The iteration callback.\n * @param {AggregationCursor~endCallback} callback The end callback.\n * @throws {MongoError}\n * @return {null}\n */\n\nmodule.exports = AggregationCursor;\n"],"names":["require$$0","require$$1","Cursor"],"mappings":"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"}