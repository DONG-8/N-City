{"version":3,"file":"monitor.js","sources":["../../../../../../../../node_modules/mongodb/lib/core/sdam/monitor.js"],"sourcesContent":["'use strict';\n\nconst ServerType = require('./common').ServerType;\nconst EventEmitter = require('events');\nconst connect = require('../connection/connect');\nconst Connection = require('../../cmap/connection').Connection;\nconst common = require('./common');\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst makeInterruptableAsyncInterval = require('../../utils').makeInterruptableAsyncInterval;\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\nconst now = require('../../utils').now;\n\nconst sdamEvents = require('./events');\nconst ServerHeartbeatStartedEvent = sdamEvents.ServerHeartbeatStartedEvent;\nconst ServerHeartbeatSucceededEvent = sdamEvents.ServerHeartbeatSucceededEvent;\nconst ServerHeartbeatFailedEvent = sdamEvents.ServerHeartbeatFailedEvent;\n\nconst kServer = Symbol('server');\nconst kMonitorId = Symbol('monitorId');\nconst kConnection = Symbol('connection');\nconst kCancellationToken = Symbol('cancellationToken');\nconst kRTTPinger = Symbol('rttPinger');\nconst kRoundTripTime = Symbol('roundTripTime');\n\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_IDLE = 'idle';\nconst STATE_MONITORING = 'monitoring';\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_IDLE, STATE_CLOSED],\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_MONITORING],\n  [STATE_IDLE]: [STATE_IDLE, STATE_MONITORING, STATE_CLOSING],\n  [STATE_MONITORING]: [STATE_MONITORING, STATE_IDLE, STATE_CLOSING]\n});\n\nconst INVALID_REQUEST_CHECK_STATES = new Set([STATE_CLOSING, STATE_CLOSED, STATE_MONITORING]);\n\nfunction isInCloseState(monitor) {\n  return monitor.s.state === STATE_CLOSED || monitor.s.state === STATE_CLOSING;\n}\n\nclass Monitor extends EventEmitter {\n  constructor(server, options) {\n    super(options);\n\n    this[kServer] = server;\n    this[kConnection] = undefined;\n    this[kCancellationToken] = new EventEmitter();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kMonitorId] = null;\n    this.s = {\n      state: STATE_CLOSED\n    };\n\n    this.address = server.description.address;\n    this.options = Object.freeze({\n      connectTimeoutMS:\n        typeof options.connectionTimeout === 'number'\n          ? options.connectionTimeout\n          : typeof options.connectTimeoutMS === 'number'\n          ? options.connectTimeoutMS\n          : 10000,\n      heartbeatFrequencyMS:\n        typeof options.heartbeatFrequencyMS === 'number' ? options.heartbeatFrequencyMS : 10000,\n      minHeartbeatFrequencyMS:\n        typeof options.minHeartbeatFrequencyMS === 'number' ? options.minHeartbeatFrequencyMS : 500\n    });\n\n    // TODO: refactor this to pull it directly from the pool, requires new ConnectionPool integration\n    const connectOptions = Object.assign(\n      {\n        id: '<monitor>',\n        host: server.description.host,\n        port: server.description.port,\n        bson: server.s.bson,\n        connectionType: Connection\n      },\n      server.s.options,\n      this.options,\n\n      // force BSON serialization options\n      {\n        raw: false,\n        promoteLongs: true,\n        promoteValues: true,\n        promoteBuffers: true\n      }\n    );\n\n    // ensure no authentication is used for monitoring\n    delete connectOptions.credentials;\n\n    // ensure encryption is not requested for monitoring\n    delete connectOptions.autoEncrypter;\n\n    this.connectOptions = Object.freeze(connectOptions);\n  }\n\n  connect() {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    // start\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptableAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS,\n      immediate: true\n    });\n  }\n\n  requestCheck() {\n    if (INVALID_REQUEST_CHECK_STATES.has(this.s.state)) {\n      return;\n    }\n\n    this[kMonitorId].wake();\n  }\n\n  reset() {\n    const topologyVersion = this[kServer].description.topologyVersion;\n    if (isInCloseState(this) || topologyVersion == null) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // restart monitor\n    stateTransition(this, STATE_IDLE);\n\n    // restart monitoring\n    const heartbeatFrequencyMS = this.options.heartbeatFrequencyMS;\n    const minHeartbeatFrequencyMS = this.options.minHeartbeatFrequencyMS;\n    this[kMonitorId] = makeInterruptableAsyncInterval(monitorServer(this), {\n      interval: heartbeatFrequencyMS,\n      minInterval: minHeartbeatFrequencyMS\n    });\n  }\n\n  close() {\n    if (isInCloseState(this)) {\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    resetMonitorState(this);\n\n    // close monitor\n    this.emit('close');\n    stateTransition(this, STATE_CLOSED);\n  }\n}\n\nfunction resetMonitorState(monitor) {\n  if (monitor[kMonitorId]) {\n    monitor[kMonitorId].stop();\n    monitor[kMonitorId] = null;\n  }\n\n  if (monitor[kRTTPinger]) {\n    monitor[kRTTPinger].close();\n    monitor[kRTTPinger] = undefined;\n  }\n\n  monitor[kCancellationToken].emit('cancel');\n  if (monitor[kMonitorId]) {\n    clearTimeout(monitor[kMonitorId]);\n    monitor[kMonitorId] = undefined;\n  }\n\n  if (monitor[kConnection]) {\n    monitor[kConnection].destroy({ force: true });\n  }\n}\n\nfunction checkServer(monitor, callback) {\n  let start = now();\n  monitor.emit('serverHeartbeatStarted', new ServerHeartbeatStartedEvent(monitor.address));\n\n  function failureHandler(err) {\n    if (monitor[kConnection]) {\n      monitor[kConnection].destroy({ force: true });\n      monitor[kConnection] = undefined;\n    }\n\n    monitor.emit(\n      'serverHeartbeatFailed',\n      new ServerHeartbeatFailedEvent(calculateDurationInMs(start), err, monitor.address)\n    );\n\n    monitor.emit('resetServer', err);\n    monitor.emit('resetConnectionPool');\n    callback(err);\n  }\n\n  if (monitor[kConnection] != null && !monitor[kConnection].closed) {\n    const connectTimeoutMS = monitor.options.connectTimeoutMS;\n    const maxAwaitTimeMS = monitor.options.heartbeatFrequencyMS;\n    const topologyVersion = monitor[kServer].description.topologyVersion;\n    const isAwaitable = topologyVersion != null;\n\n    const cmd = { ismaster: true };\n    const options = { socketTimeout: connectTimeoutMS };\n\n    if (isAwaitable) {\n      cmd.maxAwaitTimeMS = maxAwaitTimeMS;\n      cmd.topologyVersion = makeTopologyVersion(topologyVersion);\n      if (connectTimeoutMS) {\n        options.socketTimeout = connectTimeoutMS + maxAwaitTimeMS;\n      }\n      options.exhaustAllowed = true;\n      if (monitor[kRTTPinger] == null) {\n        monitor[kRTTPinger] = new RTTPinger(monitor[kCancellationToken], monitor.connectOptions);\n      }\n    }\n\n    monitor[kConnection].command('admin.$cmd', cmd, options, (err, result) => {\n      if (err) {\n        failureHandler(err);\n        return;\n      }\n\n      const isMaster = result.result;\n      const rttPinger = monitor[kRTTPinger];\n\n      const duration =\n        isAwaitable && rttPinger ? rttPinger.roundTripTime : calculateDurationInMs(start);\n\n      monitor.emit(\n        'serverHeartbeatSucceeded',\n        new ServerHeartbeatSucceededEvent(duration, isMaster, monitor.address)\n      );\n\n      // if we are using the streaming protocol then we immediately issue another `started`\n      // event, otherwise the \"check\" is complete and return to the main monitor loop\n      if (isAwaitable && isMaster.topologyVersion) {\n        monitor.emit('serverHeartbeatStarted', new ServerHeartbeatStartedEvent(monitor.address));\n        start = now();\n      } else {\n        if (monitor[kRTTPinger]) {\n          monitor[kRTTPinger].close();\n          monitor[kRTTPinger] = undefined;\n        }\n\n        callback(undefined, isMaster);\n      }\n    });\n\n    return;\n  }\n\n  // connecting does an implicit `ismaster`\n  connect(monitor.connectOptions, monitor[kCancellationToken], (err, conn) => {\n    if (conn && isInCloseState(monitor)) {\n      conn.destroy({ force: true });\n      return;\n    }\n\n    if (err) {\n      monitor[kConnection] = undefined;\n\n      // we already reset the connection pool on network errors in all cases\n      if (!(err instanceof MongoNetworkError)) {\n        monitor.emit('resetConnectionPool');\n      }\n\n      failureHandler(err);\n      return;\n    }\n\n    monitor[kConnection] = conn;\n    monitor.emit(\n      'serverHeartbeatSucceeded',\n      new ServerHeartbeatSucceededEvent(\n        calculateDurationInMs(start),\n        conn.ismaster,\n        monitor.address\n      )\n    );\n\n    callback(undefined, conn.ismaster);\n  });\n}\n\nfunction monitorServer(monitor) {\n  return callback => {\n    stateTransition(monitor, STATE_MONITORING);\n    function done() {\n      if (!isInCloseState(monitor)) {\n        stateTransition(monitor, STATE_IDLE);\n      }\n\n      callback();\n    }\n\n    // TODO: the next line is a legacy event, remove in v4\n    process.nextTick(() => monitor.emit('monitoring', monitor[kServer]));\n\n    checkServer(monitor, (err, isMaster) => {\n      if (err) {\n        // otherwise an error occured on initial discovery, also bail\n        if (monitor[kServer].description.type === ServerType.Unknown) {\n          monitor.emit('resetServer', err);\n          return done();\n        }\n      }\n\n      // if the check indicates streaming is supported, immediately reschedule monitoring\n      if (isMaster && isMaster.topologyVersion) {\n        setTimeout(() => {\n          if (!isInCloseState(monitor)) {\n            monitor[kMonitorId].wake();\n          }\n        });\n      }\n\n      done();\n    });\n  };\n}\n\nfunction makeTopologyVersion(tv) {\n  return {\n    processId: tv.processId,\n    counter: BSON.Long.fromNumber(tv.counter)\n  };\n}\n\nclass RTTPinger {\n  constructor(cancellationToken, options) {\n    this[kConnection] = null;\n    this[kCancellationToken] = cancellationToken;\n    this[kRoundTripTime] = 0;\n    this.closed = false;\n\n    const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n    this[kMonitorId] = setTimeout(() => measureRoundTripTime(this, options), heartbeatFrequencyMS);\n  }\n\n  get roundTripTime() {\n    return this[kRoundTripTime];\n  }\n\n  close() {\n    this.closed = true;\n\n    clearTimeout(this[kMonitorId]);\n    this[kMonitorId] = undefined;\n\n    if (this[kConnection]) {\n      this[kConnection].destroy({ force: true });\n    }\n  }\n}\n\nfunction measureRoundTripTime(rttPinger, options) {\n  const start = now();\n  const cancellationToken = rttPinger[kCancellationToken];\n  const heartbeatFrequencyMS = options.heartbeatFrequencyMS;\n  if (rttPinger.closed) {\n    return;\n  }\n\n  function measureAndReschedule(conn) {\n    if (rttPinger.closed) {\n      conn.destroy({ force: true });\n      return;\n    }\n\n    if (rttPinger[kConnection] == null) {\n      rttPinger[kConnection] = conn;\n    }\n\n    rttPinger[kRoundTripTime] = calculateDurationInMs(start);\n    rttPinger[kMonitorId] = setTimeout(\n      () => measureRoundTripTime(rttPinger, options),\n      heartbeatFrequencyMS\n    );\n  }\n\n  if (rttPinger[kConnection] == null) {\n    connect(options, cancellationToken, (err, conn) => {\n      if (err) {\n        rttPinger[kConnection] = undefined;\n        rttPinger[kRoundTripTime] = 0;\n        return;\n      }\n\n      measureAndReschedule(conn);\n    });\n\n    return;\n  }\n\n  rttPinger[kConnection].command('admin.$cmd', { ismaster: 1 }, err => {\n    if (err) {\n      rttPinger[kConnection] = undefined;\n      rttPinger[kRoundTripTime] = 0;\n      return;\n    }\n\n    measureAndReschedule();\n  });\n}\n\nmodule.exports = {\n  Monitor\n};\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","sdamEvents","EventEmitter"],"mappings":"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"}