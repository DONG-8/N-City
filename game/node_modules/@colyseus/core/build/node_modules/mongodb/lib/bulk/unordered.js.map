{"version":3,"file":"unordered.js","sources":["../../../../../../../node_modules/mongodb/lib/bulk/unordered.js"],"sourcesContent":["'use strict';\n\nconst common = require('./common');\nconst BulkOperationBase = common.BulkOperationBase;\nconst Batch = common.Batch;\nconst bson = common.bson;\nconst utils = require('../utils');\nconst toError = utils.toError;\n\n/**\n * Add to internal list of Operations\n *\n * @ignore\n * @param {UnorderedBulkOperation} bulkOperation\n * @param {number} docType number indicating the document type\n * @param {object} document\n * @return {UnorderedBulkOperation}\n */\nfunction addToOperationsList(bulkOperation, docType, document) {\n  // Get the bsonSize\n  const bsonSize = bson.calculateObjectSize(document, {\n    checkKeys: false,\n\n    // Since we don't know what the user selected for BSON options here,\n    // err on the safe side, and check the size with ignoreUndefined: false.\n    ignoreUndefined: false\n  });\n  // Throw error if the doc is bigger than the max BSON size\n  if (bsonSize >= bulkOperation.s.maxBsonObjectSize)\n    throw toError('document is larger than the maximum size ' + bulkOperation.s.maxBsonObjectSize);\n  // Holds the current batch\n  bulkOperation.s.currentBatch = null;\n  // Get the right type of batch\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentInsertBatch;\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentUpdateBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentBatch = bulkOperation.s.currentRemoveBatch;\n  }\n\n  const maxKeySize = bulkOperation.s.maxKeySize;\n\n  // Create a new batch object if we don't have a current one\n  if (bulkOperation.s.currentBatch == null)\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n\n  // Check if we need to create a new batch\n  if (\n    // New batch if we exceed the max batch op size\n    bulkOperation.s.currentBatch.size + 1 >= bulkOperation.s.maxWriteBatchSize ||\n    // New batch if we exceed the maxBatchSizeBytes. Only matters if batch already has a doc,\n    // since we can't sent an empty batch\n    (bulkOperation.s.currentBatch.size > 0 &&\n      bulkOperation.s.currentBatch.sizeBytes + maxKeySize + bsonSize >=\n        bulkOperation.s.maxBatchSizeBytes) ||\n    // New batch if the new op does not have the same op type as the current batch\n    bulkOperation.s.currentBatch.batchType !== docType\n  ) {\n    // Save the batch to the execution stack\n    bulkOperation.s.batches.push(bulkOperation.s.currentBatch);\n\n    // Create a new batch\n    bulkOperation.s.currentBatch = new Batch(docType, bulkOperation.s.currentIndex);\n  }\n\n  // We have an array of documents\n  if (Array.isArray(document)) {\n    throw toError('operation passed in cannot be an Array');\n  }\n\n  bulkOperation.s.currentBatch.operations.push(document);\n  bulkOperation.s.currentBatch.originalIndexes.push(bulkOperation.s.currentIndex);\n  bulkOperation.s.currentIndex = bulkOperation.s.currentIndex + 1;\n\n  // Save back the current Batch to the right type\n  if (docType === common.INSERT) {\n    bulkOperation.s.currentInsertBatch = bulkOperation.s.currentBatch;\n    bulkOperation.s.bulkResult.insertedIds.push({\n      index: bulkOperation.s.bulkResult.insertedIds.length,\n      _id: document._id\n    });\n  } else if (docType === common.UPDATE) {\n    bulkOperation.s.currentUpdateBatch = bulkOperation.s.currentBatch;\n  } else if (docType === common.REMOVE) {\n    bulkOperation.s.currentRemoveBatch = bulkOperation.s.currentBatch;\n  }\n\n  // Update current batch size\n  bulkOperation.s.currentBatch.size += 1;\n  bulkOperation.s.currentBatch.sizeBytes += maxKeySize + bsonSize;\n\n  // Return bulkOperation\n  return bulkOperation;\n}\n\n/**\n * Create a new UnorderedBulkOperation instance (INTERNAL TYPE, do not instantiate directly)\n * @class\n * @extends BulkOperationBase\n * @property {number} length Get the number of operations in the bulk.\n * @return {UnorderedBulkOperation} a UnorderedBulkOperation instance.\n */\nclass UnorderedBulkOperation extends BulkOperationBase {\n  constructor(topology, collection, options) {\n    options = options || {};\n    options = Object.assign(options, { addToOperationsList });\n\n    super(topology, collection, options, false);\n  }\n\n  handleWriteError(callback, writeResult) {\n    if (this.s.batches.length) {\n      return false;\n    }\n\n    return super.handleWriteError(callback, writeResult);\n  }\n}\n\n/**\n * Returns an unordered batch object\n * @ignore\n */\nfunction initializeUnorderedBulkOp(topology, collection, options) {\n  return new UnorderedBulkOperation(topology, collection, options);\n}\n\ninitializeUnorderedBulkOp.UnorderedBulkOperation = UnorderedBulkOperation;\nmodule.exports = initializeUnorderedBulkOp;\nmodule.exports.Bulk = UnorderedBulkOperation;\n"],"names":[],"mappings":"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"}