import operation from './operation.mjs';
import command from './command.mjs';
import utils from '../utils.mjs';

const Aspect = operation.Aspect;
const defineAspects = operation.defineAspects;

const applyWriteConcern = utils.applyWriteConcern;
const handleCallback = utils.handleCallback;

class DropIndexOperation extends command {
  constructor(collection, indexName, options) {
    super(collection.s.db, options, collection);

    this.collection = collection;
    this.indexName = indexName;
  }

  _buildCommand() {
    const collection = this.collection;
    const indexName = this.indexName;
    const options = this.options;

    let cmd = { dropIndexes: collection.collectionName, index: indexName };

    // Decorate command with writeConcern if supported
    cmd = applyWriteConcern(cmd, { db: collection.s.db, collection }, options);

    return cmd;
  }

  execute(callback) {
    // Execute command
    super.execute((err, result) => {
      if (typeof callback !== 'function') return;
      if (err) return handleCallback(callback, err, null);
      handleCallback(callback, null, result);
    });
  }
}

defineAspects(DropIndexOperation, Aspect.WRITE_OPERATION);

var drop_index = DropIndexOperation;

export default drop_index;
//# sourceMappingURL=drop_index.mjs.map
