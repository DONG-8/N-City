{"version":3,"file":"common.js","sources":["../../../../../../../node_modules/mongodb/lib/bulk/common.js"],"sourcesContent":["'use strict';\n\nconst Long = require('../core').BSON.Long;\nconst MongoError = require('../core').MongoError;\nconst ObjectID = require('../core').BSON.ObjectID;\nconst BSON = require('../core').BSON;\nconst MongoWriteConcernError = require('../core').MongoWriteConcernError;\nconst emitWarningOnce = require('../utils').emitWarningOnce;\nconst toError = require('../utils').toError;\nconst handleCallback = require('../utils').handleCallback;\nconst applyRetryableWrites = require('../utils').applyRetryableWrites;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst executeLegacyOperation = require('../utils').executeLegacyOperation;\nconst isPromiseLike = require('../utils').isPromiseLike;\nconst hasAtomicOperators = require('../utils').hasAtomicOperators;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\n// Error codes\nconst WRITE_CONCERN_ERROR = 64;\n\n// Insert types\nconst INSERT = 1;\nconst UPDATE = 2;\nconst REMOVE = 3;\n\nconst bson = new BSON([\n  BSON.Binary,\n  BSON.Code,\n  BSON.DBRef,\n  BSON.Decimal128,\n  BSON.Double,\n  BSON.Int32,\n  BSON.Long,\n  BSON.Map,\n  BSON.MaxKey,\n  BSON.MinKey,\n  BSON.ObjectId,\n  BSON.BSONRegExp,\n  BSON.Symbol,\n  BSON.Timestamp\n]);\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n * @ignore\n */\nclass Batch {\n  constructor(batchType, originalZeroIndex) {\n    this.originalZeroIndex = originalZeroIndex;\n    this.currentIndex = 0;\n    this.originalIndexes = [];\n    this.batchType = batchType;\n    this.operations = [];\n    this.size = 0;\n    this.sizeBytes = 0;\n  }\n}\n\n/**\n * @classdesc\n * The result of a bulk write.\n */\nclass BulkWriteResult {\n  /**\n   * Create a new BulkWriteResult instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(bulkResult) {\n    this.result = bulkResult;\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return typeof this.result.nInserted !== 'number' ? 0 : this.result.nInserted;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return typeof this.result.nMatched !== 'number' ? 0 : this.result.nMatched;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return typeof this.result.nModified !== 'number' ? 0 : this.result.nModified;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return typeof this.result.nRemoved !== 'number' ? 0 : this.result.nRemoved;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return !this.result.upserted ? 0 : this.result.upserted.length;\n  }\n\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    const upserted = {};\n    for (const doc of !this.result.upserted ? [] : this.result.upserted) {\n      upserted[doc.index] = doc._id;\n    }\n    return upserted;\n  }\n\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    const inserted = {};\n    for (const doc of !this.result.insertedIds ? [] : this.result.insertedIds) {\n      inserted[doc.index] = doc._id;\n    }\n    return inserted;\n  }\n\n  /**\n   * Evaluates to true if the bulk operation correctly executes\n   * @type {boolean}\n   */\n  get ok() {\n    return this.result.ok;\n  }\n\n  /**\n   * The number of inserted documents\n   * @type {number}\n   */\n  get nInserted() {\n    return this.result.nInserted;\n  }\n\n  /**\n   * Number of upserted documents\n   * @type {number}\n   */\n  get nUpserted() {\n    return this.result.nUpserted;\n  }\n\n  /**\n   * Number of matched documents\n   * @type {number}\n   */\n  get nMatched() {\n    return this.result.nMatched;\n  }\n\n  /**\n   * Number of documents updated physically on disk\n   * @type {number}\n   */\n  get nModified() {\n    return this.result.nModified;\n  }\n\n  /**\n   * Number of removed documents\n   * @type {number}\n   */\n  get nRemoved() {\n    return this.result.nRemoved;\n  }\n\n  /**\n   * Returns an array of all inserted ids\n   *\n   * @return {object[]}\n   */\n  getInsertedIds() {\n    return this.result.insertedIds;\n  }\n\n  /**\n   * Returns an array of all upserted ids\n   *\n   * @return {object[]}\n   */\n  getUpsertedIds() {\n    return this.result.upserted;\n  }\n\n  /**\n   * Returns the upserted id at the given index\n   *\n   * @param {number} index the number of the upserted id to return, returns undefined if no result for passed in index\n   * @return {object}\n   */\n  getUpsertedIdAt(index) {\n    return this.result.upserted[index];\n  }\n\n  /**\n   * Returns raw internal result\n   *\n   * @return {object}\n   */\n  getRawResponse() {\n    return this.result;\n  }\n\n  /**\n   * Returns true if the bulk operation contains a write error\n   *\n   * @return {boolean}\n   */\n  hasWriteErrors() {\n    return this.result.writeErrors.length > 0;\n  }\n\n  /**\n   * Returns the number of write errors off the bulk operation\n   *\n   * @return {number}\n   */\n  getWriteErrorCount() {\n    return this.result.writeErrors.length;\n  }\n\n  /**\n   * Returns a specific write error object\n   *\n   * @param {number} index of the write error to return, returns null if there is no result for passed in index\n   * @return {WriteError}\n   */\n  getWriteErrorAt(index) {\n    if (index < this.result.writeErrors.length) {\n      return this.result.writeErrors[index];\n    }\n    return null;\n  }\n\n  /**\n   * Retrieve all write errors\n   *\n   * @return {WriteError[]}\n   */\n  getWriteErrors() {\n    return this.result.writeErrors;\n  }\n\n  /**\n   * Retrieve lastOp if available\n   *\n   * @return {object}\n   */\n  getLastOp() {\n    return this.result.lastOp;\n  }\n\n  /**\n   * Retrieve the write concern error if any\n   *\n   * @return {WriteConcernError}\n   */\n  getWriteConcernError() {\n    if (this.result.writeConcernErrors.length === 0) {\n      return null;\n    } else if (this.result.writeConcernErrors.length === 1) {\n      // Return the error\n      return this.result.writeConcernErrors[0];\n    } else {\n      // Combine the errors\n      let errmsg = '';\n      for (let i = 0; i < this.result.writeConcernErrors.length; i++) {\n        const err = this.result.writeConcernErrors[i];\n        errmsg = errmsg + err.errmsg;\n\n        // TODO: Something better\n        if (i === 0) errmsg = errmsg + ' and ';\n      }\n\n      return new WriteConcernError({ errmsg: errmsg, code: WRITE_CONCERN_ERROR });\n    }\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return this.result;\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `BulkWriteResult(${this.toJSON(this.result)})`;\n  }\n\n  /**\n   * @return {boolean}\n   */\n  isOk() {\n    return this.result.ok === 1;\n  }\n}\n\n/**\n * @classdesc An error representing a failure by the server to apply the requested write concern to the bulk operation.\n */\nclass WriteConcernError {\n  /**\n   * Create a new WriteConcernError instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(err) {\n    this.err = err;\n  }\n\n  /**\n   * Write concern error code.\n   * @type {number}\n   */\n  get code() {\n    return this.err.code;\n  }\n\n  /**\n   * Write concern error message.\n   * @type {string}\n   */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return { code: this.err.code, errmsg: this.err.errmsg };\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `WriteConcernError(${this.err.errmsg})`;\n  }\n}\n\n/**\n * @classdesc An error that occurred during a BulkWrite on the server.\n */\nclass WriteError {\n  /**\n   * Create a new WriteError instance\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   */\n  constructor(err) {\n    this.err = err;\n  }\n\n  /**\n   * WriteError code.\n   * @type {number}\n   */\n  get code() {\n    return this.err.code;\n  }\n\n  /**\n   * WriteError original bulk operation index.\n   * @type {number}\n   */\n  get index() {\n    return this.err.index;\n  }\n\n  /**\n   * WriteError message.\n   * @type {string}\n   */\n  get errmsg() {\n    return this.err.errmsg;\n  }\n\n  /**\n   * Returns the underlying operation that caused the error\n   * @return {object}\n   */\n  getOperation() {\n    return this.err.op;\n  }\n\n  /**\n   * @return {object}\n   */\n  toJSON() {\n    return { code: this.err.code, index: this.err.index, errmsg: this.err.errmsg, op: this.err.op };\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return `WriteError(${JSON.stringify(this.toJSON())})`;\n  }\n}\n\n/**\n * Merges results into shared data structure\n * @ignore\n */\nfunction mergeBatchResults(batch, bulkResult, err, result) {\n  // If we have an error set the result to be the err object\n  if (err) {\n    result = err;\n  } else if (result && result.result) {\n    result = result.result;\n  } else if (result == null) {\n    return;\n  }\n\n  // Do we have a top level error stop processing and return\n  if (result.ok === 0 && bulkResult.ok === 1) {\n    bulkResult.ok = 0;\n\n    const writeError = {\n      index: 0,\n      code: result.code || 0,\n      errmsg: result.message,\n      op: batch.operations[0]\n    };\n\n    bulkResult.writeErrors.push(new WriteError(writeError));\n    return;\n  } else if (result.ok === 0 && bulkResult.ok === 0) {\n    return;\n  }\n\n  // Deal with opTime if available\n  if (result.opTime || result.lastOp) {\n    const opTime = result.lastOp || result.opTime;\n    let lastOpTS = null;\n    let lastOpT = null;\n\n    // We have a time stamp\n    if (opTime && opTime._bsontype === 'Timestamp') {\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTime.greaterThan(bulkResult.lastOp)) {\n        bulkResult.lastOp = opTime;\n      }\n    } else {\n      // Existing TS\n      if (bulkResult.lastOp) {\n        lastOpTS =\n          typeof bulkResult.lastOp.ts === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.ts)\n            : bulkResult.lastOp.ts;\n        lastOpT =\n          typeof bulkResult.lastOp.t === 'number'\n            ? Long.fromNumber(bulkResult.lastOp.t)\n            : bulkResult.lastOp.t;\n      }\n\n      // Current OpTime TS\n      const opTimeTS = typeof opTime.ts === 'number' ? Long.fromNumber(opTime.ts) : opTime.ts;\n      const opTimeT = typeof opTime.t === 'number' ? Long.fromNumber(opTime.t) : opTime.t;\n\n      // Compare the opTime's\n      if (bulkResult.lastOp == null) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.greaterThan(lastOpTS)) {\n        bulkResult.lastOp = opTime;\n      } else if (opTimeTS.equals(lastOpTS)) {\n        if (opTimeT.greaterThan(lastOpT)) {\n          bulkResult.lastOp = opTime;\n        }\n      }\n    }\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === INSERT && result.n) {\n    bulkResult.nInserted = bulkResult.nInserted + result.n;\n  }\n\n  // If we have an insert Batch type\n  if (batch.batchType === REMOVE && result.n) {\n    bulkResult.nRemoved = bulkResult.nRemoved + result.n;\n  }\n\n  let nUpserted = 0;\n\n  // We have an array of upserted values, we need to rewrite the indexes\n  if (Array.isArray(result.upserted)) {\n    nUpserted = result.upserted.length;\n\n    for (let i = 0; i < result.upserted.length; i++) {\n      bulkResult.upserted.push({\n        index: result.upserted[i].index + batch.originalZeroIndex,\n        _id: result.upserted[i]._id\n      });\n    }\n  } else if (result.upserted) {\n    nUpserted = 1;\n\n    bulkResult.upserted.push({\n      index: batch.originalZeroIndex,\n      _id: result.upserted\n    });\n  }\n\n  // If we have an update Batch type\n  if (batch.batchType === UPDATE && result.n) {\n    const nModified = result.nModified;\n    bulkResult.nUpserted = bulkResult.nUpserted + nUpserted;\n    bulkResult.nMatched = bulkResult.nMatched + (result.n - nUpserted);\n\n    if (typeof nModified === 'number') {\n      bulkResult.nModified = bulkResult.nModified + nModified;\n    } else {\n      bulkResult.nModified = null;\n    }\n  }\n\n  if (Array.isArray(result.writeErrors)) {\n    for (let i = 0; i < result.writeErrors.length; i++) {\n      const writeError = {\n        index: batch.originalIndexes[result.writeErrors[i].index],\n        code: result.writeErrors[i].code,\n        errmsg: result.writeErrors[i].errmsg,\n        op: batch.operations[result.writeErrors[i].index]\n      };\n\n      bulkResult.writeErrors.push(new WriteError(writeError));\n    }\n  }\n\n  if (result.writeConcernError) {\n    bulkResult.writeConcernErrors.push(new WriteConcernError(result.writeConcernError));\n  }\n}\n\nfunction executeCommands(bulkOperation, options, callback) {\n  if (bulkOperation.s.batches.length === 0) {\n    return handleCallback(callback, null, new BulkWriteResult(bulkOperation.s.bulkResult));\n  }\n\n  const batch = bulkOperation.s.batches.shift();\n\n  function resultHandler(err, result) {\n    // Error is a driver related error not a bulk op error, terminate\n    if (((err && err.driver) || (err && err.message)) && !(err instanceof MongoWriteConcernError)) {\n      return handleCallback(callback, err);\n    }\n\n    // If we have and error\n    if (err) err.ok = 0;\n    if (err instanceof MongoWriteConcernError) {\n      return handleMongoWriteConcernError(batch, bulkOperation.s.bulkResult, err, callback);\n    }\n\n    // Merge the results together\n    const writeResult = new BulkWriteResult(bulkOperation.s.bulkResult);\n    const mergeResult = mergeBatchResults(batch, bulkOperation.s.bulkResult, err, result);\n    if (mergeResult != null) {\n      return handleCallback(callback, null, writeResult);\n    }\n\n    if (bulkOperation.handleWriteError(callback, writeResult)) return;\n\n    // Execute the next command in line\n    executeCommands(bulkOperation, options, callback);\n  }\n\n  bulkOperation.finalOptionsHandler({ options, batch, resultHandler }, callback);\n}\n\n/**\n * handles write concern error\n *\n * @ignore\n * @param {object} batch\n * @param {object} bulkResult\n * @param {boolean} ordered\n * @param {WriteConcernError} err\n * @param {function} callback\n */\nfunction handleMongoWriteConcernError(batch, bulkResult, err, callback) {\n  mergeBatchResults(batch, bulkResult, null, err.result);\n\n  const wrappedWriteConcernError = new WriteConcernError({\n    errmsg: err.result.writeConcernError.errmsg,\n    code: err.result.writeConcernError.result\n  });\n  return handleCallback(\n    callback,\n    new BulkWriteError(toError(wrappedWriteConcernError), new BulkWriteResult(bulkResult)),\n    null\n  );\n}\n\n/**\n * @classdesc An error indicating an unsuccessful Bulk Write\n */\nclass BulkWriteError extends MongoError {\n  /**\n   * Creates a new BulkWriteError\n   *\n   * @param {Error|string|object} message The error message\n   * @param {BulkWriteResult} result The result of the bulk write operation\n   * @extends {MongoError}\n   */\n  constructor(error, result) {\n    const message = error.err || error.errmsg || error.errMessage || error;\n    super(message);\n\n    Object.assign(this, error);\n\n    this.name = 'BulkWriteError';\n    this.result = result;\n  }\n\n  /** Number of documents inserted. */\n  get insertedCount() {\n    return this.result.insertedCount;\n  }\n  /** Number of documents matched for update. */\n  get matchedCount() {\n    return this.result.matchedCount;\n  }\n  /** Number of documents modified. */\n  get modifiedCount() {\n    return this.result.modifiedCount;\n  }\n  /** Number of documents deleted. */\n  get deletedCount() {\n    return this.result.deletedCount;\n  }\n  /** Number of documents upserted. */\n  get upsertedCount() {\n    return this.result.upsertedCount;\n  }\n  /** Inserted document generated Id's, hash key is the index of the originating operation */\n  get insertedIds() {\n    return this.result.insertedIds;\n  }\n  /** Upserted document generated Id's, hash key is the index of the originating operation */\n  get upsertedIds() {\n    return this.result.upsertedIds;\n  }\n}\n\n/**\n * @classdesc A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n */\nclass FindOperators {\n  /**\n   * Creates a new FindOperators object.\n   *\n   * **NOTE:** Internal Type, do not instantiate directly\n   * @param {OrderedBulkOperation|UnorderedBulkOperation} bulkOperation\n   */\n  constructor(bulkOperation) {\n    this.s = bulkOperation.s;\n  }\n\n  /**\n   * Add a multiple update operation to the bulk operation\n   *\n   * @method\n   * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}\n   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  update(updateDocument) {\n    // Perform upsert\n    const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      u: updateDocument,\n      multi: true,\n      upsert: upsert\n    };\n\n    if (updateDocument.hint) {\n      document.hint = updateDocument.hint;\n    }\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, UPDATE, document);\n  }\n\n  /**\n   * Add a single update operation to the bulk operation\n   *\n   * @method\n   * @param {object} updateDocument An update field for an update operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-u u documentation}\n   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  updateOne(updateDocument) {\n    // Perform upsert\n    const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      u: updateDocument,\n      multi: false,\n      upsert: upsert\n    };\n\n    if (updateDocument.hint) {\n      document.hint = updateDocument.hint;\n    }\n\n    if (!hasAtomicOperators(updateDocument)) {\n      throw new TypeError('Update document requires atomic operators');\n    }\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, UPDATE, document);\n  }\n\n  /**\n   * Add a replace one operation to the bulk operation\n   *\n   * @method\n   * @param {object} replacement the new document to replace the existing one with\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  replaceOne(replacement) {\n    // Perform upsert\n    const upsert = typeof this.s.currentOp.upsert === 'boolean' ? this.s.currentOp.upsert : false;\n\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      u: replacement,\n      multi: false,\n      upsert: upsert\n    };\n\n    if (replacement.hint) {\n      document.hint = replacement.hint;\n    }\n\n    if (hasAtomicOperators(replacement)) {\n      throw new TypeError('Replacement document must not use atomic operators');\n    }\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, UPDATE, document);\n  }\n\n  /**\n   * Upsert modifier for update bulk operation, noting that this operation is an upsert.\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {FindOperators} reference to self\n   */\n  upsert() {\n    this.s.currentOp.upsert = true;\n    return this;\n  }\n\n  /**\n   * Add a delete one operation to the bulk operation\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  deleteOne() {\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      limit: 1\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, REMOVE, document);\n  }\n\n  /**\n   * Add a delete many operation to the bulk operation\n   *\n   * @method\n   * @throws {MongoError} If operation cannot be added to bulk write\n   * @return {OrderedBulkOperation|UnorderedBulkOperation} A reference to the parent BulkOperation\n   */\n  delete() {\n    // Establish the update command\n    const document = {\n      q: this.s.currentOp.selector,\n      limit: 0\n    };\n\n    // Clear out current Op\n    this.s.currentOp = null;\n    return this.s.options.addToOperationsList(this, REMOVE, document);\n  }\n\n  /**\n   * backwards compatability for deleteOne\n   * @deprecated\n   */\n  removeOne() {\n    emitWarningOnce('bulk operation `removeOne` has been deprecated, please use `deleteOne`');\n    return this.deleteOne();\n  }\n\n  /**\n   * backwards compatability for delete\n   * @deprecated\n   */\n  remove() {\n    emitWarningOnce('bulk operation `remove` has been deprecated, please use `delete`');\n    return this.delete();\n  }\n}\n\n/**\n * @classdesc Parent class to OrderedBulkOperation and UnorderedBulkOperation\n *\n * **NOTE:** Internal Type, do not instantiate directly\n */\nclass BulkOperationBase {\n  /**\n   * Create a new OrderedBulkOperation or UnorderedBulkOperation instance\n   * @property {number} length Get the number of operations in the bulk.\n   */\n  constructor(topology, collection, options, isOrdered) {\n    // determine whether bulkOperation is ordered or unordered\n    this.isOrdered = isOrdered;\n\n    options = options == null ? {} : options;\n    // TODO Bring from driver information in isMaster\n    // Get the namespace for the write operations\n    const namespace = collection.s.namespace;\n    // Used to mark operation as executed\n    const executed = false;\n\n    // Current item\n    const currentOp = null;\n\n    // Handle to the bson serializer, used to calculate running sizes\n    const bson = topology.bson;\n    // Set max byte size\n    const isMaster = topology.lastIsMaster();\n\n    // If we have autoEncryption on, batch-splitting must be done on 2mb chunks, but single documents\n    // over 2mb are still allowed\n    const usingAutoEncryption = !!(topology.s.options && topology.s.options.autoEncrypter);\n    const maxBsonObjectSize =\n      isMaster && isMaster.maxBsonObjectSize ? isMaster.maxBsonObjectSize : 1024 * 1024 * 16;\n    const maxBatchSizeBytes = usingAutoEncryption ? 1024 * 1024 * 2 : maxBsonObjectSize;\n    const maxWriteBatchSize =\n      isMaster && isMaster.maxWriteBatchSize ? isMaster.maxWriteBatchSize : 1000;\n\n    // Calculates the largest possible size of an Array key, represented as a BSON string\n    // element. This calculation:\n    //     1 byte for BSON type\n    //     # of bytes = length of (string representation of (maxWriteBatchSize - 1))\n    //   + 1 bytes for null terminator\n    const maxKeySize = (maxWriteBatchSize - 1).toString(10).length + 2;\n\n    // Final options for retryable writes and write concern\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, collection.s.db);\n    finalOptions = applyWriteConcern(finalOptions, { collection: collection }, options);\n    const writeConcern = finalOptions.writeConcern;\n\n    // Get the promiseLibrary\n    const promiseLibrary = options.promiseLibrary || Promise;\n\n    // Final results\n    const bulkResult = {\n      ok: 1,\n      writeErrors: [],\n      writeConcernErrors: [],\n      insertedIds: [],\n      nInserted: 0,\n      nUpserted: 0,\n      nMatched: 0,\n      nModified: 0,\n      nRemoved: 0,\n      upserted: []\n    };\n\n    // Internal state\n    this.s = {\n      // Final result\n      bulkResult: bulkResult,\n      // Current batch state\n      currentBatch: null,\n      currentIndex: 0,\n      // ordered specific\n      currentBatchSize: 0,\n      currentBatchSizeBytes: 0,\n      // unordered specific\n      currentInsertBatch: null,\n      currentUpdateBatch: null,\n      currentRemoveBatch: null,\n      batches: [],\n      // Write concern\n      writeConcern: writeConcern,\n      // Max batch size options\n      maxBsonObjectSize,\n      maxBatchSizeBytes,\n      maxWriteBatchSize,\n      maxKeySize,\n      // Namespace\n      namespace: namespace,\n      // BSON\n      bson: bson,\n      // Topology\n      topology: topology,\n      // Options\n      options: finalOptions,\n      // Current operation\n      currentOp: currentOp,\n      // Executed\n      executed: executed,\n      // Collection\n      collection: collection,\n      // Promise Library\n      promiseLibrary: promiseLibrary,\n      // Fundamental error\n      err: null,\n      // check keys\n      checkKeys: typeof options.checkKeys === 'boolean' ? options.checkKeys : true\n    };\n\n    // bypass Validation\n    if (options.bypassDocumentValidation === true) {\n      this.s.bypassDocumentValidation = true;\n    }\n  }\n\n  /**\n   * Add a single insert document to the bulk operation\n   *\n   * @param {object} document the document to insert\n   * @throws {MongoError}\n   * @return {BulkOperationBase} A reference to self\n   *\n   * @example\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   * // Adds three inserts to the bulkOp.\n   * bulkOp\n   *   .insert({ a: 1 })\n   *   .insert({ b: 2 })\n   *   .insert({ c: 3 });\n   * await bulkOp.execute();\n   */\n  insert(document) {\n    if (this.s.collection.s.db.options.forceServerObjectId !== true && document._id == null)\n      document._id = new ObjectID();\n    return this.s.options.addToOperationsList(this, INSERT, document);\n  }\n\n  /**\n   * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n   * Returns a builder object used to complete the definition of the operation.\n   *\n   * @method\n   * @param {object} selector The selector for the bulk operation. See {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-q q documentation}\n   * @throws {MongoError} if a selector is not specified\n   * @return {FindOperators} A helper object with which the write operation can be defined.\n   *\n   * @example\n   * const bulkOp = collection.initializeOrderedBulkOp();\n   *\n   * // Add an updateOne to the bulkOp\n   * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n   *\n   * // Add an updateMany to the bulkOp\n   * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n   *\n   * // Add an upsert\n   * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n   *\n   * // Add a deletion\n   * bulkOp.find({ g: 7 }).deleteOne();\n   *\n   * // Add a multi deletion\n   * bulkOp.find({ h: 8 }).delete();\n   *\n   * // Add a replaceOne\n   * bulkOp.find({ i: 9 }).replaceOne({ j: 10 });\n   *\n   * // Update using a pipeline (requires Mongodb 4.2 or higher)\n   * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n   *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n   * ]);\n   *\n   * // All of the ops will now be executed\n   * await bulkOp.execute();\n   */\n  find(selector) {\n    if (!selector) {\n      throw toError('Bulk find operation must specify a selector');\n    }\n\n    // Save a current selector\n    this.s.currentOp = {\n      selector: selector\n    };\n\n    return new FindOperators(this);\n  }\n\n  /**\n   * Specifies a raw operation to perform in the bulk write.\n   *\n   * @method\n   * @param {object} op The raw operation to perform.\n   * @param {object} [options.hint] An optional hint for query optimization. See the {@link https://docs.mongodb.com/manual/reference/command/update/#update-command-hint|update command} reference for more information.\n   * @return {BulkOperationBase} A reference to self\n   */\n  raw(op) {\n    const key = Object.keys(op)[0];\n\n    // Set up the force server object id\n    const forceServerObjectId =\n      typeof this.s.options.forceServerObjectId === 'boolean'\n        ? this.s.options.forceServerObjectId\n        : this.s.collection.s.db.options.forceServerObjectId;\n\n    // Update operations\n    if (\n      (op.updateOne && op.updateOne.q) ||\n      (op.updateMany && op.updateMany.q) ||\n      (op.replaceOne && op.replaceOne.q)\n    ) {\n      op[key].multi = op.updateOne || op.replaceOne ? false : true;\n      return this.s.options.addToOperationsList(this, UPDATE, op[key]);\n    }\n\n    // Crud spec update format\n    if (op.updateOne || op.updateMany || op.replaceOne) {\n      if (op.replaceOne && hasAtomicOperators(op[key].replacement)) {\n        throw new TypeError('Replacement document must not use atomic operators');\n      } else if ((op.updateOne || op.updateMany) && !hasAtomicOperators(op[key].update)) {\n        throw new TypeError('Update document requires atomic operators');\n      }\n\n      const multi = op.updateOne || op.replaceOne ? false : true;\n      const operation = {\n        q: op[key].filter,\n        u: op[key].update || op[key].replacement,\n        multi: multi\n      };\n\n      if (op[key].hint) {\n        operation.hint = op[key].hint;\n      }\n\n      if (this.isOrdered) {\n        operation.upsert = op[key].upsert ? true : false;\n        if (op.collation) operation.collation = op.collation;\n      } else {\n        if (op[key].upsert) operation.upsert = true;\n      }\n      if (op[key].arrayFilters) {\n        // TODO: this check should be done at command construction against a connection, not a topology\n        if (maxWireVersion(this.s.topology) < 6) {\n          throw new TypeError('arrayFilters are only supported on MongoDB 3.6+');\n        }\n\n        operation.arrayFilters = op[key].arrayFilters;\n      }\n\n      return this.s.options.addToOperationsList(this, UPDATE, operation);\n    }\n\n    // Remove operations\n    if (\n      op.removeOne ||\n      op.removeMany ||\n      (op.deleteOne && op.deleteOne.q) ||\n      (op.deleteMany && op.deleteMany.q)\n    ) {\n      op[key].limit = op.removeOne ? 1 : 0;\n      return this.s.options.addToOperationsList(this, REMOVE, op[key]);\n    }\n\n    // Crud spec delete operations, less efficient\n    if (op.deleteOne || op.deleteMany) {\n      const limit = op.deleteOne ? 1 : 0;\n      const operation = { q: op[key].filter, limit: limit };\n      if (op[key].hint) {\n        operation.hint = op[key].hint;\n      }\n      if (this.isOrdered) {\n        if (op.collation) operation.collation = op.collation;\n      }\n      return this.s.options.addToOperationsList(this, REMOVE, operation);\n    }\n\n    // Insert operations\n    if (op.insertOne && op.insertOne.document == null) {\n      if (forceServerObjectId !== true && op.insertOne._id == null)\n        op.insertOne._id = new ObjectID();\n      return this.s.options.addToOperationsList(this, INSERT, op.insertOne);\n    } else if (op.insertOne && op.insertOne.document) {\n      if (forceServerObjectId !== true && op.insertOne.document._id == null)\n        op.insertOne.document._id = new ObjectID();\n      return this.s.options.addToOperationsList(this, INSERT, op.insertOne.document);\n    }\n\n    if (op.insertMany) {\n      emitWarningOnce(\n        'bulk operation `insertMany` has been deprecated; use multiple `insertOne` ops instead'\n      );\n      for (let i = 0; i < op.insertMany.length; i++) {\n        if (forceServerObjectId !== true && op.insertMany[i]._id == null)\n          op.insertMany[i]._id = new ObjectID();\n        this.s.options.addToOperationsList(this, INSERT, op.insertMany[i]);\n      }\n\n      return;\n    }\n\n    // No valid type of operation\n    throw toError(\n      'bulkWrite only supports insertOne, insertMany, updateOne, updateMany, removeOne, removeMany, deleteOne, deleteMany'\n    );\n  }\n\n  /**\n   * helper function to assist with promiseOrCallback behavior\n   * @ignore\n   * @param {*} err\n   * @param {*} callback\n   */\n  _handleEarlyError(err, callback) {\n    if (typeof callback === 'function') {\n      callback(err, null);\n      return;\n    }\n\n    return this.s.promiseLibrary.reject(err);\n  }\n\n  /**\n   * An internal helper method. Do not invoke directly. Will be going away in the future\n   *\n   * @ignore\n   * @method\n   * @param {class} bulk either OrderedBulkOperation or UnorderdBulkOperation\n   * @param {object} writeConcern\n   * @param {object} options\n   * @param {function} callback\n   */\n  bulkExecute(_writeConcern, options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    if (typeof _writeConcern === 'function') {\n      callback = _writeConcern;\n    } else if (_writeConcern && typeof _writeConcern === 'object') {\n      this.s.writeConcern = _writeConcern;\n    }\n\n    if (this.s.executed) {\n      const executedError = toError('batch cannot be re-executed');\n      return this._handleEarlyError(executedError, callback);\n    }\n\n    // If we have current batch\n    if (this.isOrdered) {\n      if (this.s.currentBatch) this.s.batches.push(this.s.currentBatch);\n    } else {\n      if (this.s.currentInsertBatch) this.s.batches.push(this.s.currentInsertBatch);\n      if (this.s.currentUpdateBatch) this.s.batches.push(this.s.currentUpdateBatch);\n      if (this.s.currentRemoveBatch) this.s.batches.push(this.s.currentRemoveBatch);\n    }\n    // If we have no operations in the bulk raise an error\n    if (this.s.batches.length === 0) {\n      const emptyBatchError = toError('Invalid Operation, no operations specified');\n      return this._handleEarlyError(emptyBatchError, callback);\n    }\n    return { options, callback };\n  }\n\n  /**\n   * The callback format for results\n   * @callback BulkOperationBase~resultCallback\n   * @param {MongoError} error An error instance representing the error during the execution.\n   * @param {BulkWriteResult} result The bulk write result.\n   */\n\n  /**\n   * Execute the bulk operation\n   *\n   * @method\n   * @param {WriteConcern} [_writeConcern] Optional write concern. Can also be specified through options.\n   * @param {object} [options] Optional settings.\n   * @param {(number|string)} [options.w] **Deprecated** The write concern. Use writeConcern instead.\n   * @param {number} [options.wtimeout] **Deprecated** The write concern timeout. Use writeConcern instead.\n   * @param {boolean} [options.j=false] **Deprecated** Specify a journal write concern. Use writeConcern instead.\n   * @param {boolean} [options.fsync=false] **Deprecated** Specify a file sync write concern. Use writeConcern instead.\n   * @param {object|WriteConcern} [options.writeConcern] Specify write concern settings.\n   * @param {BulkOperationBase~resultCallback} [callback] A callback that will be invoked when bulkWrite finishes/errors\n   * @throws {MongoError} Throws error if the bulk object has already been executed\n   * @throws {MongoError} Throws error if the bulk object does not have any operations\n   * @return {Promise|void} returns Promise if no callback passed\n   */\n  execute(_writeConcern, options, callback) {\n    const ret = this.bulkExecute(_writeConcern, options, callback);\n    if (!ret || isPromiseLike(ret)) {\n      return ret;\n    }\n\n    options = ret.options;\n    callback = ret.callback;\n\n    return executeLegacyOperation(this.s.topology, executeCommands, [this, options, callback]);\n  }\n\n  /**\n   * Handles final options before executing command\n   *\n   * An internal method. Do not invoke. Will not be accessible in the future\n   *\n   * @ignore\n   * @param {object} config\n   * @param {object} config.options\n   * @param {number} config.batch\n   * @param {function} config.resultHandler\n   * @param {function} callback\n   */\n  finalOptionsHandler(config, callback) {\n    const finalOptions = Object.assign({ ordered: this.isOrdered }, config.options);\n    if (this.s.writeConcern != null) {\n      finalOptions.writeConcern = this.s.writeConcern;\n    }\n\n    if (finalOptions.bypassDocumentValidation !== true) {\n      delete finalOptions.bypassDocumentValidation;\n    }\n\n    // Set an operationIf if provided\n    if (this.operationId) {\n      config.resultHandler.operationId = this.operationId;\n    }\n\n    // Serialize functions\n    if (this.s.options.serializeFunctions) {\n      finalOptions.serializeFunctions = true;\n    }\n\n    // Ignore undefined\n    if (this.s.options.ignoreUndefined) {\n      finalOptions.ignoreUndefined = true;\n    }\n\n    // Is the bypassDocumentValidation options specific\n    if (this.s.bypassDocumentValidation === true) {\n      finalOptions.bypassDocumentValidation = true;\n    }\n\n    // Is the checkKeys option disabled\n    if (this.s.checkKeys === false) {\n      finalOptions.checkKeys = false;\n    }\n\n    if (finalOptions.retryWrites) {\n      if (config.batch.batchType === UPDATE) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !config.batch.operations.some(op => op.multi);\n      }\n\n      if (config.batch.batchType === REMOVE) {\n        finalOptions.retryWrites =\n          finalOptions.retryWrites && !config.batch.operations.some(op => op.limit === 0);\n      }\n    }\n\n    try {\n      if (config.batch.batchType === INSERT) {\n        this.s.topology.insert(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      } else if (config.batch.batchType === UPDATE) {\n        this.s.topology.update(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      } else if (config.batch.batchType === REMOVE) {\n        this.s.topology.remove(\n          this.s.namespace,\n          config.batch.operations,\n          finalOptions,\n          config.resultHandler\n        );\n      }\n    } catch (err) {\n      // Force top level error\n      err.ok = 0;\n      // Merge top level error and return\n      handleCallback(callback, null, mergeBatchResults(config.batch, this.s.bulkResult, err, null));\n    }\n  }\n\n  /**\n   * Handles the write error before executing commands\n   *\n   * An internal helper method. Do not invoke directly. Will be going away in the future\n   *\n   * @ignore\n   * @param {function} callback\n   * @param {BulkWriteResult} writeResult\n   * @param {class} self either OrderedBulkOperation or UnorderedBulkOperation\n   */\n  handleWriteError(callback, writeResult) {\n    if (this.s.bulkResult.writeErrors.length > 0) {\n      const msg = this.s.bulkResult.writeErrors[0].errmsg\n        ? this.s.bulkResult.writeErrors[0].errmsg\n        : 'write operation failed';\n\n      handleCallback(\n        callback,\n        new BulkWriteError(\n          toError({\n            message: msg,\n            code: this.s.bulkResult.writeErrors[0].code,\n            writeErrors: this.s.bulkResult.writeErrors\n          }),\n          writeResult\n        ),\n        null\n      );\n      return true;\n    }\n\n    if (writeResult.getWriteConcernError()) {\n      handleCallback(\n        callback,\n        new BulkWriteError(toError(writeResult.getWriteConcernError()), writeResult),\n        null\n      );\n      return true;\n    }\n  }\n}\n\nObject.defineProperty(BulkOperationBase.prototype, 'length', {\n  enumerable: true,\n  get: function() {\n    return this.s.currentIndex;\n  }\n});\n\n// Exports symbols\nmodule.exports = {\n  Batch,\n  BulkOperationBase,\n  bson,\n  INSERT: INSERT,\n  UPDATE: UPDATE,\n  REMOVE: REMOVE,\n  BulkWriteError\n};\n"],"names":["require$$0","require$$1","require$$2"],"mappings":"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"}