import { commonjsRequire } from '../../../../_virtual/_commonjsHelpers.js';
import bson from '../../../bson/index.mjs';
import optionalRequire_1 from '../../../optional-require/index.mjs';
import utils from './utils.mjs';
import error from './error.mjs';
import connection from './connection/connection.mjs';
import server from './topologies/server.mjs';
import replset from './topologies/replset.mjs';
import mongos from './topologies/mongos.mjs';
import logger from './connection/logger.mjs';
import cursor from './cursor.mjs';
import read_preference from './topologies/read_preference.mjs';
import sessions from './sessions.mjs';
import topology from './sdam/topology.mjs';
import commands from './connection/commands.mjs';
import mongo_credentials from './auth/mongo_credentials.mjs';
import defaultAuthProviders_1 from './auth/defaultAuthProviders.mjs';
import mongocr from './auth/mongocr.mjs';
import x509 from './auth/x509.mjs';
import plain from './auth/plain.mjs';
import gssapi from './auth/gssapi.mjs';
import scram from './auth/scram.mjs';
import uri_parser from './uri_parser.mjs';

let BSON = bson;
const require_optional = optionalRequire_1(commonjsRequire);
const EJSON = utils.retrieveEJSON();

try {
  // Attempt to grab the native BSON parser
  const BSONNative = require_optional('bson-ext');
  // If we got the native parser, use it instead of the
  // Javascript one
  if (BSONNative) {
    BSON = BSONNative;
  }
} catch (err) {} // eslint-disable-line

var core = {
  // Errors
  MongoError: error.MongoError,
  MongoNetworkError: error.MongoNetworkError,
  MongoParseError: error.MongoParseError,
  MongoTimeoutError: error.MongoTimeoutError,
  MongoServerSelectionError: error.MongoServerSelectionError,
  MongoWriteConcernError: error.MongoWriteConcernError,
  // Core
  Connection: connection,
  Server: server,
  ReplSet: replset,
  Mongos: mongos,
  Logger: logger,
  Cursor: cursor.CoreCursor,
  ReadPreference: read_preference,
  Sessions: sessions,
  BSON: BSON,
  EJSON: EJSON,
  Topology: topology.Topology,
  // Raw operations
  Query: commands.Query,
  // Auth mechanisms
  MongoCredentials: mongo_credentials.MongoCredentials,
  defaultAuthProviders: defaultAuthProviders_1.defaultAuthProviders,
  MongoCR: mongocr,
  X509: x509,
  Plain: plain,
  GSSAPI: gssapi,
  ScramSHA1: scram.ScramSHA1,
  ScramSHA256: scram.ScramSHA256,
  // Utilities
  parseConnectionString: uri_parser
};

export default core;
//# sourceMappingURL=index.mjs.map
