{"version":3,"file":"server.mjs","sources":["../../../../../../../../node_modules/mongodb/lib/core/sdam/server.js"],"sourcesContent":["'use strict';\nconst EventEmitter = require('events');\nconst ConnectionPool = require('../../cmap/connection_pool').ConnectionPool;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\nconst MongoError = require('../error').MongoError;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst Logger = require('../connection/logger');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\nconst ReadPreference = require('../topologies/read_preference');\nconst Monitor = require('./monitor').Monitor;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst MongoNetworkTimeoutError = require('../error').MongoNetworkTimeoutError;\nconst collationNotSupported = require('../utils').collationNotSupported;\nconst debugOptions = require('../connection/utils').debugOptions;\nconst isSDAMUnrecoverableError = require('../error').isSDAMUnrecoverableError;\nconst isRetryableWriteError = require('../error').isRetryableWriteError;\nconst isNodeShuttingDownError = require('../error').isNodeShuttingDownError;\nconst isNetworkErrorBeforeHandshake = require('../error').isNetworkErrorBeforeHandshake;\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst common = require('./common');\nconst ServerType = common.ServerType;\nconst isTransactionCommand = require('../transactions').isTransactionCommand;\n\n// Used for filtering out fields for logging\nconst DEBUG_FIELDS = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst kMonitor = Symbol('monitor');\n\n/**\n *\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n */\nclass Server extends EventEmitter {\n  /**\n   * Create a server\n   *\n   * @param {ServerDescription} description\n   * @param {Object} options\n   */\n  constructor(description, options, topology) {\n    super();\n\n    this.s = {\n      // the server description\n      description,\n      // a saved copy of the incoming options\n      options,\n      // the server logger\n      logger: Logger('Server', options),\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // the server state\n      state: STATE_CLOSED,\n      credentials: options.credentials,\n      topology\n    };\n\n    // create the connection pool\n    // NOTE: this used to happen in `connect`, we supported overriding pool options there\n    const poolOptions = Object.assign(\n      { host: this.description.host, port: this.description.port, bson: this.s.bson },\n      options\n    );\n\n    this.s.pool = new ConnectionPool(poolOptions);\n    relayEvents(\n      this.s.pool,\n      this,\n      ['commandStarted', 'commandSucceeded', 'commandFailed'].concat(CMAP_EVENT_NAMES)\n    );\n\n    this.s.pool.on('clusterTimeReceived', clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n\n    // create the monitor\n    this[kMonitor] = new Monitor(this, this.s.options);\n    relayEvents(this[kMonitor], this, [\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n\n      // legacy events\n      'monitoring'\n    ]);\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on('serverHeartbeatSucceeded', event => {\n      this.emit(\n        'descriptionReceived',\n        new ServerDescription(this.description.address, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit('connect', this);\n      }\n    });\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return null;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n    this[kMonitor].connect();\n  }\n\n  /**\n   * Destroy the server connection\n   *\n   * @param {object} [options] Optional settings\n   * @param {Boolean} [options.force=false] Force destroy the pool\n   */\n  destroy(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    this[kMonitor].close();\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    this[kMonitor].requestCheck();\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {object} [options] Optional settings\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    const error = basicReadValidations(this, options);\n    if (error) {\n      return callback(error);\n    }\n\n    // Clone the options\n    options = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // Debug log\n    if (this.s.logger.isDebug()) {\n      this.s.logger.debug(\n        `executing command [${JSON.stringify({\n          ns,\n          cmd,\n          options: debugOptions(DEBUG_FIELDS, options)\n        })}] against ${this.name}`\n      );\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoError(`server ${this.name} does not support collation`));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n\n  /**\n   * Execute a query against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command document for the query\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  query(ns, cmd, cursorState, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, cursorState, options, makeOperationHandler(this, conn, cmd, options, cb));\n    }, callback);\n  }\n\n  /**\n   * Execute a `getMore` against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  getMore(ns, cursorState, batchSize, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(\n        ns,\n        cursorState,\n        batchSize,\n        options,\n        makeOperationHandler(this, conn, null, options, cb)\n      );\n    }, callback);\n  }\n\n  /**\n   * Execute a `killCursors` command against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {function} callback\n   */\n  killCursors(ns, cursorState, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('server is closed'));\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorState, makeOperationHandler(this, conn, null, undefined, cb));\n    }, callback);\n  }\n\n  /**\n   * Insert one or more documents\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of documents to insert\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'remove', ns, ops }, options, callback);\n  }\n}\n\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get: function() {\n    return this.s.topology.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n});\n\nfunction supportsRetryableWrites(server) {\n  return (\n    server.description.maxWireVersion >= 6 &&\n    server.description.logicalSessionTimeoutMinutes &&\n    server.description.type !== ServerType.Standalone\n  );\n}\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction basicReadValidations(server, options) {\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    return new MongoError('readPreference must be an instance of ReadPreference');\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const server = args.server;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = Array.isArray(args.ops) ? args.ops : [args.ops];\n\n  if (server.s.state === STATE_CLOSING || server.s.state === STATE_CLOSED) {\n    callback(new MongoError('server is closed'));\n    return;\n  }\n\n  if (collationNotSupported(server, options)) {\n    callback(new MongoError(`server ${server.name} does not support collation`));\n    return;\n  }\n  const unacknowledgedWrite = options.writeConcern && options.writeConcern.w === 0;\n  if (unacknowledgedWrite || maxWireVersion(server) < 5) {\n    if ((op === 'update' || op === 'remove') && ops.find(o => o.hint)) {\n      callback(new MongoError(`servers < 3.4 do not support hint on ${op}`));\n      return;\n    }\n  }\n\n  server.s.pool.withConnection((err, conn, cb) => {\n    if (err) {\n      markServerUnknown(server, err);\n      return cb(err);\n    }\n\n    conn[op](ns, ops, options, makeOperationHandler(server, conn, ops, options, cb));\n  }, callback);\n}\n\nfunction markServerUnknown(server, error) {\n  if (error instanceof MongoNetworkError && !(error instanceof MongoNetworkTimeoutError)) {\n    server[kMonitor].reset();\n  }\n\n  server.emit(\n    'descriptionReceived',\n    new ServerDescription(server.description.address, null, {\n      error,\n      topologyVersion:\n        error && error.topologyVersion ? error.topologyVersion : server.description.topologyVersion\n    })\n  );\n}\n\nfunction connectionIsStale(pool, connection) {\n  return connection.generation !== pool.generation;\n}\n\nfunction shouldHandleStateChangeError(server, err) {\n  const etv = err.topologyVersion;\n  const stv = server.description.topologyVersion;\n\n  return compareTopologyVersion(stv, etv) < 0;\n}\n\nfunction inActiveTransaction(session, cmd) {\n  return session && session.inTransaction() && !isTransactionCommand(cmd);\n}\n\nfunction makeOperationHandler(server, connection, cmd, options, callback) {\n  const session = options && options.session;\n\n  return function handleOperationResult(err, result) {\n    if (err && !connectionIsStale(server.s.pool, connection)) {\n      if (err instanceof MongoNetworkError) {\n        if (session && !session.hasEnded) {\n          session.serverSession.isDirty = true;\n        }\n\n        if (supportsRetryableWrites(server) && !inActiveTransaction(session, cmd)) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (!(err instanceof MongoNetworkTimeoutError) || isNetworkErrorBeforeHandshake(err)) {\n          markServerUnknown(server, err);\n          server.s.pool.clear();\n        }\n      } else {\n        // if pre-4.4 server, then add error label if its a retryable write error\n        if (\n          maxWireVersion(server) < 9 &&\n          isRetryableWriteError(err) &&\n          !inActiveTransaction(session, cmd)\n        ) {\n          err.addErrorLabel('RetryableWriteError');\n        }\n\n        if (isSDAMUnrecoverableError(err)) {\n          if (shouldHandleStateChangeError(server, err)) {\n            if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(err)) {\n              server.s.pool.clear();\n            }\n\n            markServerUnknown(server, err);\n            process.nextTick(() => server.requestCheck());\n          }\n        }\n      }\n    }\n\n    callback(err, result);\n  };\n}\n\nmodule.exports = {\n  Server\n};\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","EventEmitter","Logger","ReadPreference"],"mappings":"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"}