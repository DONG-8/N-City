{"version":3,"file":"execute_operation.mjs","sources":["../../../../../../../node_modules/mongodb/lib/operations/execute_operation.js"],"sourcesContent":["'use strict';\n\nconst maybePromise = require('../utils').maybePromise;\nconst MongoError = require('../core/error').MongoError;\nconst Aspect = require('./operation').Aspect;\nconst OperationBase = require('./operation').OperationBase;\nconst ReadPreference = require('../core/topologies/read_preference');\nconst isRetryableError = require('../core/error').isRetryableError;\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst isUnifiedTopology = require('../core/utils').isUnifiedTopology;\n\n/**\n * Executes the given operation with provided arguments.\n *\n * This method reduces large amounts of duplication in the entire codebase by providing\n * a single point for determining whether callbacks or promises should be used. Additionally\n * it allows for a single point of entry to provide features such as implicit sessions, which\n * are required by the Driver Sessions specification in the event that a ClientSession is\n * not provided\n *\n * @param {object} topology The topology to execute this operation on\n * @param {Operation} operation The operation to execute\n * @param {function} callback The command result callback\n */\nfunction executeOperation(topology, operation, cb) {\n  if (topology == null) {\n    throw new TypeError('This method requires a valid topology instance');\n  }\n\n  if (!(operation instanceof OperationBase)) {\n    throw new TypeError('This method requires a valid operation instance');\n  }\n\n  return maybePromise(topology, cb, callback => {\n    if (isUnifiedTopology(topology) && topology.shouldCheckForSessionSupport()) {\n      // Recursive call to executeOperation after a server selection\n      return selectServerForSessionSupport(topology, operation, callback);\n    }\n\n    // The driver sessions spec mandates that we implicitly create sessions for operations\n    // that are not explicitly provided with a session.\n    let session, owner;\n    if (topology.hasSessionSupport()) {\n      if (operation.session == null) {\n        owner = Symbol();\n        session = topology.startSession({ owner });\n        operation.session = session;\n      } else if (operation.session.hasEnded) {\n        return callback(new MongoError('Use of expired sessions is not permitted'));\n      }\n    } else if (operation.session) {\n      // If the user passed an explicit session and we are still, after server selection,\n      // trying to run against a topology that doesn't support sessions we error out.\n      return callback(new MongoError('Current topology does not support sessions'));\n    }\n\n    function executeCallback(err, result) {\n      if (session && session.owner === owner) {\n        session.endSession();\n        if (operation.session === session) {\n          operation.clearSession();\n        }\n      }\n\n      callback(err, result);\n    }\n\n    try {\n      if (operation.hasAspect(Aspect.EXECUTE_WITH_SELECTION)) {\n        executeWithServerSelection(topology, operation, executeCallback);\n      } else {\n        operation.execute(executeCallback);\n      }\n    } catch (error) {\n      if (session && session.owner === owner) {\n        session.endSession();\n        if (operation.session === session) {\n          operation.clearSession();\n        }\n      }\n\n      callback(error);\n    }\n  });\n}\n\nfunction supportsRetryableReads(server) {\n  return maxWireVersion(server) >= 6;\n}\n\nfunction executeWithServerSelection(topology, operation, callback) {\n  const readPreference = operation.readPreference || ReadPreference.primary;\n  const inTransaction = operation.session && operation.session.inTransaction();\n\n  if (inTransaction && !readPreference.equals(ReadPreference.primary)) {\n    callback(\n      new MongoError(\n        `Read preference in a transaction must be primary, not: ${readPreference.mode}`\n      )\n    );\n\n    return;\n  }\n\n  const serverSelectionOptions = {\n    readPreference,\n    session: operation.session\n  };\n\n  function callbackWithRetry(err, result) {\n    if (err == null) {\n      return callback(null, result);\n    }\n\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    // select a new server, and attempt to retry the operation\n    topology.selectServer(serverSelectionOptions, (err, server) => {\n      if (err || !supportsRetryableReads(server)) {\n        callback(err, null);\n        return;\n      }\n\n      operation.execute(server, callback);\n    });\n  }\n\n  // select a server, and execute the operation against it\n  topology.selectServer(serverSelectionOptions, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n    const shouldRetryReads =\n      topology.s.options.retryReads !== false &&\n      operation.session &&\n      !inTransaction &&\n      supportsRetryableReads(server) &&\n      operation.canRetryRead;\n\n    if (operation.hasAspect(Aspect.RETRYABLE) && shouldRetryReads) {\n      operation.execute(server, callbackWithRetry);\n      return;\n    }\n\n    operation.execute(server, callback);\n  });\n}\n\n// The Unified Topology runs serverSelection before executing every operation\n// Session support is determined by the result of a monitoring check triggered by this selection\nfunction selectServerForSessionSupport(topology, operation, callback) {\n  topology.selectServer(ReadPreference.primaryPreferred, err => {\n    if (err) {\n      return callback(err);\n    }\n\n    executeOperation(topology, operation, callback);\n  });\n}\n\nmodule.exports = executeOperation;\n"],"names":["require$$0","require$$1","require$$2","require$$3","ReadPreference"],"mappings":"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"}