{"version":3,"file":"change_stream.js","sources":["../../../../../../node_modules/mongodb/lib/change_stream.js"],"sourcesContent":["'use strict';\n\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst isResumableError = require('./error').isResumableError;\nconst MongoError = require('./core').MongoError;\nconst Cursor = require('./cursor');\nconst relayEvents = require('./core/utils').relayEvents;\nconst maxWireVersion = require('./core/utils').maxWireVersion;\nconst maybePromise = require('./utils').maybePromise;\nconst now = require('./utils').now;\nconst calculateDurationInMs = require('./utils').calculateDurationInMs;\nconst AggregateOperation = require('./operations/aggregate');\n\nconst kResumeQueue = Symbol('resumeQueue');\n\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument'];\nconst CURSOR_OPTIONS = ['batchSize', 'maxAwaitTimeMS', 'collation', 'readPreference'].concat(\n  CHANGE_STREAM_OPTIONS\n);\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\n/**\n * @typedef ResumeToken\n * @description Represents the logical starting point for a new or resuming {@link ChangeStream} on the server.\n * @see https://docs.mongodb.com/master/changeStreams/#change-stream-resume-token\n */\n\n/**\n * @typedef OperationTime\n * @description Represents a specific point in time on a server. Can be retrieved by using {@link Db#command}\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\n\n/**\n * @typedef ChangeStreamOptions\n * @description Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @property {string} [fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @property {number} [maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query.\n * @property {ResumeToken} [resumeAfter] Allows you to start a changeStream after a specified event. See {@link https://docs.mongodb.com/master/changeStreams/#resumeafter-for-change-streams|ChangeStream documentation}.\n * @property {ResumeToken} [startAfter] Similar to resumeAfter, but will allow you to start after an invalidated event. See {@link https://docs.mongodb.com/master/changeStreams/#startafter-for-change-streams|ChangeStream documentation}.\n * @property {OperationTime} [startAtOperationTime] Will start the changeStream after the specified operationTime.\n * @property {number} [batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {object} [collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @property {ReadPreference} [readPreference] The read preference. Defaults to the read preference of the database or collection. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n */\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @class ChangeStream\n * @since 3.0.0\n * @param {(MongoClient|Db|Collection)} parent The parent object that created this change stream\n * @param {Array} pipeline An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n * @param {ChangeStreamOptions} [options] Optional settings\n * @fires ChangeStream#close\n * @fires ChangeStream#change\n * @fires ChangeStream#end\n * @fires ChangeStream#error\n * @fires ChangeStream#resumeTokenChanged\n * @return {ChangeStream} a ChangeStream instance.\n */\nclass ChangeStream extends EventEmitter {\n  constructor(parent, pipeline, options) {\n    super();\n    const Collection = require('./collection');\n    const Db = require('./db');\n    const MongoClient = require('./mongo_client');\n\n    this.pipeline = pipeline || [];\n    this.options = options || {};\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n      this.topology = parent.s.db.serverConfig;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n      this.topology = parent.serverConfig;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n      this.topology = parent.topology;\n    } else {\n      throw new TypeError(\n        'parent provided to ChangeStream constructor is not an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.promiseLibrary = parent.s.promiseLibrary;\n    if (!this.options.readPreference && parent.s.readPreference) {\n      this.options.readPreference = parent.s.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = createChangeStreamCursor(this, options);\n\n    this.closed = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this.cursor.on('data', change => processNewChange(this, change));\n      }\n    });\n\n    // Listen for all `change` listeners being removed from ChangeStream\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this.cursor.removeAllListeners('data');\n      }\n    });\n  }\n\n  /**\n   * @property {ResumeToken} resumeToken\n   * The cached resume token that will be used to resume\n   * after the most recently returned change.\n   */\n  get resumeToken() {\n    return this.cursor.resumeToken;\n  }\n\n  /**\n   * Check if there is any document still available in the Change Stream\n   * @function ChangeStream.prototype.hasNext\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @returns {Promise|void} returns Promise if no callback passed\n   */\n  hasNext(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /**\n   * Get the next available document from the Change Stream, returns null if no more documents are available.\n   * @function ChangeStream.prototype.next\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @throws {MongoError}\n   * @returns {Promise|void} returns Promise if no callback passed\n   */\n  next(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      getCursor(this, (err, cursor) => {\n        if (err) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            processError(this, error, cb);\n            return;\n          }\n          processNewChange(this, change, cb);\n        });\n      });\n    });\n  }\n\n  /**\n   * Is the change stream closed\n   * @method ChangeStream.prototype.isClosed\n   * @return {boolean}\n   */\n  isClosed() {\n    return this.closed || (this.cursor && this.cursor.isClosed());\n  }\n\n  /**\n   * Close the Change Stream\n   * @method ChangeStream.prototype.close\n   * @param {ChangeStream~resultCallback} [callback] The result callback.\n   * @return {Promise} returns Promise if no callback passed\n   */\n  close(callback) {\n    return maybePromise(this.parent, callback, cb => {\n      if (this.closed) return cb();\n\n      // flag the change stream as explicitly closed\n      this.closed = true;\n\n      if (!this.cursor) return cb();\n\n      // Tidy up the existing cursor\n      const cursor = this.cursor;\n\n      return cursor.close(err => {\n        ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n        this.cursor = undefined;\n\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * This method pulls all the data out of a readable stream, and writes it to the supplied destination, automatically managing the flow so that the destination is not overwhelmed by a fast readable stream.\n   * @method\n   * @param {Writable} destination The destination for writing data\n   * @param {object} [options] {@link https://nodejs.org/api/stream.html#stream_readable_pipe_destination_options|Pipe options}\n   * @return {null}\n   */\n  pipe(destination, options) {\n    if (!this.pipeDestinations) {\n      this.pipeDestinations = [];\n    }\n    this.pipeDestinations.push(destination);\n    return this.cursor.pipe(destination, options);\n  }\n\n  /**\n   * This method will remove the hooks set up for a previous pipe() call.\n   * @param {Writable} [destination] The destination for writing data\n   * @return {null}\n   */\n  unpipe(destination) {\n    if (this.pipeDestinations && this.pipeDestinations.indexOf(destination) > -1) {\n      this.pipeDestinations.splice(this.pipeDestinations.indexOf(destination), 1);\n    }\n    return this.cursor.unpipe(destination);\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @method\n   * @param {object} [options] Optional settings.\n   * @param {function} [options.transform] A transformation method applied to each document emitted by the stream.\n   * @return {Cursor}\n   */\n  stream(options) {\n    this.streamOptions = options;\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * This method will cause a stream in flowing mode to stop emitting data events. Any data that becomes available will remain in the internal buffer.\n   * @return {null}\n   */\n  pause() {\n    return this.cursor.pause();\n  }\n\n  /**\n   * This method will cause the readable stream to resume emitting data events.\n   * @return {null}\n   */\n  resume() {\n    return this.cursor.resume();\n  }\n}\n\nclass ChangeStreamCursor extends Cursor {\n  constructor(topology, operation, options) {\n    super(topology, operation, options);\n\n    options = options || {};\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit('resumeTokenChanged', token);\n  }\n\n  get resumeToken() {\n    return this._resumeToken;\n  }\n\n  get resumeOptions() {\n    const result = {};\n    for (const optionName of CURSOR_OPTIONS) {\n      if (this.options[optionName]) result[optionName] = this.options[optionName];\n    }\n\n    if (this.resumeToken || this.startAtOperationTime) {\n      ['resumeAfter', 'startAfter', 'startAtOperationTime'].forEach(key => delete result[key]);\n\n      if (this.resumeToken) {\n        const resumeKey =\n          this.options.startAfter && !this.hasReceived ? 'startAfter' : 'resumeAfter';\n        result[resumeKey] = this.resumeToken;\n      } else if (this.startAtOperationTime && maxWireVersion(this.server) >= 7) {\n        result.startAtOperationTime = this.startAtOperationTime;\n      }\n    }\n\n    return result;\n  }\n\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.cursorState.postBatchResumeToken) {\n      this.resumeToken = this.cursorState.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(batchName, response) {\n    const cursor = response.cursor;\n    if (cursor.postBatchResumeToken) {\n      this.cursorState.postBatchResumeToken = cursor.postBatchResumeToken;\n\n      if (cursor[batchName].length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  _initializeCursor(callback) {\n    super._initializeCursor((err, result) => {\n      if (err || result == null) {\n        callback(err, result);\n        return;\n      }\n\n      const response = result.documents[0];\n\n      if (\n        this.startAtOperationTime == null &&\n        this.resumeAfter == null &&\n        this.startAfter == null &&\n        maxWireVersion(this.server) >= 7\n      ) {\n        this.startAtOperationTime = response.operationTime;\n      }\n\n      this._processBatch('firstBatch', response);\n\n      this.emit('init', result);\n      this.emit('response');\n      callback(err, result);\n    });\n  }\n\n  _getMore(callback) {\n    super._getMore((err, response) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      this._processBatch('nextBatch', response);\n\n      this.emit('more', response);\n      this.emit('response');\n      callback(err, response);\n    });\n  }\n}\n\n/**\n * @event ChangeStreamCursor#response\n * internal event DO NOT USE\n * @ignore\n */\n\n// Create a new change stream cursor based on self's configuration\nfunction createChangeStreamCursor(self, options) {\n  const changeStreamStageOptions = { fullDocument: options.fullDocument || 'default' };\n  applyKnownOptions(changeStreamStageOptions, options, CHANGE_STREAM_OPTIONS);\n  if (self.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n    changeStreamStageOptions.allChangesForCluster = true;\n  }\n\n  const pipeline = [{ $changeStream: changeStreamStageOptions }].concat(self.pipeline);\n  const cursorOptions = applyKnownOptions({}, options, CURSOR_OPTIONS);\n\n  const changeStreamCursor = new ChangeStreamCursor(\n    self.topology,\n    new AggregateOperation(self.parent, pipeline, options),\n    cursorOptions\n  );\n\n  relayEvents(changeStreamCursor, self, ['resumeTokenChanged', 'end', 'close']);\n\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   *\n   * @event ChangeStream#change\n   * @type {object}\n   */\n  if (self.listenerCount('change') > 0) {\n    changeStreamCursor.on('data', function(change) {\n      processNewChange(self, change);\n    });\n  }\n\n  /**\n   * Change stream close event\n   *\n   * @event ChangeStream#close\n   * @type {null}\n   */\n\n  /**\n   * Change stream end event\n   *\n   * @event ChangeStream#end\n   * @type {null}\n   */\n\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   *\n   * @event ChangeStream#resumeTokenChanged\n   * @type {ResumeToken}\n   */\n\n  /**\n   * Fired when the stream encounters an error.\n   *\n   * @event ChangeStream#error\n   * @type {Error}\n   */\n  changeStreamCursor.on('error', function(error) {\n    processError(self, error);\n  });\n\n  if (self.pipeDestinations) {\n    const cursorStream = changeStreamCursor.stream(self.streamOptions);\n    for (let pipeDestination of self.pipeDestinations) {\n      cursorStream.pipe(pipeDestination);\n    }\n  }\n\n  return changeStreamCursor;\n}\n\nfunction applyKnownOptions(target, source, optionNames) {\n  optionNames.forEach(name => {\n    if (source[name]) {\n      target[name] = source[name];\n    }\n  });\n\n  return target;\n}\n\n// This method performs a basic server selection loop, satisfying the requirements of\n// ChangeStream resumability until the new SDAM layer can be used.\nconst SELECTION_TIMEOUT = 30000;\nfunction waitForTopologyConnected(topology, options, callback) {\n  setTimeout(() => {\n    if (options && options.start == null) {\n      options.start = now();\n    }\n\n    const start = options.start || now();\n    const timeout = options.timeout || SELECTION_TIMEOUT;\n    const readPreference = options.readPreference;\n    if (topology.isConnected({ readPreference })) {\n      return callback();\n    }\n\n    if (calculateDurationInMs(start) > timeout) {\n      return callback(new MongoError('Timed out waiting for connection'));\n    }\n\n    waitForTopologyConnected(topology, options, callback);\n  }, 500); // this is an arbitrary wait time to allow SDAM to transition\n}\n\nfunction processNewChange(changeStream, change, callback) {\n  const cursor = changeStream.cursor;\n\n  // a null change means the cursor has been notified, implicitly closing the change stream\n  if (change == null) {\n    changeStream.closed = true;\n  }\n\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  }\n\n  if (change && !change._id) {\n    const noResumeTokenError = new Error(\n      'A change stream document has been received that lacks a resume token (_id).'\n    );\n\n    if (!callback) return changeStream.emit('error', noResumeTokenError);\n    return callback(noResumeTokenError);\n  }\n\n  // cache the resume token\n  cursor.cacheResumeToken(change._id);\n\n  // wipe the startAtOperationTime if there was one so that there won't be a conflict\n  // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n  changeStream.options.startAtOperationTime = undefined;\n\n  // Return the change\n  if (!callback) return changeStream.emit('change', change);\n  return callback(undefined, change);\n}\n\nfunction processError(changeStream, error, callback) {\n  const topology = changeStream.topology;\n  const cursor = changeStream.cursor;\n\n  // If the change stream has been closed explictly, do not process error.\n  if (changeStream.closed) {\n    if (callback) callback(new MongoError('ChangeStream is closed'));\n    return;\n  }\n\n  // if the resume succeeds, continue with the new cursor\n  function resumeWithCursor(newCursor) {\n    changeStream.cursor = newCursor;\n    processResumeQueue(changeStream);\n  }\n\n  // otherwise, raise an error and close the change stream\n  function unresumableError(err) {\n    if (!callback) {\n      changeStream.emit('error', err);\n      changeStream.emit('close');\n    }\n    processResumeQueue(changeStream, err);\n    changeStream.closed = true;\n  }\n\n  if (cursor && isResumableError(error, maxWireVersion(cursor.server))) {\n    changeStream.cursor = undefined;\n\n    // stop listening to all events from old cursor\n    ['data', 'close', 'end', 'error'].forEach(event => cursor.removeAllListeners(event));\n\n    // close internal cursor, ignore errors\n    cursor.close();\n\n    waitForTopologyConnected(topology, { readPreference: cursor.options.readPreference }, err => {\n      // if the topology can't reconnect, close the stream\n      if (err) return unresumableError(err);\n\n      // create a new cursor, preserving the old cursor's options\n      const newCursor = createChangeStreamCursor(changeStream, cursor.resumeOptions);\n\n      // attempt to continue in emitter mode\n      if (!callback) return resumeWithCursor(newCursor);\n\n      // attempt to continue in iterator mode\n      newCursor.hasNext(err => {\n        // if there's an error immediately after resuming, close the stream\n        if (err) return unresumableError(err);\n        resumeWithCursor(newCursor);\n      });\n    });\n    return;\n  }\n\n  if (!callback) return changeStream.emit('error', error);\n  return callback(error);\n}\n\n/**\n * Safely provides a cursor across resume attempts\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {function} callback gets the cursor or error\n * @param {ChangeStreamCursor} [oldCursor] when resuming from an error, carry over options from previous cursor\n */\nfunction getCursor(changeStream, callback) {\n  if (changeStream.isClosed()) {\n    callback(new MongoError('ChangeStream is closed.'));\n    return;\n  }\n\n  // if a cursor exists and it is open, return it\n  if (changeStream.cursor) {\n    callback(undefined, changeStream.cursor);\n    return;\n  }\n\n  // no cursor, queue callback until topology reconnects\n  changeStream[kResumeQueue].push(callback);\n}\n\n/**\n * Drain the resume queue when a new has become available\n *\n * @param {ChangeStream} changeStream the parent ChangeStream\n * @param {ChangeStreamCursor?} changeStream.cursor the new cursor\n * @param {Error} [err] error getting a new cursor\n */\nfunction processResumeQueue(changeStream, err) {\n  while (changeStream[kResumeQueue].length) {\n    const request = changeStream[kResumeQueue].pop();\n    if (changeStream.isClosed() && !err) {\n      request(new MongoError('Change Stream is not open.'));\n      return;\n    }\n    request(err, changeStream.cursor);\n  }\n}\n\n/**\n * The callback format for results\n * @callback ChangeStream~resultCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {(object|null)} result The result object if the command was executed successfully.\n */\n\nmodule.exports = ChangeStream;\n"],"names":["require$$0","require$$1","require$$2","require$$3","EventEmitter","require$$4","require$$5","require$$6","Denque","Cursor","AggregateOperation"],"mappings":"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"}