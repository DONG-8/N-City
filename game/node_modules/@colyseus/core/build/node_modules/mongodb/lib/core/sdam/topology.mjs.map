{"version":3,"file":"topology.mjs","sources":["../../../../../../../../node_modules/mongodb/lib/core/sdam/topology.js"],"sourcesContent":["'use strict';\nconst Denque = require('denque');\nconst EventEmitter = require('events');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ServerType = require('./common').ServerType;\nconst TopologyDescription = require('./topology_description').TopologyDescription;\nconst TopologyType = require('./common').TopologyType;\nconst events = require('./events');\nconst Server = require('./server').Server;\nconst relayEvents = require('../utils').relayEvents;\nconst ReadPreference = require('../topologies/read_preference');\nconst isRetryableWritesSupported = require('../topologies/shared').isRetryableWritesSupported;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst deprecate = require('util').deprecate;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst createCompressionInfo = require('../topologies/shared').createCompressionInfo;\nconst ClientSession = require('../sessions').ClientSession;\nconst MongoError = require('../error').MongoError;\nconst MongoServerSelectionError = require('../error').MongoServerSelectionError;\nconst resolveClusterTime = require('../topologies/shared').resolveClusterTime;\nconst SrvPoller = require('./srv_polling').SrvPoller;\nconst getMMAPError = require('../topologies/shared').getMMAPError;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst eachAsync = require('../utils').eachAsync;\nconst emitDeprecationWarning = require('../../utils').emitDeprecationWarning;\nconst ServerSessionPool = require('../sessions').ServerSessionPool;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\nconst compareTopologyVersion = require('./server_description').compareTopologyVersion;\nconst emitWarning = require('../../utils').emitWarning;\n\nconst common = require('./common');\nconst drainTimerQueue = common.drainTimerQueue;\nconst clearAndRemoveTimerFrom = common.clearAndRemoveTimerFrom;\n\nconst serverSelection = require('./server_selection');\nconst readPreferenceServerSelector = serverSelection.readPreferenceServerSelector;\nconst writableServerSelector = serverSelection.writableServerSelector;\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  'serverHeartbeatStarted',\n  'serverHeartbeatSucceeded',\n  'serverHeartbeatFailed',\n  'commandStarted',\n  'commandSucceeded',\n  'commandFailed',\n\n  // NOTE: Legacy events\n  'monitoring'\n].concat(CMAP_EVENT_NAMES);\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = ['connect', 'descriptionReceived', 'close', 'ended'];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst DEPRECATED_OPTIONS = new Set([\n  'autoReconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'bufferMaxEntries'\n]);\n\nconst kCancelled = Symbol('cancelled');\nconst kWaitQueue = Symbol('waitQueue');\n\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n *\n * @fires Topology#serverOpening\n * @fires Topology#serverClosed\n * @fires Topology#serverDescriptionChanged\n * @fires Topology#topologyOpening\n * @fires Topology#topologyClosed\n * @fires Topology#topologyDescriptionChanged\n * @fires Topology#serverHeartbeatStarted\n * @fires Topology#serverHeartbeatSucceeded\n * @fires Topology#serverHeartbeatFailed\n */\nclass Topology extends EventEmitter {\n  /**\n   * Create a topology\n   *\n   * @param {Array|String} [seedlist] a string list, or array of Server instances to connect to\n   * @param {Object} [options] Optional settings\n   * @param {Number} [options.localThresholdMS=15] The size of the latency window for selecting among multiple suitable servers\n   * @param {Number} [options.serverSelectionTimeoutMS=30000] How long to block for server selection before throwing an error\n   * @param {Number} [options.heartbeatFrequencyMS=10000] The frequency with which topology updates are scheduled\n   */\n  constructor(seedlist, options) {\n    super();\n    if (typeof options === 'undefined' && typeof seedlist !== 'string') {\n      options = seedlist;\n      seedlist = [];\n\n      // this is for legacy single server constructor support\n      if (options.host) {\n        seedlist.push({ host: options.host, port: options.port });\n      }\n    }\n\n    seedlist = seedlist || [];\n    if (typeof seedlist === 'string') {\n      seedlist = parseStringSeedlist(seedlist);\n    }\n\n    options = Object.assign({}, common.TOPOLOGY_DEFAULTS, options);\n    options = Object.freeze(\n      Object.assign(options, {\n        metadata: makeClientMetadata(options),\n        compression: { compressors: createCompressionInfo(options) }\n      })\n    );\n\n    DEPRECATED_OPTIONS.forEach(optionName => {\n      if (options[optionName]) {\n        emitDeprecationWarning(\n          `The option \\`${optionName}\\` is incompatible with the unified topology, please read more by visiting http://bit.ly/2D8WfT6`,\n          'DeprecationWarning'\n        );\n      }\n    });\n\n    const topologyType = topologyTypeFromSeedlist(seedlist, options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = seedlist.reduce((result, seed) => {\n      if (seed.domain_socket) seed.host = seed.domain_socket;\n      const address = seed.port ? `${seed.host}:${seed.port}` : `${seed.host}:27017`;\n      result.set(address, new ServerDescription(address));\n      return result;\n    }, new Map());\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist: seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        null,\n        null,\n        null,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // allow users to override the cursor factory\n      Cursor: options.cursorFactory || CoreCursor,\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      // Promise library\n      promiseLibrary: options.promiseLibrary || Promise,\n      credentials: options.credentials,\n      clusterTime: null,\n\n      // timer management\n      connectionTimers: new Set()\n    };\n\n    if (options.srvHost) {\n      this.s.srvPoller =\n        options.srvPoller ||\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost, // TODO: GET THIS\n          logger: options.logger,\n          loggerLevel: options.loggerLevel\n        });\n      this.s.detectTopologyDescriptionChange = ev => {\n        const previousType = ev.previousDescription.type;\n        const newType = ev.newDescription.type;\n\n        if (previousType !== TopologyType.Sharded && newType === TopologyType.Sharded) {\n          this.s.handleSrvPolling = srvPollingHandler(this);\n          this.s.srvPoller.on('srvRecordDiscovery', this.s.handleSrvPolling);\n          this.s.srvPoller.start();\n        }\n      };\n\n      this.on('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n    }\n\n    // NOTE: remove this when NODE-1709 is resolved\n    this.setMaxListeners(Infinity);\n  }\n\n  /**\n   * @return A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n\n  get parserType() {\n    return BSON.native ? 'c++' : 'js';\n  }\n\n  /**\n   * Initiate server connect\n   *\n   * @param {Object} [options] Optional settings\n   * @param {Array} [options.auth=null] Array of auth options to apply on connect\n   * @param {function} [callback] An optional callback called once on the first connected server\n   */\n  connect(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit('topologyOpening', new events.TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    connectServers(this, Array.from(this.s.description.servers.values()));\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n    const connectHandler = err => {\n      if (err) {\n        this.close();\n\n        if (typeof callback === 'function') {\n          callback(err);\n        } else {\n          this.emit('error', err);\n        }\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      this.emit('open', err, this);\n      this.emit('connect', this);\n\n      if (typeof callback === 'function') callback(err, this);\n    };\n\n    // TODO: NODE-2471\n    if (this.s.credentials) {\n      this.command('admin.$cmd', { ping: 1 }, { readPreference }, connectHandler);\n      return;\n    }\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, connectHandler);\n  }\n\n  /**\n   * Close this topology\n   */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options || {};\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoError('Topology closed'));\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      if (this.s.handleSrvPolling) {\n        this.s.srvPoller.removeListener('srvRecordDiscovery', this.s.handleSrvPolling);\n        delete this.s.handleSrvPolling;\n      }\n    }\n\n    if (this.s.detectTopologyDescriptionChange) {\n      this.removeListener('topologyDescriptionChanged', this.s.detectTopologyDescriptionChange);\n      delete this.s.detectTopologyDescriptionChange;\n    }\n\n    this.s.sessions.forEach(session => session.endSession());\n    this.s.sessionPool.endAllPooledSessions(() => {\n      eachAsync(\n        Array.from(this.s.servers.values()),\n        (server, cb) => destroyServer(server, this, options, cb),\n        err => {\n          this.s.servers.clear();\n\n          // emit an event for close\n          this.emit('topologyClosed', new events.TopologyClosedEvent(this.s.id));\n\n          stateTransition(this, STATE_CLOSED);\n\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        }\n      );\n    });\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param {function} [selector] An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param {object} [options] Optional settings related to server selection\n   * @param {number} [options.serverSelectionTimeoutMS] How long to block for server selection before throwing an error\n   * @param {function} callback The callback used to indicate success or failure\n   * @return {Server} An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(selector, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      if (typeof selector !== 'function') {\n        options = selector;\n\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else if (typeof selector === 'string') {\n          readPreference = new ReadPreference(selector);\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        selector = readPreferenceServerSelector(readPreference);\n      } else {\n        options = {};\n      }\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    // support server selection by options with readPreference\n    let serverSelector = selector;\n    if (typeof selector === 'object') {\n      const readPreference = selector.readPreference\n        ? selector.readPreference\n        : ReadPreference.primary;\n\n      serverSelector = readPreferenceServerSelector(readPreference);\n    }\n\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @return Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @return Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /**\n   * Start a logical session\n   */\n  startSession(options, clientOptions) {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /**\n   * Send endSessions command(s) with the given session ids\n   *\n   * @param {Array} sessions The sessions to end\n   * @param {function} [callback]\n   */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred, noResponse: true },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param {object} serverDescription The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      resolveClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit('error', new MongoError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      this.emit(\n        'serverDescriptionChanged',\n        new events.ServerDescriptionChangedEvent(\n          this.s.id,\n          serverDescription.address,\n          previousServerDescription,\n          this.s.description.servers.get(serverDescription.address)\n        )\n      );\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        'topologyDescriptionChanged',\n        new events.TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = null);\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  logout(callback) {\n    if (typeof callback === 'function') callback(null, true);\n  }\n\n  // Basic operation support. Eventually this should be moved into command construction\n  // during the command refactor.\n\n  /**\n   * Insert one or more documents\n   *\n   * @param {String} ns The full qualified namespace for this operation\n   * @param {Array} ops An array of documents to insert\n   * @param {Boolean} [options.ordered=true] Execute in order or out of order\n   * @param {Object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   *\n   * @param {string} ns The fully qualified namespace for this operation\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ topology: this, op: 'remove', ns, ops }, options, callback);\n  }\n\n  /**\n   * Execute a command\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Connection} [options.connection] Specify connection object to execute command against\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    ReadPreference.translate(options);\n    const readPreference = options.readPreference || ReadPreference.primary;\n\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const willRetryWrite =\n        !options.retrying &&\n        !!options.retryWrites &&\n        options.session &&\n        isRetryableWritesSupported(this) &&\n        !options.session.inTransaction() &&\n        isWriteCommand(cmd);\n\n      const cb = (err, result) => {\n        if (!err) return callback(null, result);\n        if (!shouldRetryOperation(err)) {\n          return callback(err);\n        }\n\n        if (willRetryWrite) {\n          const newOptions = Object.assign({}, options, { retrying: true });\n          return this.command(ns, cmd, newOptions, callback);\n        }\n\n        return callback(err);\n      };\n\n      // increment and assign txnNumber\n      if (willRetryWrite) {\n        options.session.incrementTransactionNumber();\n        options.willRetryWrite = willRetryWrite;\n      }\n\n      server.command(ns, cmd, options, cb);\n    });\n  }\n\n  /**\n   * Create a new cursor\n   *\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n   * @param {object} [options] Options for the cursor\n   * @param {object} [options.batchSize=0] Batchsize for the operation\n   * @param {array} [options.documents=[]] Initial documents list for cursor\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session=null] Session to use for the operation\n   * @param {object} [options.topology] The internal topology of the created cursor\n   * @returns {Cursor}\n   */\n  cursor(ns, cmd, options) {\n    options = options || {};\n    const topology = options.topology || this;\n    const CursorClass = options.cursorFactory || this.s.Cursor;\n    ReadPreference.translate(options);\n\n    return new CursorClass(topology, ns, cmd, options);\n  }\n\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n\n  isConnected() {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed() {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  unref() {\n    emitWarning('not implemented: `unref`');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n\n    const sd = serverDescriptions.filter(sd => sd.type !== ServerType.Unknown)[0];\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get bson() {\n    return this.s.bson;\n  }\n}\n\nObject.defineProperty(Topology.prototype, 'clusterTime', {\n  enumerable: true,\n  get: function() {\n    return this.s.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n});\n\n// legacy aliases\nTopology.prototype.destroy = deprecate(\n  Topology.prototype.close,\n  'destroy() is deprecated, please use close() instead'\n);\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/**\n * Destroys a server, and removes all event listeners from the instance\n *\n * @param {Server} server\n */\nfunction destroyServer(server, topology, options, callback) {\n  options = options || {};\n  LOCAL_SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n\n  server.destroy(options, () => {\n    topology.emit(\n      'serverClosed',\n      new events.ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    SERVER_RELAY_EVENTS.forEach(event => server.removeAllListeners(event));\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/**\n * Parses a basic seedlist in string form\n *\n * @param {string} seedlist The seedlist to parse\n */\nfunction parseStringSeedlist(seedlist) {\n  return seedlist.split(',').map(seed => ({\n    host: seed.split(':')[0],\n    port: seed.split(':')[1] || 27017\n  }));\n}\n\nfunction topologyTypeFromSeedlist(seedlist, options) {\n  if (options.directConnection) {\n    return TopologyType.Single;\n  }\n\n  const replicaSet = options.replicaSet || options.setName || options.rs_name;\n  if (replicaSet == null) {\n    return TopologyType.Unknown;\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(\n    'serverOpening',\n    new events.ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(serverDescription, topology.s.options, topology);\n  relayEvents(server, topology, SERVER_RELAY_EVENTS);\n\n  server.on('descriptionReceived', topology.serverUpdateHandler.bind(topology));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param {Topology} topology The topology responsible for the servers\n * @param {ServerDescription[]} serverDescriptions A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    server.s.description = incomingServerDescription;\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    destroyServer(server, topology);\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const topology = args.topology;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(topology) &&\n    !options.session.inTransaction() &&\n    options.explain === undefined;\n\n  topology.selectServer(writableServerSelector(), options, (err, server) => {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    const handler = (err, result) => {\n      if (!err) return callback(null, result);\n      if (!shouldRetryOperation(err)) {\n        err = getMMAPError(err);\n        return callback(err);\n      }\n\n      if (willRetryWrite) {\n        const newArgs = Object.assign({}, args, { retrying: true });\n        return executeWriteOperation(newArgs, options, callback);\n      }\n\n      return callback(err);\n    };\n\n    if (callback.operationId) {\n      handler.operationId = callback.operationId;\n    }\n\n    // increment and assign txnNumber\n    if (willRetryWrite) {\n      options.session.incrementTransactionNumber();\n      options.willRetryWrite = willRetryWrite;\n    }\n\n    // execute the write operation\n    server[op](ns, ops, options, handler);\n  });\n}\n\nfunction shouldRetryOperation(err) {\n  return err instanceof MongoError && err.hasErrorLabel('RetryableWriteError');\n}\n\nfunction srvPollingHandler(topology) {\n  return function handleSrvPolling(ev) {\n    const previousTopologyDescription = topology.s.description;\n    topology.s.description = topology.s.description.updateFromSrvPollingEvent(ev);\n    if (topology.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(topology);\n\n    topology.emit(\n      'topologyDescriptionChanged',\n      new events.TopologyDescriptionChangedEvent(\n        topology.s.id,\n        previousTopologyDescription,\n        topology.s.description\n      )\n    );\n  };\n}\n\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    clearTimeout(waitQueueMember.timer);\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoError('Topology is closed, please connect'));\n    return;\n  }\n\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess && topology[kWaitQueue].length; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      clearTimeout(waitQueueMember.timer);\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    const isSharded = topology.description.type === TopologyType.Sharded;\n    if (isSharded && transaction && transaction.isActive) {\n      transaction.pinServer(selectedServer);\n    }\n\n    clearTimeout(waitQueueMember.timer);\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    topology.s.servers.forEach(server => process.nextTick(() => server.requestCheck()));\n  }\n}\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Topology#serverOpening\n * @type {ServerOpeningEvent}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Topology#serverClosed\n * @type {ServerClosedEvent}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Topology#serverDescriptionChanged\n * @type {ServerDescriptionChangedEvent}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Topology#topologyOpening\n * @type {TopologyOpeningEvent}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Topology#topologyClosed\n * @type {TopologyClosedEvent}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Topology#topologyDescriptionChanged\n * @type {TopologyDescriptionChangedEvent}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Topology#serverHeartbeatStarted\n * @type {ServerHeartbeatStartedEvent}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Topology#serverHeartbeatFailed\n * @type {ServerHearbeatFailedEvent}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Topology#serverHeartbeatSucceeded\n * @type {ServerHeartbeatSucceededEvent}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Topology#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Topology#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Topology#commandFailed\n * @type {object}\n */\n\nmodule.exports = {\n  Topology\n};\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","require$$9","require$$10","require$$11","require$$12","serverSelection","EventEmitter","Denque","ReadPreference"],"mappings":"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"}