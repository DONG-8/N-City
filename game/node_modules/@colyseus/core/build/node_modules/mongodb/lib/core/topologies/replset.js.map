{"version":3,"file":"replset.js","sources":["../../../../../../../../node_modules/mongodb/lib/core/topologies/replset.js"],"sourcesContent":["'use strict';\n\nconst inherits = require('util').inherits;\nconst f = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\nconst ReadPreference = require('./read_preference');\nconst CoreCursor = require('../cursor').CoreCursor;\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\nconst Logger = require('../connection/logger');\nconst MongoError = require('../error').MongoError;\nconst Server = require('./server');\nconst ReplSetState = require('./replset_state');\nconst Timeout = require('./shared').Timeout;\nconst Interval = require('./shared').Interval;\nconst SessionMixins = require('./shared').SessionMixins;\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = retrieveBSON();\nconst getMMAPError = require('./shared').getMMAPError;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\nconst legacyIsRetryableWriteError = require('./shared').legacyIsRetryableWriteError;\nconst now = require('../../utils').now;\nconst calculateDurationInMs = require('../../utils').calculateDurationInMs;\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Pool with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Replset instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {boolean} options.setName The Replicaset set name\n * @param {boolean} [options.secondaryOnlyConnectionAllowed=false] Allow connection to a secondary only replicaset\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {boolean} [options.emitError=false] Server will emit errors events\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=120000] Initial delay before TCP keep alive enabled\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=10000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {number} [options.pingInterval=5000] Ping interval to check the response time to the different servers\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {ReplSet} A cursor instance\n * @fires ReplSet#connect\n * @fires ReplSet#ha\n * @fires ReplSet#joined\n * @fires ReplSet#left\n * @fires ReplSet#failed\n * @fires ReplSet#fullsetup\n * @fires ReplSet#all\n * @fires ReplSet#error\n * @fires ReplSet#serverHeartbeatStarted\n * @fires ReplSet#serverHeartbeatSucceeded\n * @fires ReplSet#serverHeartbeatFailed\n * @fires ReplSet#topologyOpening\n * @fires ReplSet#topologyClosed\n * @fires ReplSet#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar ReplSet = function(seedlist, options) {\n  var self = this;\n  options = options || {};\n\n  // Validate seedlist\n  if (!Array.isArray(seedlist)) throw new MongoError('seedlist must be an array');\n  // Validate list\n  if (seedlist.length === 0) throw new MongoError('seedlist must contain at least one entry');\n  // Validate entries\n  seedlist.forEach(function(e) {\n    if (typeof e.host !== 'string' || typeof e.port !== 'number')\n      throw new MongoError('seedlist entry must contain a host and port');\n  });\n\n  // Add event listener\n  EventEmitter.call(this);\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Get the localThresholdMS\n  var localThresholdMS = options.localThresholdMS || 15;\n  // Backward compatibility\n  if (options.acceptableLatency) localThresholdMS = options.acceptableLatency;\n\n  // Create a logger\n  var logger = Logger('ReplSet', options);\n\n  // Internal state\n  this.s = {\n    options: Object.assign({ metadata: makeClientMetadata(options) }, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: logger,\n    // Seedlist\n    seedlist: seedlist,\n    // Replicaset state\n    replicaSetState: new ReplSetState({\n      id: this.id,\n      setName: options.setName,\n      acceptableLatency: localThresholdMS,\n      heartbeatFrequencyMS: options.haInterval ? options.haInterval : 10000,\n      logger: logger\n    }),\n    // Current servers we are connecting to\n    connectingServers: [],\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Minimum heartbeat frequency used if we detect a server close\n    minHeartbeatFrequencyMS: 500,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false\n  };\n\n  // Add handler for topology change\n  this.s.replicaSetState.on('topologyDescriptionChanged', function(r) {\n    self.emit('topologyDescriptionChanged', r);\n  });\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Add forwarding of events from state handler\n  var types = ['joined', 'left'];\n  types.forEach(function(x) {\n    self.s.replicaSetState.on(x, function(t, s) {\n      self.emit(x, t, s);\n    });\n  });\n\n  // Connect stat\n  this.initialConnectState = {\n    connect: false,\n    fullsetup: false,\n    all: false\n  };\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n  // Contains the intervalId\n  this.intervalIds = [];\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n};\n\ninherits(ReplSet, EventEmitter);\nObject.assign(ReplSet.prototype, SessionMixins);\n\nObject.defineProperty(ReplSet.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'replset';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(ReplSet.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    return this.s.replicaSetState.logicalSessionTimeoutMinutes || null;\n  }\n});\n\nfunction rexecuteOperations(self) {\n  // If we have a primary and a disconnect handler, execute\n  // buffered operations\n  if (self.s.replicaSetState.hasPrimaryAndSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute();\n  } else if (self.s.replicaSetState.hasPrimary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executePrimary: true });\n  } else if (self.s.replicaSetState.hasSecondary() && self.s.disconnectHandler) {\n    self.s.disconnectHandler.execute({ executeSecondary: true });\n  }\n}\n\nfunction connectNewServers(self, servers, callback) {\n  // No new servers\n  if (servers.length === 0) {\n    return callback();\n  }\n\n  // Count lefts\n  var count = servers.length;\n  var error = null;\n\n  function done() {\n    count = count - 1;\n    if (count === 0) {\n      callback(error);\n    }\n  }\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function(err) {\n      var _self = this;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        this.destroy({ force: true });\n        return done();\n      }\n\n      if (event === 'connect') {\n        // Update the state\n        var result = self.s.replicaSetState.update(_self);\n        // Update the state with the new server\n        if (result) {\n          // Primary lastIsMaster store it\n          if (_self.lastIsMaster() && _self.lastIsMaster().ismaster) {\n            self.ismaster = _self.lastIsMaster();\n          }\n\n          // Remove the handlers\n          for (let i = 0; i < handlers.length; i++) {\n            _self.removeAllListeners(handlers[i]);\n          }\n\n          // Add stable state handlers\n          _self.on('error', handleEvent(self, 'error'));\n          _self.on('close', handleEvent(self, 'close'));\n          _self.on('timeout', handleEvent(self, 'timeout'));\n          _self.on('parseError', handleEvent(self, 'parseError'));\n\n          // Enalbe the monitoring of the new server\n          monitorServer(_self.lastIsMaster().me, self, {});\n\n          // Rexecute any stalled operation\n          rexecuteOperations(self);\n        } else {\n          _self.destroy({ force: true });\n        }\n      } else if (event === 'error') {\n        error = err;\n      }\n\n      // Rexecute any stalled operation\n      rexecuteOperations(self);\n      done();\n    };\n  };\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // remove existing connecting server if it's failed to connect, otherwise\n      // wait for that server to connect\n      const existingServerIdx = self.s.connectingServers.findIndex(s => s.name === _server);\n      if (existingServerIdx >= 0) {\n        const connectingServer = self.s.connectingServers[existingServerIdx];\n        connectingServer.destroy({ force: true });\n\n        self.s.connectingServers.splice(existingServerIdx, 1);\n        return done();\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.split(':')[0],\n          port: parseInt(_server.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self\n        })\n      );\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', e => self.emit('serverOpening', e));\n      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));\n      server.on('serverClosed', e => self.emit('serverClosed', e));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      self.s.connectingServers.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < servers.length; i++) {\n    execute(servers[i], i);\n  }\n}\n\n// Ping the server\nvar pingServer = function(self, server, cb) {\n  // Measure running time\n  var start = new Date().getTime();\n\n  // Emit the server heartbeat start\n  emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: server.name });\n\n  // Execute ismaster\n  // Set the socketTimeout for a monitoring message to a low number\n  // Ensuring ismaster calls are timed out quickly\n  server.command(\n    'admin.$cmd',\n    {\n      ismaster: true\n    },\n    {\n      monitoring: true,\n      socketTimeout: self.s.options.connectionTimeout || 2000\n    },\n    function(err, r) {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        server.destroy({ force: true });\n        return cb(err, r);\n      }\n\n      // Calculate latency\n      var latencyMS = new Date().getTime() - start;\n\n      // Set the last updatedTime\n      server.lastUpdateTime = now();\n\n      // We had an error, remove it from the state\n      if (err) {\n        // Emit the server heartbeat failure\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: server.name\n        });\n\n        // Remove server from the state\n        self.s.replicaSetState.remove(server);\n      } else {\n        // Update the server ismaster\n        server.ismaster = r.result;\n\n        // Check if we have a lastWriteDate convert it to MS\n        // and store on the server instance for later use\n        if (server.ismaster.lastWrite && server.ismaster.lastWrite.lastWriteDate) {\n          server.lastWriteDate = server.ismaster.lastWrite.lastWriteDate.getTime();\n        }\n\n        // Do we have a brand new server\n        if (server.lastIsMasterMS === -1) {\n          server.lastIsMasterMS = latencyMS;\n        } else if (server.lastIsMasterMS) {\n          // After the first measurement, average RTT MUST be computed using an\n          // exponentially-weighted moving average formula, with a weighting factor (alpha) of 0.2.\n          // If the prior average is denoted old_rtt, then the new average (new_rtt) is\n          // computed from a new RTT measurement (x) using the following formula:\n          // alpha = 0.2\n          // new_rtt = alpha * x + (1 - alpha) * old_rtt\n          server.lastIsMasterMS = 0.2 * latencyMS + (1 - 0.2) * server.lastIsMasterMS;\n        }\n\n        if (self.s.replicaSetState.update(server)) {\n          // Primary lastIsMaster store it\n          if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n            self.ismaster = server.lastIsMaster();\n          }\n        }\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: server.name\n        });\n      }\n\n      // Calculate the staleness for this server\n      self.s.replicaSetState.updateServerMaxStaleness(server, self.s.haInterval);\n\n      // Callback\n      cb(err, r);\n    }\n  );\n};\n\n// Each server is monitored in parallel in their own timeout loop\nvar monitorServer = function(host, self, options) {\n  // If this is not the initial scan\n  // Is this server already being monitoried, then skip monitoring\n  if (!options.haInterval) {\n    for (var i = 0; i < self.intervalIds.length; i++) {\n      if (self.intervalIds[i].__host === host) {\n        return;\n      }\n    }\n  }\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  // Create the interval\n  var intervalId = new _process(function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      // clearInterval(intervalId);\n      intervalId.stop();\n      return;\n    }\n\n    // Do we already have server connection available for this host\n    var _server = self.s.replicaSetState.get(host);\n\n    // Check if we have a known server connection and reuse\n    if (_server) {\n      // Ping the server\n      return pingServer(self, _server, function(err) {\n        if (err) {\n          // NOTE: should something happen here?\n          return;\n        }\n\n        if (self.state === DESTROYED || self.state === UNREFERENCED) {\n          intervalId.stop();\n          return;\n        }\n\n        // Filter out all called intervaliIds\n        self.intervalIds = self.intervalIds.filter(function(intervalId) {\n          return intervalId.isRunning();\n        });\n\n        // Initial sweep\n        if (_process === Timeout) {\n          if (\n            self.state === CONNECTING &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            stateTransition(self, CONNECTED);\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('connect', self);\n            });\n\n            // Start topology interval check\n            topologyMonitor(self, {});\n          }\n        } else {\n          if (\n            self.state === DISCONNECTED &&\n            ((self.s.replicaSetState.hasSecondary() &&\n              self.s.options.secondaryOnlyConnectionAllowed) ||\n              self.s.replicaSetState.hasPrimary())\n          ) {\n            stateTransition(self, CONNECTING);\n\n            // Rexecute any stalled operation\n            rexecuteOperations(self);\n\n            // Emit connected sign\n            process.nextTick(function() {\n              self.emit('reconnect', self);\n            });\n          }\n        }\n\n        if (\n          self.initialConnectState.connect &&\n          !self.initialConnectState.fullsetup &&\n          self.s.replicaSetState.hasPrimaryAndSecondary()\n        ) {\n          // Set initial connect state\n          self.initialConnectState.fullsetup = true;\n          self.initialConnectState.all = true;\n\n          process.nextTick(function() {\n            self.emit('fullsetup', self);\n            self.emit('all', self);\n          });\n        }\n      });\n    }\n  }, _haInterval);\n\n  // Start the interval\n  intervalId.start();\n  // Add the intervalId host name\n  intervalId.__host = host;\n  // Add the intervalId to our list of intervalIds\n  self.intervalIds.push(intervalId);\n};\n\nfunction topologyMonitor(self, options) {\n  if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n  options = options || {};\n\n  // Get the servers\n  var servers = Object.keys(self.s.replicaSetState.set);\n\n  // Get the haInterval\n  var _process = options.haInterval ? Timeout : Interval;\n  var _haInterval = options.haInterval ? options.haInterval : self.s.haInterval;\n\n  if (_process === Timeout) {\n    return connectNewServers(self, self.s.replicaSetState.unknownServers, function(err) {\n      // Don't emit errors if the connection was already\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      if (!self.s.replicaSetState.hasPrimary() && !self.s.options.secondaryOnlyConnectionAllowed) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no primary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      } else if (\n        !self.s.replicaSetState.hasSecondary() &&\n        self.s.options.secondaryOnlyConnectionAllowed\n      ) {\n        if (err) {\n          return self.emit('error', err);\n        }\n\n        self.emit(\n          'error',\n          new MongoError('no secondary found in replicaset or invalid replica set name')\n        );\n        return self.destroy({ force: true });\n      }\n\n      for (var i = 0; i < servers.length; i++) {\n        monitorServer(servers[i], self, options);\n      }\n    });\n  } else {\n    for (var i = 0; i < servers.length; i++) {\n      monitorServer(servers[i], self, options);\n    }\n  }\n\n  // Run the reconnect process\n  function executeReconnect(self) {\n    return function() {\n      if (self.state === DESTROYED || self.state === UNREFERENCED) {\n        return;\n      }\n\n      connectNewServers(self, self.s.replicaSetState.unknownServers, function() {\n        var monitoringFrequencey = self.s.replicaSetState.hasPrimary()\n          ? _haInterval\n          : self.s.minHeartbeatFrequencyMS;\n\n        // Create a timeout\n        self.intervalIds.push(new Timeout(executeReconnect(self), monitoringFrequencey).start());\n      });\n    };\n  }\n\n  // Decide what kind of interval to use\n  var intervalTime = !self.s.replicaSetState.hasPrimary()\n    ? self.s.minHeartbeatFrequencyMS\n    : _haInterval;\n\n  self.intervalIds.push(new Timeout(executeReconnect(self), intervalTime).start());\n}\n\nfunction addServerToList(list, server) {\n  for (var i = 0; i < list.length; i++) {\n    if (list[i].name.toLowerCase() === server.name.toLowerCase()) return true;\n  }\n\n  list.push(server);\n}\n\nfunction handleEvent(self, event) {\n  return function() {\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f('handleEvent %s from server %s in replset with id %s', event, this.name, self.id)\n      );\n    }\n\n    // Remove from the replicaset state\n    self.s.replicaSetState.remove(this);\n\n    // Are we in a destroyed state return\n    if (self.state === DESTROYED || self.state === UNREFERENCED) return;\n\n    // If no primary and secondary available\n    if (\n      !self.s.replicaSetState.hasPrimary() &&\n      !self.s.replicaSetState.hasSecondary() &&\n      self.s.options.secondaryOnlyConnectionAllowed\n    ) {\n      stateTransition(self, DISCONNECTED);\n    } else if (!self.s.replicaSetState.hasPrimary()) {\n      stateTransition(self, DISCONNECTED);\n    }\n\n    addServerToList(self.s.connectingServers, this);\n  };\n}\n\nfunction shouldTriggerConnect(self) {\n  const isConnecting = self.state === CONNECTING;\n  const hasPrimary = self.s.replicaSetState.hasPrimary();\n  const hasSecondary = self.s.replicaSetState.hasSecondary();\n  const secondaryOnlyConnectionAllowed = self.s.options.secondaryOnlyConnectionAllowed;\n  const readPreferenceSecondary =\n    self.s.connectOptions.readPreference &&\n    self.s.connectOptions.readPreference.equals(ReadPreference.secondary);\n\n  return (\n    (isConnecting &&\n      ((readPreferenceSecondary && hasSecondary) || (!readPreferenceSecondary && hasPrimary))) ||\n    (hasSecondary && secondaryOnlyConnectionAllowed)\n  );\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n    // Debug log\n    if (self.s.logger.isDebug()) {\n      self.s.logger.debug(\n        f(\n          'handleInitialConnectEvent %s from server %s in replset with id %s',\n          event,\n          this.name,\n          self.id\n        )\n      );\n    }\n\n    // Destroy the instance\n    if (self.state === DESTROYED || self.state === UNREFERENCED) {\n      return this.destroy({ force: true });\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Update the state\n      var result = self.s.replicaSetState.update(_this);\n      if (result === true) {\n        // Primary lastIsMaster store it\n        if (_this.lastIsMaster() && _this.lastIsMaster().ismaster) {\n          self.ismaster = _this.lastIsMaster();\n        }\n\n        // Debug log\n        if (self.s.logger.isDebug()) {\n          self.s.logger.debug(\n            f(\n              'handleInitialConnectEvent %s from server %s in replset with id %s has state [%s]',\n              event,\n              _this.name,\n              self.id,\n              JSON.stringify(self.s.replicaSetState.set)\n            )\n          );\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Do we have a primary or primaryAndSecondary\n        if (shouldTriggerConnect(self)) {\n          // We are connected\n          stateTransition(self, CONNECTED);\n\n          // Set initial connect state\n          self.initialConnectState.connect = true;\n          // Emit connect event\n          process.nextTick(function() {\n            self.emit('connect', self);\n          });\n\n          topologyMonitor(self, {});\n        }\n      } else if (result instanceof MongoError) {\n        _this.destroy({ force: true });\n        self.destroy({ force: true });\n        return self.emit('error', result);\n      } else {\n        _this.destroy({ force: true });\n      }\n    } else {\n      // Emit failure to connect\n      self.emit('failed', this);\n\n      addServerToList(self.s.connectingServers, this);\n      // Remove from the state\n      self.s.replicaSetState.remove(this);\n    }\n\n    if (\n      self.initialConnectState.connect &&\n      !self.initialConnectState.fullsetup &&\n      self.s.replicaSetState.hasPrimaryAndSecondary()\n    ) {\n      // Set initial connect state\n      self.initialConnectState.fullsetup = true;\n      self.initialConnectState.all = true;\n\n      process.nextTick(function() {\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      });\n    }\n\n    // Remove from the list from connectingServers\n    for (var i = 0; i < self.s.connectingServers.length; i++) {\n      if (self.s.connectingServers[i].equals(this)) {\n        self.s.connectingServers.splice(i, 1);\n      }\n    }\n\n    // Trigger topologyMonitor\n    if (self.s.connectingServers.length === 0 && self.state === CONNECTING) {\n      topologyMonitor(self, { haInterval: 1 });\n    }\n  };\n}\n\nfunction connectServers(self, servers) {\n  // Update connectingServers\n  self.s.connectingServers = self.s.connectingServers.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Add the server to the state\n      if (self.s.replicaSetState.update(server)) {\n        // Primary lastIsMaster store it\n        if (server.lastIsMaster() && server.lastIsMaster().ismaster) {\n          self.ismaster = server.lastIsMaster();\n        }\n      }\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // SDAM Monitoring events\n      server.on('serverOpening', e => self.emit('serverOpening', e));\n      server.on('serverDescriptionChanged', e => self.emit('serverDescriptionChanged', e));\n      server.on('serverClosed', e => self.emit('serverClosed', e));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  while (servers.length > 0) {\n    connect(servers.shift(), timeoutInterval++);\n  }\n}\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\n/**\n * Initiate server connect\n */\nReplSet.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    return new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      })\n    );\n  });\n\n  // Error out as high availability interval must be < than socketTimeout\n  if (\n    this.s.options.socketTimeout > 0 &&\n    this.s.options.socketTimeout <= this.s.options.haInterval\n  ) {\n    return self.emit(\n      'error',\n      new MongoError(\n        f(\n          'haInterval [%s] MS must be set to less than socketTimeout [%s] MS',\n          this.s.options.haInterval,\n          this.s.options.socketTimeout\n        )\n      )\n    );\n  }\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n  // Start all server connections\n  connectServers(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nReplSet.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nReplSet.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  let destroyCount = this.s.connectingServers.length + 1; // +1 for the callback from `replicaSetState.destroy`\n  const serverDestroyed = () => {\n    destroyCount--;\n    if (destroyCount > 0) {\n      return;\n    }\n\n    // Emit toplogy closing event\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (this.state === DESTROYED) {\n    if (typeof callback === 'function') callback(null, null);\n    return;\n  }\n\n  // Transition state\n  stateTransition(this, DESTROYED);\n\n  // Clear out any monitoring process\n  if (this.haTimeoutId) clearTimeout(this.haTimeoutId);\n\n  // Clear out all monitoring\n  for (var i = 0; i < this.intervalIds.length; i++) {\n    this.intervalIds[i].stop();\n  }\n\n  // Reset list of intervalIds\n  this.intervalIds = [];\n\n  if (destroyCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy the replicaset\n  this.s.replicaSetState.destroy(options, serverDestroyed);\n\n  // Destroy all connecting servers\n  this.s.connectingServers.forEach(function(x) {\n    x.destroy(options, serverDestroyed);\n  });\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nReplSet.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n\n  this.s.replicaSetState.allServers().forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nReplSet.prototype.lastIsMaster = function() {\n  // If secondaryOnlyConnectionAllowed and no primary but secondary\n  // return the secondaries ismaster result.\n  if (\n    this.s.options.secondaryOnlyConnectionAllowed &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.replicaSetState.hasSecondary()\n  ) {\n    return this.s.replicaSetState.secondaries[0].lastIsMaster();\n  }\n\n  return this.s.replicaSetState.primary\n    ? this.s.replicaSetState.primary.lastIsMaster()\n    : this.ismaster;\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nReplSet.prototype.connections = function() {\n  var servers = this.s.replicaSetState.allServers();\n  var connections = [];\n  for (var i = 0; i < servers.length; i++) {\n    connections = connections.concat(servers[i].connections());\n  }\n\n  return connections;\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @return {boolean}\n */\nReplSet.prototype.isConnected = function(options) {\n  options = options || {};\n\n  // If we specified a read preference check if we are connected to something\n  // than can satisfy this\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondary)) {\n    return this.s.replicaSetState.hasSecondary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primary)) {\n    return this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.primaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (options.readPreference && options.readPreference.equals(ReadPreference.secondaryPreferred)) {\n    return this.s.replicaSetState.hasSecondary() || this.s.replicaSetState.hasPrimary();\n  }\n\n  if (this.s.options.secondaryOnlyConnectionAllowed && this.s.replicaSetState.hasSecondary()) {\n    return true;\n  }\n\n  return this.s.replicaSetState.hasPrimary();\n};\n\n/**\n * Figure out if the replicaset instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nReplSet.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\nconst SERVER_SELECTION_TIMEOUT_MS = 10000; // hardcoded `serverSelectionTimeoutMS` for legacy topology\nconst SERVER_SELECTION_INTERVAL_MS = 1000; // time to wait between selection attempts\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {ClientSession} [options.session] Unused\n * @param {function} callback\n */\nReplSet.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function') (callback = options), (options = selector);\n  options = options || {};\n\n  let readPreference;\n  if (selector instanceof ReadPreference) {\n    readPreference = selector;\n  } else {\n    readPreference = options.readPreference || ReadPreference.primary;\n  }\n\n  let lastError;\n  const start = now();\n  const _selectServer = () => {\n    if (calculateDurationInMs(start) >= SERVER_SELECTION_TIMEOUT_MS) {\n      if (lastError != null) {\n        callback(lastError, null);\n      } else {\n        callback(new MongoError('Server selection timed out'));\n      }\n\n      return;\n    }\n\n    const server = this.s.replicaSetState.pickServer(readPreference);\n    if (server == null) {\n      setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);\n      return;\n    }\n\n    if (!(server instanceof Server)) {\n      lastError = server;\n      setTimeout(_selectServer, SERVER_SELECTION_INTERVAL_MS);\n      return;\n    }\n\n    if (this.s.debug) this.emit('pickedServer', options.readPreference, server);\n    callback(null, server);\n  };\n\n  _selectServer();\n};\n\n/**\n * Get all connected servers\n * @method\n * @return {Server[]}\n */\nReplSet.prototype.getServers = function() {\n  return this.s.replicaSetState.allServers();\n};\n\n//\n// Execute write operation\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  if (self.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    options.explain === undefined;\n\n  if (!self.s.replicaSetState.hasPrimary()) {\n    if (self.s.disconnectHandler) {\n      // Not connected but we have a disconnecthandler\n      return self.s.disconnectHandler.add(op, ns, ops, options, callback);\n    } else if (!willRetryWrite) {\n      // No server returned we had an error\n      return callback(new MongoError('no primary server found'));\n    }\n  }\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self)) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newArgs = Object.assign({}, args, { retrying: true });\n      return executeWriteOperation(newArgs, options, callback);\n    }\n\n    // Per SDAM, remove primary from replicaset\n    if (self.s.replicaSetState.primary) {\n      self.s.replicaSetState.primary.destroy();\n      self.s.replicaSetState.remove(self.s.replicaSetState.primary, { force: true });\n    }\n\n    return callback(err);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  self.s.replicaSetState.primary[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.insert = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.update = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.remove = function(ns, ops, options, callback) {\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nReplSet.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) return callback(new MongoError(f('topology was destroyed')));\n  var self = this;\n\n  // Establish readPreference\n  var readPreference = options.readPreference ? options.readPreference : ReadPreference.primary;\n\n  // If the readPreference is primary and we have no primary, store it\n  if (\n    readPreference.preference === 'primary' &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference === 'secondary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } else if (\n    readPreference.preference !== 'primary' &&\n    !this.s.replicaSetState.hasSecondary() &&\n    !this.s.replicaSetState.hasPrimary() &&\n    this.s.disconnectHandler != null\n  ) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // Pick a server\n  var server = this.s.replicaSetState.pickServer(readPreference);\n  // We received an error, return it\n  if (!(server instanceof Server)) return callback(server);\n  // Emit debug event\n  if (self.s.debug) self.emit('pickedServer', ReadPreference.primary, server);\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(\n      new MongoError(\n        f('no server found that matches the provided readPreference %s', readPreference)\n      )\n    );\n  }\n\n  const willRetryWrite =\n    !options.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!legacyIsRetryableWriteError(err, self)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, options, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    // Per SDAM, remove primary from replicaset\n    if (this.s.replicaSetState.primary) {\n      this.s.replicaSetState.primary.destroy();\n      this.s.replicaSetState.remove(this.s.replicaSetState.primary, { force: true });\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, options, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nReplSet.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * A replset connect event, used to verify that the connection is up and running\n *\n * @event ReplSet#connect\n * @type {ReplSet}\n */\n\n/**\n * A replset reconnect event, used to verify that the topology reconnected\n *\n * @event ReplSet#reconnect\n * @type {ReplSet}\n */\n\n/**\n * A replset fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#fullsetup\n * @type {ReplSet}\n */\n\n/**\n * A replset all event, used to signal that all topology members have been contacted.\n *\n * @event ReplSet#all\n * @type {ReplSet}\n */\n\n/**\n * A replset failed event, used to signal that initial replset connection failed.\n *\n * @event ReplSet#failed\n * @type {ReplSet}\n */\n\n/**\n * A server member left the replicaset\n *\n * @event ReplSet#left\n * @type {function}\n * @param {string} type The type of member that left (primary|secondary|arbiter)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the replicaset\n *\n * @event ReplSet#joined\n * @type {function}\n * @param {string} type The type of member that joined (primary|secondary|arbiter)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event ReplSet#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event ReplSet#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event ReplSet#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event ReplSet#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event ReplSet#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event ReplSet#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event ReplSet#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event ReplSet#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event ReplSet#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event ReplSet#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event ReplSet#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event ReplSet#commandFailed\n * @type {object}\n */\n\nmodule.exports = ReplSet;\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","logger","Logger","ReplSetState","server","Server","ReadPreference"],"mappings":"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"}