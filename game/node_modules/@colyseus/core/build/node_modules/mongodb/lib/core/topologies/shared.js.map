{"version":3,"file":"shared.js","sources":["../../../../../../../../node_modules/mongodb/lib/core/topologies/shared.js"],"sourcesContent":["'use strict';\nconst ReadPreference = require('./read_preference');\nconst TopologyType = require('../sdam/common').TopologyType;\nconst MongoError = require('../error').MongoError;\nconst isRetryableWriteError = require('../error').isRetryableWriteError;\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst MMAPv1_RETRY_WRITES_ERROR_CODE = 20;\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nfunction createCompressionInfo(options) {\n  if (!options.compression || !options.compression.compressors) {\n    return [];\n  }\n\n  // Check that all supplied compressors are valid\n  options.compression.compressors.forEach(function(compressor) {\n    if (compressor !== 'snappy' && compressor !== 'zlib') {\n      throw new Error('compressors must be at least one of snappy or zlib');\n    }\n  });\n\n  return options.compression.compressors;\n}\n\nfunction clone(object) {\n  return JSON.parse(JSON.stringify(object));\n}\n\nvar getPreviousDescription = function(self) {\n  if (!self.s.serverDescription) {\n    self.s.serverDescription = {\n      address: self.name,\n      arbiters: [],\n      hosts: [],\n      passives: [],\n      type: 'Unknown'\n    };\n  }\n\n  return self.s.serverDescription;\n};\n\nvar emitServerDescriptionChanged = function(self, description) {\n  if (self.listeners('serverDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('serverDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar getPreviousTopologyDescription = function(self) {\n  if (!self.s.topologyDescription) {\n    self.s.topologyDescription = {\n      topologyType: 'Unknown',\n      servers: [\n        {\n          address: self.name,\n          arbiters: [],\n          hosts: [],\n          passives: [],\n          type: 'Unknown'\n        }\n      ]\n    };\n  }\n\n  return self.s.topologyDescription;\n};\n\nvar emitTopologyDescriptionChanged = function(self, description) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    // Emit the server description changed events\n    self.emit('topologyDescriptionChanged', {\n      topologyId: self.s.topologyId !== -1 ? self.s.topologyId : self.id,\n      address: self.name,\n      previousDescription: getPreviousTopologyDescription(self),\n      newDescription: description\n    });\n\n    self.s.serverDescription = description;\n  }\n};\n\nvar changedIsMaster = function(self, currentIsmaster, ismaster) {\n  var currentType = getTopologyType(self, currentIsmaster);\n  var newType = getTopologyType(self, ismaster);\n  if (newType !== currentType) return true;\n  return false;\n};\n\nvar getTopologyType = function(self, ismaster) {\n  if (!ismaster) {\n    ismaster = self.ismaster;\n  }\n\n  if (!ismaster) return 'Unknown';\n  if (ismaster.ismaster && ismaster.msg === 'isdbgrid') return 'Mongos';\n  if (ismaster.ismaster && !ismaster.hosts) return 'Standalone';\n  if (ismaster.ismaster) return 'RSPrimary';\n  if (ismaster.secondary) return 'RSSecondary';\n  if (ismaster.arbiterOnly) return 'RSArbiter';\n  return 'Unknown';\n};\n\nvar inquireServerState = function(self) {\n  return function(callback) {\n    if (self.s.state === 'destroyed') return;\n    // Record response time\n    var start = new Date().getTime();\n\n    // emitSDAMEvent\n    emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: self.name });\n\n    // Attempt to execute ismaster command\n    self.command('admin.$cmd', { ismaster: true }, { monitoring: true }, function(err, r) {\n      if (!err) {\n        // Legacy event sender\n        self.emit('ismaster', r, self);\n\n        // Calculate latencyMS\n        var latencyMS = new Date().getTime() - start;\n\n        // Server heart beat event\n        emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n          durationMS: latencyMS,\n          reply: r.result,\n          connectionId: self.name\n        });\n\n        // Did the server change\n        if (changedIsMaster(self, self.s.ismaster, r.result)) {\n          // Emit server description changed if something listening\n          emitServerDescriptionChanged(self, {\n            address: self.name,\n            arbiters: [],\n            hosts: [],\n            passives: [],\n            type: !self.s.inTopology ? 'Standalone' : getTopologyType(self)\n          });\n        }\n\n        // Updat ismaster view\n        self.s.ismaster = r.result;\n\n        // Set server response time\n        self.s.isMasterLatencyMS = latencyMS;\n      } else {\n        emitSDAMEvent(self, 'serverHeartbeatFailed', {\n          durationMS: latencyMS,\n          failure: err,\n          connectionId: self.name\n        });\n      }\n\n      // Peforming an ismaster monitoring callback operation\n      if (typeof callback === 'function') {\n        return callback(err, r);\n      }\n\n      // Perform another sweep\n      self.s.inquireServerStateTimeout = setTimeout(inquireServerState(self), self.s.haInterval);\n    });\n  };\n};\n\n//\n// Clone the options\nvar cloneOptions = function(options) {\n  var opts = {};\n  for (var name in options) {\n    opts[name] = options[name];\n  }\n  return opts;\n};\n\nfunction Interval(fn, time) {\n  var timer = false;\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setInterval(fn, time);\n    }\n\n    return this;\n  };\n\n  this.stop = function() {\n    clearInterval(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    return timer !== false;\n  };\n}\n\nfunction Timeout(fn, time) {\n  var timer = false;\n  var func = () => {\n    if (timer) {\n      clearTimeout(timer);\n      timer = false;\n\n      fn();\n    }\n  };\n\n  this.start = function() {\n    if (!this.isRunning()) {\n      timer = setTimeout(func, time);\n    }\n    return this;\n  };\n\n  this.stop = function() {\n    clearTimeout(timer);\n    timer = false;\n    return this;\n  };\n\n  this.isRunning = function() {\n    return timer !== false;\n  };\n}\n\nfunction diff(previous, current) {\n  // Difference document\n  var diff = {\n    servers: []\n  };\n\n  // Previous entry\n  if (!previous) {\n    previous = { servers: [] };\n  }\n\n  // Check if we have any previous servers missing in the current ones\n  for (var i = 0; i < previous.servers.length; i++) {\n    var found = false;\n\n    for (var j = 0; j < current.servers.length; j++) {\n      if (current.servers[j].address.toLowerCase() === previous.servers[i].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      // Add to the diff\n      diff.servers.push({\n        address: previous.servers[i].address,\n        from: previous.servers[i].type,\n        to: 'Unknown'\n      });\n    }\n  }\n\n  // Check if there are any severs that don't exist\n  for (j = 0; j < current.servers.length; j++) {\n    found = false;\n\n    // Go over all the previous servers\n    for (i = 0; i < previous.servers.length; i++) {\n      if (previous.servers[i].address.toLowerCase() === current.servers[j].address.toLowerCase()) {\n        found = true;\n        break;\n      }\n    }\n\n    // Add the server to the diff\n    if (!found) {\n      diff.servers.push({\n        address: current.servers[j].address,\n        from: 'Unknown',\n        to: current.servers[j].type\n      });\n    }\n  }\n\n  // Got through all the servers\n  for (i = 0; i < previous.servers.length; i++) {\n    var prevServer = previous.servers[i];\n\n    // Go through all current servers\n    for (j = 0; j < current.servers.length; j++) {\n      var currServer = current.servers[j];\n\n      // Matching server\n      if (prevServer.address.toLowerCase() === currServer.address.toLowerCase()) {\n        // We had a change in state\n        if (prevServer.type !== currServer.type) {\n          diff.servers.push({\n            address: prevServer.address,\n            from: prevServer.type,\n            to: currServer.type\n          });\n        }\n      }\n    }\n  }\n\n  // Return difference\n  return diff;\n}\n\n/**\n * Shared function to determine clusterTime for a given topology\n *\n * @param {*} topology\n * @param {*} clusterTime\n */\nfunction resolveClusterTime(topology, $clusterTime) {\n  if (topology.clusterTime == null) {\n    topology.clusterTime = $clusterTime;\n  } else {\n    if ($clusterTime.clusterTime.greaterThan(topology.clusterTime.clusterTime)) {\n      topology.clusterTime = $clusterTime;\n    }\n  }\n}\n\n// NOTE: this is a temporary move until the topologies can be more formally refactored\n//       to share code.\nconst SessionMixins = {\n  endSessions: function(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    // TODO:\n    //   When connected to a sharded cluster the endSessions command\n    //   can be sent to any mongos. When connected to a replica set the\n    //   endSessions command MUST be sent to the primary if the primary\n    //   is available, otherwise it MUST be sent to any available secondary.\n    //   Is it enough to use: ReadPreference.primaryPreferred ?\n    this.command(\n      'admin.$cmd',\n      { endSessions: sessions },\n      { readPreference: ReadPreference.primaryPreferred },\n      () => {\n        // intentionally ignored, per spec\n        if (typeof callback === 'function') callback();\n      }\n    );\n  }\n};\n\nfunction topologyType(topology) {\n  if (topology.description) {\n    return topology.description.type;\n  }\n\n  if (topology.type === 'mongos') {\n    return TopologyType.Sharded;\n  } else if (topology.type === 'replset') {\n    return TopologyType.ReplicaSetWithPrimary;\n  }\n\n  return TopologyType.Single;\n}\n\nconst RETRYABLE_WIRE_VERSION = 6;\n\n/**\n * Determines whether the provided topology supports retryable writes\n *\n * @param {Mongos|Replset} topology\n */\nconst isRetryableWritesSupported = function(topology) {\n  const maxWireVersion = topology.lastIsMaster().maxWireVersion;\n  if (maxWireVersion < RETRYABLE_WIRE_VERSION) {\n    return false;\n  }\n\n  if (!topology.logicalSessionTimeoutMinutes) {\n    return false;\n  }\n\n  if (topologyType(topology) === TopologyType.Single) {\n    return false;\n  }\n\n  return true;\n};\n\nconst MMAPv1_RETRY_WRITES_ERROR_MESSAGE =\n  'This MongoDB deployment does not support retryable writes. Please add retryWrites=false to your connection string.';\n\nfunction getMMAPError(err) {\n  if (err.code !== MMAPv1_RETRY_WRITES_ERROR_CODE || !err.errmsg.includes('Transaction numbers')) {\n    return err;\n  }\n\n  // According to the retryable writes spec, we must replace the error message in this case.\n  // We need to replace err.message so the thrown message is correct and we need to replace err.errmsg to meet the spec requirement.\n  const newErr = new MongoError({\n    message: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n    errmsg: MMAPv1_RETRY_WRITES_ERROR_MESSAGE,\n    originalError: err\n  });\n  return newErr;\n}\n\n// NOTE: only used for legacy topology types\nfunction legacyIsRetryableWriteError(err, topology) {\n  if (!(err instanceof MongoError)) {\n    return false;\n  }\n\n  // if pre-4.4 server, then add error label if its a retryable write error\n  if (\n    isRetryableWritesSupported(topology) &&\n    (err instanceof MongoNetworkError ||\n      (maxWireVersion(topology) < 9 && isRetryableWriteError(err)))\n  ) {\n    err.addErrorLabel('RetryableWriteError');\n  }\n\n  return err.hasErrorLabel('RetryableWriteError');\n}\n\nmodule.exports = {\n  SessionMixins,\n  resolveClusterTime,\n  inquireServerState,\n  getTopologyType,\n  emitServerDescriptionChanged,\n  emitTopologyDescriptionChanged,\n  cloneOptions,\n  createCompressionInfo,\n  clone,\n  diff,\n  Interval,\n  Timeout,\n  isRetryableWritesSupported,\n  getMMAPError,\n  topologyType,\n  legacyIsRetryableWriteError\n};\n"],"names":["require$$0","require$$1","require$$2","ReadPreference"],"mappings":"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"}