{"version":3,"file":"topology_description.mjs","sources":["../../../../../../../../node_modules/mongodb/lib/core/sdam/topology_description.js"],"sourcesContent":["'use strict';\nconst ServerType = require('./common').ServerType;\nconst ServerDescription = require('./server_description').ServerDescription;\nconst WIRE_CONSTANTS = require('../wireprotocol/constants');\nconst TopologyType = require('./common').TopologyType;\n\n// contstants related to compatability checks\nconst MIN_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_SERVER_VERSION;\nconst MAX_SUPPORTED_SERVER_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_SERVER_VERSION;\nconst MIN_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MIN_SUPPORTED_WIRE_VERSION;\nconst MAX_SUPPORTED_WIRE_VERSION = WIRE_CONSTANTS.MAX_SUPPORTED_WIRE_VERSION;\n\n// Representation of a deployment of servers\nclass TopologyDescription {\n  /**\n   * Create a TopologyDescription\n   *\n   * @param {string} topologyType\n   * @param {Map<string, ServerDescription>} serverDescriptions the a map of address to ServerDescription\n   * @param {string} setName\n   * @param {number} maxSetVersion\n   * @param {ObjectId} maxElectionId\n   */\n  constructor(\n    topologyType,\n    serverDescriptions,\n    setName,\n    maxSetVersion,\n    maxElectionId,\n    commonWireVersion,\n    options\n  ) {\n    options = options || {};\n\n    // TODO: consider assigning all these values to a temporary value `s` which\n    //       we use `Object.freeze` on, ensuring the internal state of this type\n    //       is immutable.\n    this.type = topologyType || TopologyType.Unknown;\n    this.setName = setName || null;\n    this.maxSetVersion = maxSetVersion || null;\n    this.maxElectionId = maxElectionId || null;\n    this.servers = serverDescriptions || new Map();\n    this.stale = false;\n    this.compatible = true;\n    this.compatibilityError = null;\n    this.logicalSessionTimeoutMinutes = null;\n    this.heartbeatFrequencyMS = options.heartbeatFrequencyMS || 0;\n    this.localThresholdMS = options.localThresholdMS || 0;\n    this.commonWireVersion = commonWireVersion || null;\n\n    // save this locally, but don't display when printing the instance out\n    Object.defineProperty(this, 'options', { value: options, enumberable: false });\n\n    // determine server compatibility\n    for (const serverDescription of this.servers.values()) {\n      if (serverDescription.type === ServerType.Unknown) continue;\n\n      if (serverDescription.minWireVersion > MAX_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} requires wire version ${serverDescription.minWireVersion}, but this version of the driver only supports up to ${MAX_SUPPORTED_WIRE_VERSION} (MongoDB ${MAX_SUPPORTED_SERVER_VERSION})`;\n      }\n\n      if (serverDescription.maxWireVersion < MIN_SUPPORTED_WIRE_VERSION) {\n        this.compatible = false;\n        this.compatibilityError = `Server at ${serverDescription.address} reports wire version ${serverDescription.maxWireVersion}, but this version of the driver requires at least ${MIN_SUPPORTED_WIRE_VERSION} (MongoDB ${MIN_SUPPORTED_SERVER_VERSION}).`;\n        break;\n      }\n    }\n\n    // Whenever a client updates the TopologyDescription from an ismaster response, it MUST set\n    // TopologyDescription.logicalSessionTimeoutMinutes to the smallest logicalSessionTimeoutMinutes\n    // value among ServerDescriptions of all data-bearing server types. If any have a null\n    // logicalSessionTimeoutMinutes, then TopologyDescription.logicalSessionTimeoutMinutes MUST be\n    // set to null.\n    this.logicalSessionTimeoutMinutes = null;\n    for (const addressServerTuple of this.servers) {\n      const server = addressServerTuple[1];\n      if (server.isReadable) {\n        if (server.logicalSessionTimeoutMinutes == null) {\n          // If any of the servers have a null logicalSessionsTimeout, then the whole topology does\n          this.logicalSessionTimeoutMinutes = null;\n          break;\n        }\n\n        if (this.logicalSessionTimeoutMinutes == null) {\n          // First server with a non null logicalSessionsTimeout\n          this.logicalSessionTimeoutMinutes = server.logicalSessionTimeoutMinutes;\n          continue;\n        }\n\n        // Always select the smaller of the:\n        // current server logicalSessionsTimeout and the topologies logicalSessionsTimeout\n        this.logicalSessionTimeoutMinutes = Math.min(\n          this.logicalSessionTimeoutMinutes,\n          server.logicalSessionTimeoutMinutes\n        );\n      }\n    }\n  }\n\n  /**\n   * Returns a new TopologyDescription based on the SrvPollingEvent\n   * @param {SrvPollingEvent} ev The event\n   */\n  updateFromSrvPollingEvent(ev) {\n    const newAddresses = ev.addresses();\n    const serverDescriptions = new Map(this.servers);\n    for (const server of this.servers) {\n      if (newAddresses.has(server[0])) {\n        newAddresses.delete(server[0]);\n      } else {\n        serverDescriptions.delete(server[0]);\n      }\n    }\n\n    if (serverDescriptions.size === this.servers.size && newAddresses.size === 0) {\n      return this;\n    }\n\n    for (const address of newAddresses) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n\n    return new TopologyDescription(\n      this.type,\n      serverDescriptions,\n      this.setName,\n      this.maxSetVersion,\n      this.maxElectionId,\n      this.commonWireVersion,\n      this.options,\n      null\n    );\n  }\n\n  /**\n   * Returns a copy of this description updated with a given ServerDescription\n   *\n   * @param {ServerDescription} serverDescription\n   */\n  update(serverDescription) {\n    const address = serverDescription.address;\n    // NOTE: there are a number of prime targets for refactoring here\n    //       once we support destructuring assignments\n\n    // potentially mutated values\n    let topologyType = this.type;\n    let setName = this.setName;\n    let maxSetVersion = this.maxSetVersion;\n    let maxElectionId = this.maxElectionId;\n    let commonWireVersion = this.commonWireVersion;\n\n    if (serverDescription.setName && setName && serverDescription.setName !== setName) {\n      serverDescription = new ServerDescription(address, null);\n    }\n\n    const serverType = serverDescription.type;\n    let serverDescriptions = new Map(this.servers);\n\n    // update common wire version\n    if (serverDescription.maxWireVersion !== 0) {\n      if (commonWireVersion == null) {\n        commonWireVersion = serverDescription.maxWireVersion;\n      } else {\n        commonWireVersion = Math.min(commonWireVersion, serverDescription.maxWireVersion);\n      }\n    }\n\n    // update the actual server description\n    serverDescriptions.set(address, serverDescription);\n\n    if (topologyType === TopologyType.Single) {\n      // once we are defined as single, that never changes\n      return new TopologyDescription(\n        TopologyType.Single,\n        serverDescriptions,\n        setName,\n        maxSetVersion,\n        maxElectionId,\n        commonWireVersion,\n        this.options\n      );\n    }\n\n    if (topologyType === TopologyType.Unknown) {\n      if (serverType === ServerType.Standalone && this.servers.size !== 1) {\n        serverDescriptions.delete(address);\n      } else {\n        topologyType = topologyTypeForServerType(serverType);\n      }\n    }\n\n    if (topologyType === TopologyType.Sharded) {\n      if ([ServerType.Mongos, ServerType.Unknown].indexOf(serverType) === -1) {\n        serverDescriptions.delete(address);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetNoPrimary) {\n      if ([ServerType.Standalone, ServerType.Mongos].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n      }\n\n      if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        const result = updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription);\n        (topologyType = result[0]), (setName = result[1]);\n      }\n    }\n\n    if (topologyType === TopologyType.ReplicaSetWithPrimary) {\n      if ([ServerType.Standalone, ServerType.Mongos].indexOf(serverType) >= 0) {\n        serverDescriptions.delete(address);\n        topologyType = checkHasPrimary(serverDescriptions);\n      } else if (serverType === ServerType.RSPrimary) {\n        const result = updateRsFromPrimary(\n          serverDescriptions,\n          setName,\n          serverDescription,\n          maxSetVersion,\n          maxElectionId\n        );\n\n        (topologyType = result[0]),\n          (setName = result[1]),\n          (maxSetVersion = result[2]),\n          (maxElectionId = result[3]);\n      } else if (\n        [ServerType.RSSecondary, ServerType.RSArbiter, ServerType.RSOther].indexOf(serverType) >= 0\n      ) {\n        topologyType = updateRsWithPrimaryFromMember(\n          serverDescriptions,\n          setName,\n          serverDescription\n        );\n      } else {\n        topologyType = checkHasPrimary(serverDescriptions);\n      }\n    }\n\n    return new TopologyDescription(\n      topologyType,\n      serverDescriptions,\n      setName,\n      maxSetVersion,\n      maxElectionId,\n      commonWireVersion,\n      this.options\n    );\n  }\n\n  get error() {\n    const descriptionsWithError = Array.from(this.servers.values()).filter(sd => sd.error);\n    if (descriptionsWithError.length > 0) {\n      return descriptionsWithError[0].error;\n    }\n    return undefined;\n  }\n\n  /**\n   * Determines if the topology description has any known servers\n   */\n  get hasKnownServers() {\n    return Array.from(this.servers.values()).some(sd => sd.type !== ServerType.Unknown);\n  }\n\n  /**\n   * Determines if this topology description has a data-bearing server available.\n   */\n  get hasDataBearingServers() {\n    return Array.from(this.servers.values()).some(sd => sd.isDataBearing);\n  }\n\n  /**\n   * Determines if the topology has a definition for the provided address\n   *\n   * @param {String} address\n   * @return {Boolean} Whether the topology knows about this server\n   */\n  hasServer(address) {\n    return this.servers.has(address);\n  }\n}\n\nfunction topologyTypeForServerType(serverType) {\n  if (serverType === ServerType.Standalone) {\n    return TopologyType.Single;\n  }\n\n  if (serverType === ServerType.Mongos) {\n    return TopologyType.Sharded;\n  }\n\n  if (serverType === ServerType.RSPrimary) {\n    return TopologyType.ReplicaSetWithPrimary;\n  }\n\n  if (serverType === ServerType.RSGhost || serverType === ServerType.Unknown) {\n    return TopologyType.Unknown;\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nfunction compareObjectId(oid1, oid2) {\n  if (oid1 == null) {\n    return -1;\n  }\n\n  if (oid2 == null) {\n    return 1;\n  }\n\n  if (oid1.id instanceof Buffer && oid2.id instanceof Buffer) {\n    const oid1Buffer = oid1.id;\n    const oid2Buffer = oid2.id;\n    return oid1Buffer.compare(oid2Buffer);\n  }\n\n  const oid1String = oid1.toString();\n  const oid2String = oid2.toString();\n  return oid1String.localeCompare(oid2String);\n}\n\nfunction updateRsFromPrimary(\n  serverDescriptions,\n  setName,\n  serverDescription,\n  maxSetVersion,\n  maxElectionId\n) {\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n  }\n\n  const electionId = serverDescription.electionId ? serverDescription.electionId : null;\n  if (serverDescription.setVersion && electionId) {\n    if (maxSetVersion && maxElectionId) {\n      if (\n        maxSetVersion > serverDescription.setVersion ||\n        compareObjectId(maxElectionId, electionId) > 0\n      ) {\n        // this primary is stale, we must remove it\n        serverDescriptions.set(\n          serverDescription.address,\n          new ServerDescription(serverDescription.address)\n        );\n\n        return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n      }\n    }\n\n    maxElectionId = serverDescription.electionId;\n  }\n\n  if (\n    serverDescription.setVersion != null &&\n    (maxSetVersion == null || serverDescription.setVersion > maxSetVersion)\n  ) {\n    maxSetVersion = serverDescription.setVersion;\n  }\n\n  // We've heard from the primary. Is it the same primary as before?\n  for (const address of serverDescriptions.keys()) {\n    const server = serverDescriptions.get(address);\n\n    if (server.type === ServerType.RSPrimary && server.address !== serverDescription.address) {\n      // Reset old primary's type to Unknown.\n      serverDescriptions.set(address, new ServerDescription(server.address));\n\n      // There can only be one primary\n      break;\n    }\n  }\n\n  // Discover new hosts from this primary's response.\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  // Remove hosts not in the response.\n  const currentAddresses = Array.from(serverDescriptions.keys());\n  const responseAddresses = serverDescription.allHosts;\n  currentAddresses\n    .filter(addr => responseAddresses.indexOf(addr) === -1)\n    .forEach(address => {\n      serverDescriptions.delete(address);\n    });\n\n  return [checkHasPrimary(serverDescriptions), setName, maxSetVersion, maxElectionId];\n}\n\nfunction updateRsWithPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  if (setName == null) {\n    throw new TypeError('setName is required');\n  }\n\n  if (\n    setName !== serverDescription.setName ||\n    (serverDescription.me && serverDescription.address !== serverDescription.me)\n  ) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return checkHasPrimary(serverDescriptions);\n}\n\nfunction updateRsNoPrimaryFromMember(serverDescriptions, setName, serverDescription) {\n  let topologyType = TopologyType.ReplicaSetNoPrimary;\n\n  setName = setName || serverDescription.setName;\n  if (setName !== serverDescription.setName) {\n    serverDescriptions.delete(serverDescription.address);\n    return [topologyType, setName];\n  }\n\n  serverDescription.allHosts.forEach(address => {\n    if (!serverDescriptions.has(address)) {\n      serverDescriptions.set(address, new ServerDescription(address));\n    }\n  });\n\n  if (serverDescription.me && serverDescription.address !== serverDescription.me) {\n    serverDescriptions.delete(serverDescription.address);\n  }\n\n  return [topologyType, setName];\n}\n\nfunction checkHasPrimary(serverDescriptions) {\n  for (const addr of serverDescriptions.keys()) {\n    if (serverDescriptions.get(addr).type === ServerType.RSPrimary) {\n      return TopologyType.ReplicaSetWithPrimary;\n    }\n  }\n\n  return TopologyType.ReplicaSetNoPrimary;\n}\n\nmodule.exports = {\n  TopologyDescription\n};\n"],"names":["require$$0","require$$1","WIRE_CONSTANTS"],"mappings":"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"}