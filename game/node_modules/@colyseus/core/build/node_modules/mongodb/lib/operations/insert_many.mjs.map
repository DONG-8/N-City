{"version":3,"file":"insert_many.mjs","sources":["../../../../../../../node_modules/mongodb/lib/operations/insert_many.js"],"sourcesContent":["'use strict';\n\nconst OperationBase = require('./operation').OperationBase;\nconst BulkWriteOperation = require('./bulk_write');\nconst MongoError = require('../core').MongoError;\nconst prepareDocs = require('./common_functions').prepareDocs;\n\nclass InsertManyOperation extends OperationBase {\n  constructor(collection, docs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.docs = docs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    let docs = this.docs;\n    const options = this.options;\n\n    if (!Array.isArray(docs)) {\n      return callback(\n        MongoError.create({ message: 'docs parameter must be an array of documents', driver: true })\n      );\n    }\n\n    // If keep going set unordered\n    options['serializeFunctions'] = options['serializeFunctions'] || coll.s.serializeFunctions;\n\n    docs = prepareDocs(coll, docs, options);\n\n    // Generate the bulk write operations\n    const operations = docs.map(document => ({ insertOne: { document } }));\n\n    const bulkWriteOperation = new BulkWriteOperation(coll, operations, options);\n\n    bulkWriteOperation.execute((err, result) => {\n      if (err) return callback(err, null);\n      callback(null, mapInsertManyResults(docs, result));\n    });\n  }\n}\n\nfunction mapInsertManyResults(docs, r) {\n  const finalResult = {\n    result: { ok: 1, n: r.insertedCount },\n    ops: docs,\n    insertedCount: r.insertedCount,\n    insertedIds: r.insertedIds\n  };\n\n  if (r.getLastOp()) {\n    finalResult.result.opTime = r.getLastOp();\n  }\n\n  return finalResult;\n}\n\nmodule.exports = InsertManyOperation;\n"],"names":["require$$0","require$$1","require$$2","BulkWriteOperation"],"mappings":";;;;;AAEA,MAAM,aAAa,GAAGA,SAAsB,CAAC,aAAa,CAAC;AACR;AACnD,MAAM,UAAU,GAAGC,IAAkB,CAAC,UAAU,CAAC;AACjD,MAAM,WAAW,GAAGC,gBAA6B,CAAC,WAAW,CAAC;AAC9D;AACA,MAAM,mBAAmB,SAAS,aAAa,CAAC;AAChD,EAAE,WAAW,CAAC,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;AACzC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;AACnB;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACjC,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACrB,GAAG;AACH;AACA,EAAE,OAAO,CAAC,QAAQ,EAAE;AACpB,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC;AACjC,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACzB,IAAI,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;AACjC;AACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;AAC9B,MAAM,OAAO,QAAQ;AACrB,QAAQ,UAAU,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,8CAA8C,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;AACpG,OAAO,CAAC;AACR,KAAK;AACL;AACA;AACA,IAAI,OAAO,CAAC,oBAAoB,CAAC,GAAG,OAAO,CAAC,oBAAoB,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC;AAC/F;AACA,IAAI,IAAI,GAAG,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AAC5C;AACA;AACA,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,KAAK,EAAE,SAAS,EAAE,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AAC3E;AACA,IAAI,MAAM,kBAAkB,GAAG,IAAIC,UAAkB,CAAC,IAAI,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACjF;AACA,IAAI,kBAAkB,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,MAAM,KAAK;AAChD,MAAM,IAAI,GAAG,EAAE,OAAO,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;AAC1C,MAAM,QAAQ,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;AACzD,KAAK,CAAC,CAAC;AACP,GAAG;AACH,CAAC;AACD;AACA,SAAS,oBAAoB,CAAC,IAAI,EAAE,CAAC,EAAE;AACvC,EAAE,MAAM,WAAW,GAAG;AACtB,IAAI,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,aAAa,EAAE;AACzC,IAAI,GAAG,EAAE,IAAI;AACb,IAAI,aAAa,EAAE,CAAC,CAAC,aAAa;AAClC,IAAI,WAAW,EAAE,CAAC,CAAC,WAAW;AAC9B,GAAG,CAAC;AACJ;AACA,EAAE,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;AACrB,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;AAC9C,GAAG;AACH;AACA,EAAE,OAAO,WAAW,CAAC;AACrB,CAAC;AACD;eACc,GAAG;;;;"}