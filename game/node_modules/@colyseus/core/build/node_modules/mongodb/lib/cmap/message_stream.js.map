{"version":3,"file":"message_stream.js","sources":["../../../../../../../node_modules/mongodb/lib/cmap/message_stream.js"],"sourcesContent":["'use strict';\n\nconst Duplex = require('stream').Duplex;\nconst BufferList = require('bl');\nconst MongoParseError = require('../core/error').MongoParseError;\nconst decompress = require('../core/wireprotocol/compression').decompress;\nconst Response = require('../core/connection/commands').Response;\nconst BinMsg = require('../core/connection/msg').BinMsg;\nconst MongoError = require('../core/error').MongoError;\nconst OP_COMPRESSED = require('../core/wireprotocol/shared').opcodes.OP_COMPRESSED;\nconst OP_MSG = require('../core/wireprotocol/shared').opcodes.OP_MSG;\nconst MESSAGE_HEADER_SIZE = require('../core/wireprotocol/shared').MESSAGE_HEADER_SIZE;\nconst COMPRESSION_DETAILS_SIZE = require('../core/wireprotocol/shared').COMPRESSION_DETAILS_SIZE;\nconst opcodes = require('../core/wireprotocol/shared').opcodes;\nconst compress = require('../core/wireprotocol/compression').compress;\nconst compressorIDs = require('../core/wireprotocol/compression').compressorIDs;\nconst uncompressibleCommands = require('../core/wireprotocol/compression').uncompressibleCommands;\nconst Msg = require('../core/connection/msg').Msg;\n\nconst kDefaultMaxBsonMessageSize = 1024 * 1024 * 16 * 4;\nconst kBuffer = Symbol('buffer');\n\n/**\n * A duplex stream that is capable of reading and writing raw wire protocol messages, with\n * support for optional compression\n */\nclass MessageStream extends Duplex {\n  constructor(options) {\n    options = options || {};\n    super(options);\n\n    this.bson = options.bson;\n    this.maxBsonMessageSize = options.maxBsonMessageSize || kDefaultMaxBsonMessageSize;\n\n    this[kBuffer] = new BufferList();\n  }\n\n  _write(chunk, _, callback) {\n    const buffer = this[kBuffer];\n    buffer.append(chunk);\n\n    processIncomingData(this, callback);\n  }\n\n  _read(/* size */) {\n    // NOTE: This implementation is empty because we explicitly push data to be read\n    //       when `writeMessage` is called.\n    return;\n  }\n\n  writeCommand(command, operationDescription) {\n    // TODO: agreed compressor should live in `StreamDescription`\n    const shouldCompress = operationDescription && !!operationDescription.agreedCompressor;\n    if (!shouldCompress || !canCompress(command)) {\n      const data = command.toBin();\n      this.push(Array.isArray(data) ? Buffer.concat(data) : data);\n      return;\n    }\n\n    // otherwise, compress the message\n    const concatenatedOriginalCommandBuffer = Buffer.concat(command.toBin());\n    const messageToBeCompressed = concatenatedOriginalCommandBuffer.slice(MESSAGE_HEADER_SIZE);\n\n    // Extract information needed for OP_COMPRESSED from the uncompressed message\n    const originalCommandOpCode = concatenatedOriginalCommandBuffer.readInt32LE(12);\n\n    // Compress the message body\n    compress({ options: operationDescription }, messageToBeCompressed, (err, compressedMessage) => {\n      if (err) {\n        operationDescription.cb(err, null);\n        return;\n      }\n\n      // Create the msgHeader of OP_COMPRESSED\n      const msgHeader = Buffer.alloc(MESSAGE_HEADER_SIZE);\n      msgHeader.writeInt32LE(\n        MESSAGE_HEADER_SIZE + COMPRESSION_DETAILS_SIZE + compressedMessage.length,\n        0\n      ); // messageLength\n      msgHeader.writeInt32LE(command.requestId, 4); // requestID\n      msgHeader.writeInt32LE(0, 8); // responseTo (zero)\n      msgHeader.writeInt32LE(opcodes.OP_COMPRESSED, 12); // opCode\n\n      // Create the compression details of OP_COMPRESSED\n      const compressionDetails = Buffer.alloc(COMPRESSION_DETAILS_SIZE);\n      compressionDetails.writeInt32LE(originalCommandOpCode, 0); // originalOpcode\n      compressionDetails.writeInt32LE(messageToBeCompressed.length, 4); // Size of the uncompressed compressedMessage, excluding the MsgHeader\n      compressionDetails.writeUInt8(compressorIDs[operationDescription.agreedCompressor], 8); // compressorID\n\n      this.push(Buffer.concat([msgHeader, compressionDetails, compressedMessage]));\n    });\n  }\n}\n\n// Return whether a command contains an uncompressible command term\n// Will return true if command contains no uncompressible command terms\nfunction canCompress(command) {\n  const commandDoc = command instanceof Msg ? command.command : command.query;\n  const commandName = Object.keys(commandDoc)[0];\n  return !uncompressibleCommands.has(commandName);\n}\n\nfunction processIncomingData(stream, callback) {\n  const buffer = stream[kBuffer];\n  if (buffer.length < 4) {\n    callback();\n    return;\n  }\n\n  const sizeOfMessage = buffer.readInt32LE(0);\n  if (sizeOfMessage < 0) {\n    callback(new MongoParseError(`Invalid message size: ${sizeOfMessage}`));\n    return;\n  }\n\n  if (sizeOfMessage > stream.maxBsonMessageSize) {\n    callback(\n      new MongoParseError(\n        `Invalid message size: ${sizeOfMessage}, max allowed: ${stream.maxBsonMessageSize}`\n      )\n    );\n    return;\n  }\n\n  if (sizeOfMessage > buffer.length) {\n    callback();\n    return;\n  }\n\n  const message = buffer.slice(0, sizeOfMessage);\n  buffer.consume(sizeOfMessage);\n\n  const messageHeader = {\n    length: message.readInt32LE(0),\n    requestId: message.readInt32LE(4),\n    responseTo: message.readInt32LE(8),\n    opCode: message.readInt32LE(12)\n  };\n\n  let ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n  const responseOptions = stream.responseOptions;\n  if (messageHeader.opCode !== OP_COMPRESSED) {\n    const messageBody = message.slice(MESSAGE_HEADER_SIZE);\n    stream.emit(\n      'message',\n      new ResponseType(stream.bson, message, messageHeader, messageBody, responseOptions)\n    );\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n\n    return;\n  }\n\n  messageHeader.fromCompressed = true;\n  messageHeader.opCode = message.readInt32LE(MESSAGE_HEADER_SIZE);\n  messageHeader.length = message.readInt32LE(MESSAGE_HEADER_SIZE + 4);\n  const compressorID = message[MESSAGE_HEADER_SIZE + 8];\n  const compressedBuffer = message.slice(MESSAGE_HEADER_SIZE + 9);\n\n  // recalculate based on wrapped opcode\n  ResponseType = messageHeader.opCode === OP_MSG ? BinMsg : Response;\n\n  decompress(compressorID, compressedBuffer, (err, messageBody) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n\n    if (messageBody.length !== messageHeader.length) {\n      callback(\n        new MongoError(\n          'Decompressing a compressed message from the server failed. The message is corrupt.'\n        )\n      );\n\n      return;\n    }\n\n    stream.emit(\n      'message',\n      new ResponseType(stream.bson, message, messageHeader, messageBody, responseOptions)\n    );\n\n    if (buffer.length >= 4) {\n      processIncomingData(stream, callback);\n    } else {\n      callback();\n    }\n  });\n}\n\nmodule.exports = MessageStream;\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","BufferList"],"mappings":"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"}