{"version":3,"file":"sessions.js","sources":["../../../../../../../node_modules/mongodb/lib/core/sessions.js"],"sourcesContent":["'use strict';\n\nconst retrieveBSON = require('./connection/utils').retrieveBSON;\nconst EventEmitter = require('events');\nconst BSON = retrieveBSON();\nconst Binary = BSON.Binary;\nconst uuidV4 = require('./utils').uuidV4;\nconst MongoError = require('./error').MongoError;\nconst isRetryableError = require('././error').isRetryableError;\nconst MongoNetworkError = require('./error').MongoNetworkError;\nconst MongoWriteConcernError = require('./error').MongoWriteConcernError;\nconst Transaction = require('./transactions').Transaction;\nconst TxnState = require('./transactions').TxnState;\nconst isPromiseLike = require('./utils').isPromiseLike;\nconst ReadPreference = require('./topologies/read_preference');\nconst maybePromise = require('../utils').maybePromise;\nconst isTransactionCommand = require('./transactions').isTransactionCommand;\nconst resolveClusterTime = require('./topologies/shared').resolveClusterTime;\nconst isSharded = require('./wireprotocol/shared').isSharded;\nconst maxWireVersion = require('./utils').maxWireVersion;\nconst now = require('./../utils').now;\nconst calculateDurationInMs = require('./../utils').calculateDurationInMs;\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new MongoError('Cannot use a session that has ended');\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n\n/**\n * Options to pass when creating a Client Session\n * @typedef {Object} SessionOptions\n * @property {boolean} [causalConsistency=true] Whether causal consistency should be enabled on this session\n * @property {TransactionOptions} [defaultTransactionOptions] The default TransactionOptions to use for transactions started on this session.\n */\n\n/**\n * A BSON document reflecting the lsid of a {@link ClientSession}\n * @typedef {Object} SessionId\n */\n\nconst kServerSession = Symbol('serverSession');\n\n/**\n * A class representing a client session on the server\n * WARNING: not meant to be instantiated directly.\n * @class\n * @hideconstructor\n */\nclass ClientSession extends EventEmitter {\n  /**\n   * Create a client session.\n   * WARNING: not meant to be instantiated directly\n   *\n   * @param {Topology} topology The current client's topology (Internal Class)\n   * @param {ServerSessionPool} sessionPool The server session pool (Internal Class)\n   * @param {SessionOptions} [options] Optional settings\n   * @param {Object} [clientOptions] Optional settings provided when creating a client in the porcelain driver\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n\n    if (topology == null) {\n      throw new Error('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      throw new Error('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options || {};\n    clientOptions = clientOptions || {};\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n\n    this.supports = {\n      causalConsistency:\n        typeof options.causalConsistency !== 'undefined' ? options.causalConsistency : true\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = null;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /**\n   * The server id associated with this session\n   * @type {SessionId}\n   */\n  get id() {\n    return this.serverSession.id;\n  }\n\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    return this[kServerSession];\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param {Object} [options] Optional settings. Currently reserved for future use\n   * @param {Function} [callback] Optional callback for completion of this operation\n   */\n  endSession(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || {};\n\n    const session = this;\n    return maybePromise(this, callback, done => {\n      if (session.hasEnded) {\n        return done();\n      }\n\n      function completeEndSession() {\n        // release the server session back to the pool\n        session.sessionPool.release(session.serverSession);\n        session[kServerSession] = undefined;\n\n        // mark the session as ended, and emit a signal\n        session.hasEnded = true;\n        session.emit('ended', session);\n\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      }\n\n      if (session.serverSession && session.inTransaction()) {\n        session.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param {Timestamp} operationTime the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Used to determine if this session equals another\n   * @param {ClientSession} session\n   * @return {boolean} true if the sessions are equal\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /**\n   * Increment the transaction number on the internal ServerSession\n   */\n  incrementTransactionNumber() {\n    this.serverSession.txnNumber++;\n  }\n\n  /**\n   * @returns {boolean} whether this session is currently in a transaction or not\n   */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param {TransactionOptions} options Options for the transaction\n   */\n  startTransaction(options) {\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new MongoError('Transaction already in progress');\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n\n    // create transaction state\n    this.transaction = new Transaction(\n      Object.assign({}, this.clientOptions, options || this.defaultTransactionOptions)\n    );\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  commitTransaction(callback) {\n    return maybePromise(this, callback, done => endTransaction(this, 'commitTransaction', done));\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param {Function} [callback] optional callback for completion of this operation\n   * @return {Promise} A promise is returned if no callback is provided\n   */\n  abortTransaction(callback) {\n    return maybePromise(this, callback, done => endTransaction(this, 'abortTransaction', done));\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   * @ignore\n   */\n  toBSON() {\n    throw new Error('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * A user provided function to be run within a transaction\n   *\n   * @callback WithTransactionCallback\n   * @param {ClientSession} session The parent session of the transaction running the operation. This should be passed into each operation within the lambda.\n   * @returns {Promise} The resulting Promise of operations run within this transaction\n   */\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param {WithTransactionCallback} fn\n   * @param {TransactionOptions} [options] Optional settings for the transaction\n   */\n  withTransaction(fn, options) {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst UNSATISFIABLE_WRITE_CONCERN_CODE = 100;\nconst UNKNOWN_REPL_WRITE_CONCERN_CODE = 79;\nconst MAX_TIME_MS_EXPIRED_CODE = 50;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime, max) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err) {\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName) &&\n      err.code !== UNSATISFIABLE_WRITE_CONCERN_CODE &&\n      err.code !== UNKNOWN_REPL_WRITE_CONCERN_CODE)\n  );\n}\n\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null) return false;\n  return (\n    err.code === MAX_TIME_MS_EXPIRED_CODE ||\n    (err.writeConcernError && err.writeConcernError.code === MAX_TIME_MS_EXPIRED_CODE)\n  );\n}\n\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction(session, startTime, fn, options) {\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new TypeError('Function provided to `withTransaction` must return a Promise');\n  }\n\n  return promise\n    .then(() => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    })\n    .catch(err => {\n      function maybeRetryOrThrow(err) {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError') &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel('UnknownTransactionCommitResult');\n        }\n\n        throw err;\n      }\n\n      if (session.transaction.isActive) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    });\n}\n\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n\n  // handle any initial problematic cases\n  let txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback(null, null);\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(new MongoError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.w) {\n    writeConcern = { w: session.clientOptions.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(e, r) {\n    if (commandName === 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n\n      if (\n        e &&\n        (e instanceof MongoNetworkError ||\n          e instanceof MongoWriteConcernError ||\n          isRetryableError(e) ||\n          isMaxTimeMSExpiredError(e))\n      ) {\n        if (isUnknownTransactionCommitResult(e)) {\n          e.addErrorLabel('UnknownTransactionCommitResult');\n\n          // per txns spec, must unpin session in this case\n          session.transaction.unpinServer();\n        }\n      }\n    } else {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n    }\n\n    callback(e, r);\n  }\n\n  // The spec indicates that we should ignore all errors on `abortTransaction`\n  function transactionError(err) {\n    return commandName === 'commitTransaction' ? err : null;\n  }\n\n  if (\n    // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n    session.transaction.recoveryToken &&\n    supportsRecoveryToken(session)\n  ) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  session.topology.command('admin.$cmd', command, { session }, (err, reply) => {\n    if (err && isRetryableError(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.transaction.unpinServer();\n\n        command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n\n      return session.topology.command('admin.$cmd', command, { session }, (_err, _reply) =>\n        commandHandler(transactionError(_err), _reply)\n      );\n    }\n\n    commandHandler(transactionError(err), reply);\n  });\n}\n\nfunction supportsRecoveryToken(session) {\n  const topology = session.topology;\n  return !!topology.s.options.useRecoveryToken;\n}\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @ignore\n */\nclass ServerSession {\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   * @ignore\n   * @param {Date} sessionTimeoutMinutes The server's \"logicalSessionTimeoutMinutes\"\n   * @return {boolean} true if the session has timed out.\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @ignore\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new Error('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /**\n   * Ends all sessions in the session pool.\n   * @ignore\n   */\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(\n        this.sessions.map(session => session.id),\n        () => {\n          this.sessions = [];\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      );\n\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession\n   * is created.\n   * @ignore\n   * @returns {ServerSession}\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   * @ignore\n   * @param {ServerSession} session The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (\n    command.aggregate ||\n    command.count ||\n    command.distinct ||\n    command.find ||\n    command.parallelCollectionScan ||\n    command.geoNear ||\n    command.geoSearch\n  ) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @ignore\n * @param {ClientSession} session the session tracking transaction state\n * @param {Object} command the command to decorate\n * @param {Object} topology the topology for tracking the cluster time\n * @param {Object} [options] Optional settings passed to calling operation\n * @return {MongoError|null} An error, if some error condition was met\n */\nfunction applySession(session, command, options) {\n  if (session.hasEnded) {\n    // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n    return new MongoError('Cannot use a session that has ended');\n  }\n\n  // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n  if (options && options.writeConcern && options.writeConcern.w === 0) {\n    return;\n  }\n\n  const serverSession = session.serverSession;\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options.willRetryWrite;\n  const shouldApplyReadConcern = commandSupportsReadConcern(command, options);\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = BSON.Long.fromNumber(serverSession.txnNumber);\n  }\n\n  // now attempt to apply transaction-specific sessions data\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    // TODO: the following should only be applied to read operation per spec.\n    // for causal consistency\n    if (session.supports.causalConsistency && session.operationTime && shouldApplyReadConcern) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n\n    return;\n  }\n\n  if (options.readPreference && !options.readPreference.equals(ReadPreference.primary)) {\n    return new MongoError(\n      `Read preference in a transaction must be primary, not: ${options.readPreference.mode}`\n    );\n  }\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session.clientOptions.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n}\n\nfunction updateSessionFromResponse(session, document) {\n  if (document.$clusterTime) {\n    resolveClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n}\n\nmodule.exports = {\n  ClientSession,\n  ServerSession,\n  ServerSessionPool,\n  TxnState,\n  applySession,\n  updateSessionFromResponse,\n  commandSupportsReadConcern\n};\n"],"names":["require$$0","require$$1","require$$2","require$$3","require$$4","require$$5","require$$6","require$$7","require$$8","EventEmitter","ReadPreference"],"mappings":"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"}