{"version":3,"file":"bulk_write.mjs","sources":["../../../../../../../node_modules/mongodb/lib/operations/bulk_write.js"],"sourcesContent":["'use strict';\n\nconst applyRetryableWrites = require('../utils').applyRetryableWrites;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst MongoError = require('../core').MongoError;\nconst OperationBase = require('./operation').OperationBase;\n\nclass BulkWriteOperation extends OperationBase {\n  constructor(collection, operations, options) {\n    super(options);\n\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    let options = this.options;\n\n    // Add ignoreUndfined\n    if (coll.s.options.ignoreUndefined) {\n      options = Object.assign({}, options);\n      options.ignoreUndefined = coll.s.options.ignoreUndefined;\n    }\n\n    // Create the bulk operation\n    const bulk =\n      options.ordered === true || options.ordered == null\n        ? coll.initializeOrderedBulkOp(options)\n        : coll.initializeUnorderedBulkOp(options);\n\n    // Do we have a collation\n    let collation = false;\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        // Get the operation type\n        const key = Object.keys(operations[i])[0];\n        // Check if we have a collation\n        if (operations[i][key].collation) {\n          collation = true;\n        }\n\n        // Pass to the raw bulk\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err, null);\n    }\n\n    // Final options for retryable writes and write concern\n    let finalOptions = Object.assign({}, options);\n    finalOptions = applyRetryableWrites(finalOptions, coll.s.db);\n    finalOptions = applyWriteConcern(finalOptions, { db: coll.s.db, collection: coll }, options);\n\n    const writeCon = finalOptions.writeConcern ? finalOptions.writeConcern : {};\n    const capabilities = coll.s.topology.capabilities();\n\n    // Did the user pass in a collation, check if our write server supports it\n    if (collation && capabilities && !capabilities.commandsTakeCollation) {\n      return callback(new MongoError('server/primary/mongos does not support collation'));\n    }\n\n    // Execute the bulk\n    bulk.execute(writeCon, finalOptions, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err, null);\n      }\n\n      // Update the n\n      r.n = r.insertedCount;\n\n      // Inserted documents\n      const inserted = r.getInsertedIds();\n      // Map inserted ids\n      for (let i = 0; i < inserted.length; i++) {\n        r.insertedIds[inserted[i].index] = inserted[i]._id;\n      }\n\n      // Upserted documents\n      const upserted = r.getUpsertedIds();\n      // Map upserted ids\n      for (let i = 0; i < upserted.length; i++) {\n        r.upsertedIds[upserted[i].index] = upserted[i]._id;\n      }\n\n      // Return the results\n      callback(null, r);\n    });\n  }\n}\n\nmodule.exports = BulkWriteOperation;\n"],"names":["require$$0","require$$1","require$$2"],"mappings":"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"}