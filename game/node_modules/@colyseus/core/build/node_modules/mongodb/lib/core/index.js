'use strict';

var _commonjsHelpers = require('../../../../_virtual/_commonjsHelpers.js');
var index = require('../../../bson/index.js');
var index$1 = require('../../../optional-require/index.js');
var utils = require('./utils.js');
var error = require('./error.js');
var connection = require('./connection/connection.js');
var server = require('./topologies/server.js');
var replset = require('./topologies/replset.js');
var mongos = require('./topologies/mongos.js');
var logger = require('./connection/logger.js');
var cursor = require('./cursor.js');
var read_preference = require('./topologies/read_preference.js');
var sessions = require('./sessions.js');
var topology = require('./sdam/topology.js');
var commands = require('./connection/commands.js');
var mongo_credentials = require('./auth/mongo_credentials.js');
var defaultAuthProviders = require('./auth/defaultAuthProviders.js');
var mongocr = require('./auth/mongocr.js');
var x509 = require('./auth/x509.js');
var plain = require('./auth/plain.js');
var gssapi = require('./auth/gssapi.js');
var scram = require('./auth/scram.js');
var uri_parser = require('./uri_parser.js');

let BSON = index;
const require_optional = index$1(_commonjsHelpers.commonjsRequire);
const EJSON = utils.retrieveEJSON();

try {
  // Attempt to grab the native BSON parser
  const BSONNative = require_optional('bson-ext');
  // If we got the native parser, use it instead of the
  // Javascript one
  if (BSONNative) {
    BSON = BSONNative;
  }
} catch (err) {} // eslint-disable-line

var core = {
  // Errors
  MongoError: error.MongoError,
  MongoNetworkError: error.MongoNetworkError,
  MongoParseError: error.MongoParseError,
  MongoTimeoutError: error.MongoTimeoutError,
  MongoServerSelectionError: error.MongoServerSelectionError,
  MongoWriteConcernError: error.MongoWriteConcernError,
  // Core
  Connection: connection,
  Server: server,
  ReplSet: replset,
  Mongos: mongos,
  Logger: logger,
  Cursor: cursor.CoreCursor,
  ReadPreference: read_preference,
  Sessions: sessions,
  BSON: BSON,
  EJSON: EJSON,
  Topology: topology.Topology,
  // Raw operations
  Query: commands.Query,
  // Auth mechanisms
  MongoCredentials: mongo_credentials.MongoCredentials,
  defaultAuthProviders: defaultAuthProviders.defaultAuthProviders,
  MongoCR: mongocr,
  X509: x509,
  Plain: plain,
  GSSAPI: gssapi,
  ScramSHA1: scram.ScramSHA1,
  ScramSHA256: scram.ScramSHA256,
  // Utilities
  parseConnectionString: uri_parser
};

module.exports = core;
//# sourceMappingURL=index.js.map
