import operation from './operation.mjs';
import utils from '../utils.mjs';
import core from '../core/index.mjs';

const OperationBase = operation.OperationBase;
const handleCallback = utils.handleCallback;
const MongoError = core.MongoError;
const MongoDBNamespace = utils.MongoDBNamespace;

class ExecuteDbAdminCommandOperation extends OperationBase {
  constructor(db, selector, options) {
    super(options);

    this.db = db;
    this.selector = selector;
  }

  execute(callback) {
    const db = this.db;
    const selector = this.selector;
    const options = this.options;

    const namespace = new MongoDBNamespace('admin', '$cmd');
    db.s.topology.command(namespace, selector, options, (err, result) => {
      // Did the user destroy the topology
      if (db.serverConfig && db.serverConfig.isDestroyed()) {
        return callback(new MongoError('topology was destroyed'));
      }

      if (err) return handleCallback(callback, err);
      handleCallback(callback, null, result.result);
    });
  }
}

var execute_db_admin_command = ExecuteDbAdminCommandOperation;

export default execute_db_admin_command;
//# sourceMappingURL=execute_db_admin_command.mjs.map
