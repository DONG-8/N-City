{"version":3,"file":"index.mjs.js","sources":["../../../../../../drivers/mongoose-driver/build/index.mjs"],"sourcesContent":["import { debugDriver } from '@colyseus/core';\nimport mongoose, { Schema } from 'mongoose';\n\nconst RoomCacheSchema = new Schema({\n    clients: { type: Number, default: 0 },\n    locked: { type: Boolean, default: false },\n    maxClients: { type: Number, default: Infinity },\n    metadata: Schema.Types.Mixed,\n    name: String,\n    private: { type: Boolean, default: false },\n    publicAddress: String,\n    processId: String,\n    roomId: String,\n    unlisted: { type: Boolean, default: false }, // used for default LobbyRoom (prevent from showing up on room listing)\n}, {\n    strict: false,\n    timestamps: true,\n    versionKey: false,\n});\nRoomCacheSchema.index({ name: 1, locked: -1 });\nRoomCacheSchema.index({ roomId: 1 });\nconst RoomCache = mongoose.model('RoomCache', RoomCacheSchema);\nclass MongooseDriver {\n    constructor(connectionURI) {\n        if (mongoose.connection.readyState === mongoose.STATES.disconnected) {\n            connectionURI = connectionURI || process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/colyseus';\n            mongoose.connect(connectionURI, {\n                autoIndex: true,\n                useCreateIndex: true,\n                useFindAndModify: true,\n                useNewUrlParser: true,\n                useUnifiedTopology: true,\n            });\n            debugDriver(\"üóÑÔ∏è Connected to\", connectionURI);\n        }\n    }\n    createInstance(initialValues = {}) {\n        return new RoomCache(initialValues);\n    }\n    async find(conditions, additionalProjectionFields = {}) {\n        return (await RoomCache.find(conditions, {\n            _id: false,\n            clients: true,\n            createdAt: true,\n            locked: true,\n            maxClients: true,\n            metadata: true,\n            name: true,\n            roomId: true,\n            ...additionalProjectionFields,\n        }));\n    }\n    findOne(conditions) {\n        return (RoomCache.findOne(conditions, {\n            _id: 0,\n        }));\n    }\n    async clear() {\n        await RoomCache.deleteMany({});\n    }\n    async shutdown() {\n        await mongoose.disconnect();\n    }\n}\n\nexport { MongooseDriver };\n//# sourceMappingURL=index.mjs.map\n"],"names":["Schema","mongoose"],"mappings":";;;;;AAGA,MAAM,eAAe,GAAG,IAAIA,YAAM,CAAC;AACnC,IAAI,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,EAAE;AACzC,IAAI,MAAM,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;AAC7C,IAAI,UAAU,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE;AACnD,IAAI,QAAQ,EAAEA,YAAM,CAAC,KAAK,CAAC,KAAK;AAChC,IAAI,IAAI,EAAE,MAAM;AAChB,IAAI,OAAO,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;AAC9C,IAAI,aAAa,EAAE,MAAM;AACzB,IAAI,SAAS,EAAE,MAAM;AACrB,IAAI,MAAM,EAAE,MAAM;AAClB,IAAI,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE;AAC/C,CAAC,EAAE;AACH,IAAI,MAAM,EAAE,KAAK;AACjB,IAAI,UAAU,EAAE,IAAI;AACpB,IAAI,UAAU,EAAE,KAAK;AACrB,CAAC,CAAC,CAAC;AACH,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC/C,eAAe,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;AACnBC,KAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,eAAe;;"}